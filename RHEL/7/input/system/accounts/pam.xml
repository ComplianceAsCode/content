<Group id="accounts-pam">
<title>Protect Accounts by Configuring PAM</title>
<description>PAM, or Pluggable Authentication Modules, is a system
which implements modular authentication for Linux programs. PAM provides
a flexible and configurable architecture for authentication, and it should be configured
to minimize exposure to unnecessary risk. This section contains
guidance on how to accomplish that.
<br /><br />
PAM is implemented as a set of shared objects which are
loaded and invoked whenever an application wishes to authenticate a
user. Typically, the application must be running as root in order
to take advantage of PAM, because PAM's modules often need to be able
to access sensitive stores of account information, such as /etc/shadow.
Traditional privileged network listeners
(e.g. sshd) or SUID programs (e.g. sudo) already meet this
requirement. An SUID root application, userhelper, is provided so
that programs which are not SUID or privileged themselves can still
take advantage of PAM.
<br /><br />
PAM looks in the directory <tt>/etc/pam.d</tt> for
application-specific configuration information. For instance, if
the program login attempts to authenticate a user, then PAM's
libraries follow the instructions in the file <tt>/etc/pam.d/login</tt>
to determine what actions should be taken.
<br /><br />
One very important file in <tt>/etc/pam.d</tt> is
<tt>/etc/pam.d/system-auth</tt>. This file, which is included by
many other PAM configuration files, defines 'default' system authentication
measures. Modifying this file is a good way to make far-reaching
authentication changes, for instance when implementing a
centralized authentication service.</description>
<warning category="general">Be careful when making changes to PAM's
configuration files. The syntax for these files is complex, and
modifications can have unexpected consequences. The default
configurations shipped with applications should be sufficient for
most users.</warning>
<warning category="general">Running <tt>authconfig</tt> or
<tt>system-config-authentication</tt> will re-write the PAM configuration
files, destroying any manually made changes and replacing them with
a series of system defaults. One reference to the configuration
file syntax can be found at
http://www.kernel.org/pub/linux/libs/pam/Linux-PAM-html/sag-configuration-file.html.</warning>

<Value id="var_password_history_retain_limit" type="number"
operator="equals" interactive="0">
<title>remember</title>
<description>The last n passwords for each user are saved in
<tt>/etc/security/opasswd</tt> in order to force password change history and
keep the user from alternating between the same password too
frequently.</description>
<value selector="">24</value>
<value selector="0">0</value>
<value selector="5">5</value>
<value selector="10">10</value>
<value selector="24">24</value>
</Value>

<Rule id="display_login_attempts">
<title>Set Last Logon/Access Notification</title>
<description>To configure the system to notify users of last logon/access
using <tt>pam_lastlog</tt>, add the following line immediately after <tt>session  required  pam_limits.so</tt>:
<pre>session       required     pam_lastlog.so showfailed</pre>
</description>
<ocil clause="that is not the case">
To ensure that last logon/access notification is configured correctly, run
the following command:
<pre># grep pam_lastlog.so /etc/pam.d/system-auth</pre>
The output should show output <tt>showfailed</tt>.
</ocil>
<rationale>
Users need to be aware of activity that occurs regarding
their account. Providing users with information regarding the number
of unsuccessful attempts that were made to login to their account
allows the user to determine if any unauthorized activity has occurred
and gives them an opportunity to notify administrators.
</rationale>
<ident cce="RHEL7-CCE-TBD" />
<oval id="display_login_attempts" />
<ref disa="53" />
</Rule>

<Group id="password_quality">
<title>Set Password Quality Requirements</title>
<description>The default <tt>pam_cracklib</tt> PAM module provides strength
checking for passwords. It performs a number of checks, such as
making sure passwords are not similar to dictionary words, are of
at least a certain length, are not the previous password reversed,
and are not simply a change of case from the previous password. It
can also require passwords to be in certain character classes.
<br /><br />
The <tt>pam_passwdqc</tt> PAM module also provides the ability to enforce
stringent password strength requirements. It is provided
in an RPM of the same name.
<br /><br />
The man pages <tt>pam_cracklib(8)</tt> and <tt>pam_passwdqc(8)</tt>
provide information on the capabilities and configuration of
each.</description>

<Group id="password_quality_pamcracklib">
<title>Set Password Quality Requirements, if using
pam_cracklib</title>
<description>The <tt>pam_cracklib</tt> PAM module can be configured to meet
requirements for a variety of policies.
<br /><br />
For example, to configure <tt>pam_cracklib</tt> to require at least one uppercase
character, lowercase character, digit, and other (special)
character, locate the following line in <tt>/etc/pam.d/system-auth</tt>:
<pre>password requisite pam_cracklib.so try_first_pass retry=3</pre>
and then alter it to read:
<pre>password required pam_cracklib.so try_first_pass retry=3 maxrepeat=3 minlen=14 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=-1 difok=4</pre>
If no such line exists, add one as the first line of the password section in <tt>/etc/pam.d/system-auth</tt>.
The arguments can be modified to ensure compliance with
your organization's security policy. Discussion of each parameter follows.
</description>
<warning category="general">Note that the password quality
requirements are not enforced for the root account for some
reason.</warning>

<Value id="var_password_pam_cracklib_retry" type="number" operator="equals" interactive="0">
<title>retry</title>
<description>Number of retry attempts before erroring out</description>
<value selector="">3</value>
<value selector="1">1</value>
<value selector="2">2</value>
<value selector="3">3</value>
</Value>

<Value id="var_password_pam_cracklib_minlen" type="number"
operator="equals" interactive="0">
<title>minlen</title>
<description>Minimum number of characters in password</description>
<value selector="">14</value>
<value selector="6">6</value>
<!-- NIST 800-53 requires 1 in a million using brute force which translates to six numbers -->
<value selector="8">8</value>
<value selector="10">10</value>
<value selector="12">12</value>
<value selector="14">14</value>
<value selector="15">15</value>
</Value>
<Value id="var_password_pam_cracklib_dcredit" type="number"
operator="equals" interactive="0">
<title>dcredit</title>
<description>Minimum number of digits in password</description>
<value selector="">-1</value>
<value selector="2">-2</value>
<value selector="1">-1</value>
<value selector="0">0</value>
</Value>
<Value id="var_password_pam_cracklib_ocredit" type="number"
operator="equals" interactive="0">
<title>ocredit</title>
<description>Minimum number of other (special characters) in
password</description>
<value selector="">-1</value>
<value selector="2">-2</value>
<value selector="1">-1</value>
<value selector="0">0</value>
</Value>
<Value id="var_password_pam_cracklib_lcredit" type="number"
operator="equals" interactive="0">
<title>lcredit</title>
<description>Minimum number of lower case in password</description>
<value selector="">-1</value>
<value selector="2">-2</value>
<value selector="1">-1</value>
<value selector="0">0</value>
</Value>
<Value id="var_password_pam_cracklib_ucredit" type="number"
operator="equals" interactive="0">
<title>ucredit</title>
<description>Minimum number of upper case in password</description>
<value selector="">-1</value>
<value selector="2">-2</value>
<value selector="1">-1</value>
<value selector="0">0</value>
</Value>
<Value id="var_password_pam_cracklib_difok" type="number"
operator="equals" interactive="0">
<title>difok</title>
<description>Minimum number of characters not present in old
password</description>
<warning category="general">Keep this high for short
passwords</warning>
<value selector="">4</value>
<value selector="2">2</value>
<value selector="3">3</value>
<value selector="4">4</value>
<value selector="5">5</value>
</Value>
<Value id="var_accounts_passwords_pam_faillock_deny" type="number"
operator="equals" interactive="0">
<title>fail_deny</title>
<description>Number of failed login attempts before account lockout</description>
<value selector="">3</value>
<value selector="3">3</value>
<value selector="5">5</value>
<value selector="10">10</value>
</Value>
<Value id="var_accounts_passwords_pam_faillock_unlock_time" type="number"
operator="equals" interactive="0">
<title>fail_unlock_time</title>
<description>Seconds before automatic unlocking after excessive failed logins</description>
<value selector="">604800</value>
<value selector="900">900</value> <!-- 15 minutes -->
<value selector="1800">1800</value> <!-- 30 minutes -->
<value selector="3600">3600</value> <!-- 1 hour -->
<value selector="86400">86400</value> <!-- 1 day -->
<value selector="604800">604800</value> <!-- 7 days -->
</Value>
<Value id="var_accounts_passwords_pam_faillock_fail_interval" type="number"
operator="equals" interactive="0">
<title>fail_interval</title>
<description>Interval for counting failed login attempts before account lockout</description>
<value selector="">900</value>
<value selector="900">900</value> <!-- 15 minutes -->
<value selector="1800">1800</value> <!-- 30 minutes -->
<value selector="3600">3600</value> <!-- 1 hour -->
<value selector="86400">86400</value> <!-- 1 day -->
<value selector="100000000">100000000</value> <!-- 3.16 years -->
</Value>

<Rule id="accounts_password_pam_cracklib_retry">
<title>Set Password Retry Prompts Permitted Per-Session</title>
<description>To configure the number of retry prompts that are permitted per-session:
<br /><br />
Edit the <tt>pam_cracklib.so</tt> statement in <tt>/etc/pam.d/system-auth</tt> to 
show <tt>retry=3</tt>, or a lower value if site policy is more restrictive.
<br /><br />
The DoD requirement is a maximum of 3 prompts per session.
</description>
<ocil clause="it is not the required value">
To check how many retry attempts are permitted on a per-session basis, run the following command:
<pre>$ grep pam_cracklib /etc/pam.d/system-auth</pre>
The <tt>retry</tt> parameter will indicate how many attempts are permitted.
The DoD required value is less than or equal to 3.
This would appear as <tt>retry=3</tt>, or a lower value.
</ocil>
<rationale>
Setting the password retry prompts that are permitted on a per-session basis to a low value
requires some software, such as SSH, to re-connect. This can slow down and
draw additional attention to some types of password-guessing attacks. Note that this
is different from account lockout, which is provided by the pam_faillock module.
</rationale>
<ident cce="RHEL7-CCE-TBD" />
<oval id="accounts_password_pam_cracklib_retry" value="var_password_pam_cracklib_retry"/>
<ref nist="IA-5(c)" disa="1092" />
<tested by="DS" on="20121024"/>
</Rule>

<Rule id="password_require_consecrepeat">
<title>Set Password to Maximum of Three Consecutive Repeating Characters</title>
<description>The pam_cracklib module's <tt>maxrepeat</tt> parameter controls requirements for
consecutive repeating characters. When set to a positive number, it will reject passwords
which contain more than that number of consecutive characters. Add <tt>maxrepeat=3</tt>
after pam_cracklib.so to prevent a run of four or more identical characters.
</description>
<ocil clause="maxrepeat is not found or not set to the required value">
To check the maximum value for consecutive repeating characters, run the following command:
<pre>$ grep pam_cracklib /etc/pam.d/system-auth</pre>
Look for the value of the <tt>maxrepeat</tt> parameter. The DoD requirement is 3.
</ocil>
<rationale>
Passwords with excessive repeating characters may be more vulnerable to password-guessing attacks.
</rationale>
<ident cce="RHEL7-CCE-TBD" />
<ref nist="IA-5(c)" disa="366"/>
</Rule>

<Rule id="accounts_password_pam_cracklib_dcredit">
<title>Set Password Strength Minimum Digit Characters</title>
<description>The pam_cracklib module's <tt>dcredit</tt> parameter controls requirements for
usage of digits in a password. When set to a negative number, any password will be required to
contain that many digits. When set to a positive number, pam_cracklib will grant +1 additional
length credit for each digit.  
Add <tt>dcredit=-1</tt> after pam_cracklib.so to require use of a digit in passwords.
</description>
<ocil clause="dcredit is not found or not set to the required value">
To check how many digits are required in a password, run the following command:
<pre>$ grep pam_cracklib /etc/pam.d/system-auth</pre>
The <tt>dcredit</tt> parameter (as a negative number) will indicate how many digits are required.
The DoD requires at least one digit in a password.
This would appear as <tt>dcredit=-1</tt>.
</ocil>
<rationale>
Requiring digits makes password guessing attacks more difficult by ensuring a larger
search space.
</rationale>
<ident cce="RHEL7-CCE-TBD" />
<oval id="accounts_password_pam_cracklib_dcredit" value="var_password_pam_cracklib_dcredit"/>
<ref nist="IA-5(b),IA-5(c),194" disa="194"/>
<tested by="DS" on="20121024"/>
</Rule>

<Rule id="accounts_password_pam_cracklib_ucredit">
<title>Set Password Strength Minimum Uppercase Characters</title>
<description>The pam_cracklib module's <tt>ucredit=</tt> parameter controls requirements for
usage of uppercase letters in a password. When set to a negative number, any password will be required to
contain that many uppercase characters. When set to a positive number, pam_cracklib will grant +1 additional
length credit for each uppercase character.
Add <tt>ucredit=-1</tt> after pam_cracklib.so to require use of an upper case character in passwords.
</description>
<ocil clause="ucredit is not found or not set to the required value">
To check how many uppercase characters are required in a password, run the following command:
<pre>$ grep pam_cracklib /etc/pam.d/system-auth</pre>
The <tt>ucredit</tt> parameter (as a negative number) will indicate how many uppercase characters are required.
The DoD and FISMA require at least one uppercase character in a password.
This would appear as <tt>ucredit=-1</tt>.
</ocil>
<rationale>
Requiring a minimum number of uppercase characters makes password guessing attacks
more difficult by ensuring a larger search space.
</rationale>
<ident cce="RHEL7-CCE-TBD" />
<oval id="accounts_password_pam_cracklib_ucredit" value="var_password_pam_cracklib_ucredit"/>
<ref nist="IA-5(b),IA-5(c),IA-5(1)(a)" disa="192" />
<tested by="DS" on="20121024"/>
</Rule>

<Rule id="accounts_password_pam_cracklib_ocredit">
<title>Set Password Strength Minimum Special Characters</title>
<description>The pam_cracklib module's <tt>ocredit=</tt> parameter controls requirements for
usage of special (or ``other'') characters in a password. When set to a negative number, any password will be required to
contain that many special characters. When set to a positive number, pam_cracklib will grant +1 additional
length credit for each special character.
Add <tt>ocredit=-1</tt> after pam_cracklib.so to require use of a special character in passwords.
</description>
<ocil clause="ocredit is not found or not set to the required value">
To check how many special characters are required in a password, run the following command:
<pre>$ grep pam_cracklib /etc/pam.d/system-auth</pre>
The <tt>ocredit</tt> parameter (as a negative number) will indicate how many special characters are required.
The DoD and FISMA require at least one special character in a password.
This would appear as <tt>ocredit=-1</tt>.
</ocil>
<rationale>
Requiring a minimum number of special characters makes password guessing attacks
more difficult by ensuring a larger search space.
</rationale>
<ident cce="RHEL7-CCE-TBD" />
<oval id="accounts_password_pam_cracklib_ocredit" value="var_password_pam_cracklib_ocredit"/>
<ref nist="IA-5(b),IA-5(c),IA-5(1)(a)" disa="1619" />
<tested by="DS" on="20121024"/>
</Rule>

<Rule id="accounts_password_pam_cracklib_lcredit">
<title>Set Password Strength Minimum Lowercase Characters</title>
<description>The pam_cracklib module's <tt>lcredit=</tt> parameter controls requirements for
usage of lowercase letters in a password. When set to a negative number, any password will be required to
contain that many lowercase characters. When set to a positive number, pam_cracklib will grant +1 additional
length credit for each lowercase character.
Add <tt>lcredit=-1</tt> after pam_cracklib.so to require use of a lowercase character in passwords.
</description>
<ocil clause="lcredit is not found or not set to the required value">
To check how many lowercase characters are required in a password, run the following command:
<pre>$ grep pam_cracklib /etc/pam.d/system-auth</pre>
The <tt>lcredit</tt> parameter (as a negative number) will indicate how many special characters are required.
The DoD and FISMA require at least one lowercase character in a password.
This would appear as <tt>lcredit=-1</tt>.
</ocil>
<rationale>
Requiring a minimum number of lowercase characters makes password guessing attacks
more difficult by ensuring a larger search space.
</rationale>
<ident cce="RHEL7-CCE-TBD" />
<oval id="accounts_password_pam_cracklib_lcredit" value="var_password_pam_cracklib_lcredit"/>
<ref nist="IA-5(b),IA-5(c),IA-5(1)(a)" disa="193" />
<tested by="DS" on="20121024"/>
</Rule>

<Rule id="accounts_password_pam_cracklib_difok">
<title>Set Password Strength Minimum Different Characters</title>
<description>The pam_cracklib module's <tt>difok</tt> parameter controls requirements for
usage of different characters during a password change.
Add <tt>difok=<i>NUM</i></tt> after pam_cracklib.so to require differing
characters when changing passwords, substituting <i>NUM</i> appropriately.
The DoD requirement is <tt>4</tt>.
</description>
<ocil clause="difok is not found or not set to the required value">
To check how many characters must differ during a password change, run the following command:
<pre>$ grep pam_cracklib /etc/pam.d/system-auth</pre>
The <tt>difok</tt> parameter will indicate how many characters must differ.
The DoD requires four characters differ during a password change.
This would appear as <tt>difok=4</tt>.
</ocil>
<rationale>
Requiring a minimum number of different characters during password changes ensures that
newly changed passwords should not resemble previously compromised ones.
Note that passwords which are changed on compromised systems will still be compromised, however.
</rationale>
<ident cce="RHEL7-CCE-TBD" />
<oval id="accounts_password_pam_cracklib_difok" value="var_password_pam_cracklib_difok"/>
<ref nist="IA-5(b),IA-5(c),IA-5(1)(b)" disa="195"/>
<tested by="DS" on="20121024"/>
</Rule>
</Group>
</Group>

<Group id="locking_out_password_attempts">
<title>Set Lockouts for Failed Password Attempts</title>
<description>The <tt>pam_faillock</tt> PAM module provides the capability to
lock out user accounts after a number of failed login attempts. Its
documentation is available in
<tt>/usr/share/doc/pam-VERSION/txts/README.pam_faillock</tt>.
<br /><br />
</description>
<warning category="general">Locking out user accounts presents the
risk of a denial-of-service attack. The lockout policy
must weigh whether the risk of such a
denial-of-service attack outweighs the benefits of thwarting
password guessing attacks.</warning>

<!-- This should probably be two rules:
one to use pam_faillock,
and a second to use unlock_time and set it to a Value
-->

<Rule id="accounts_passwords_pam_faillock_deny" severity="medium">
<title>Set Deny For Failed Password Attempts</title>
<description>
To configure the system to lock out accounts after a number of incorrect login
attempts using <tt>pam_faillock.so</tt>:
<br /><br />
Add the following lines immediately below the <tt>pam_unix.so</tt> statement in <tt>AUTH</tt> section of
both <tt>/etc/pam.d/system-auth</tt> and /etc/pam.d/password-auth:
<pre>auth [default=die] pam_faillock.so authfail deny=3 unlock_time=604800 fail_interval=900</pre>
<pre>auth required pam_faillock.so authsucc deny=3 unlock_time=604800 fail_interval=900</pre>
</description>
<ocil clause="that is not the case">
To ensure the failed password attempt policy is configured correctly, run the following command:
<pre># grep pam_faillock /etc/pam.d/system-auth</pre>
The output should show <tt>deny=3</tt>.
</ocil>
<rationale>
Locking out user accounts after a number of incorrect attempts
prevents direct password guessing attacks.
</rationale>
<ident cce="RHEL7-CCE-TBD" />
<oval id="accounts_passwords_pam_faillock_deny" value="var_accounts_passwords_pam_faillock_deny"/>
<ref nist="AC-7(a)" disa="44" />
</Rule>

<Rule id="deny_password_attempts_unlock_time" severity="medium">
<title>Set Lockout Time For Failed Password Attempts</title>
<description>
To configure the system to lock out accounts after a number of incorrect login
attempts and require an administrator to unlock the account using <tt>pam_faillock.so</tt>:
<br /><br />
Add the following lines immediately below the <tt>pam_env.so</tt> statement in <tt>/etc/pam.d/system-auth</tt>:
<pre>auth [default=die] pam_faillock.so authfail deny=3 unlock_time=604800 fail_interval=900</pre>
<pre>auth required pam_faillock.so authsucc deny=3 unlock_time=604800 fail_interval=900</pre>
</description>
<ocil clause="that is not the case">
To ensure the failed password attempt policy is configured correctly, run the following command:
<pre># grep pam_faillock /etc/pam.d/system-auth</pre>
The output should show <tt>unlock_time=&lt;some-large-number&gt;</tt>.
</ocil>
<rationale>
Locking out user accounts after a number of incorrect attempts
prevents direct password guessing attacks.  Ensuring that an administrator is
involved in unlocking locked accounts draws appropriate attention to such
situations.
</rationale>
<ident cce="RHEL7-CCE-TBD" />
<oval id="accounts_passwords_pam_faillock_unlock_time" value="var_accounts_passwords_pam_faillock_unlock_time"/>
<ref nist="AC-7(b)" disa="47" />
</Rule>

<Rule id="accounts_passwords_pam_fail_interval" severity="medium">
<title>Set Interval For Counting Failed Password Attempts</title>
<description>
Utilizing <tt>pam_faillock.so</tt>, the <tt>fail_interval</tt> directive configures the system to lock out accounts after a number of incorrect login
attempts.
<br /><br />
Add the following <tt>fail_interval</tt> directives to <tt>pam_faillock.so</tt> immediately below the <tt>pam_env.so</tt> statement in
<tt>/etc/pam.d/system-auth</tt> and <tt>/etc/pam.d/password-auth</tt>:
<pre>auth [default=die] pam_faillock.so authfail deny=3 unlock_time=604800 fail_interval=900</pre>
<pre>auth required pam_faillock.so authsucc deny=3 unlock_time=604800 fail_interval=900</pre>
</description>
<ocil clause="that is not the case">
To ensure the failed password attempt policy is configured correctly, run the following command:
<pre># grep pam_faillock /etc/pam.d/system-auth</pre>
The output should show <tt>fail_interval=&lt;interval-in-seconds&gt;</tt> where <tt>interval-in-seconds</tt> is 900 (15 minutes) or greater.  If the <tt>fail_interval</tt> parameter is not set, the default setting of 900 seconds is acceptable.
</ocil>
<rationale>
Locking out user accounts after a number of incorrect attempts within a
specific period of time prevents direct password guessing attacks.
</rationale>
<ident cce="RHEL7-CCE-TBD" />
<oval id="accounts_passwords_pam_fail_interval" value="var_accounts_passwords_pam_faillock_fail_interval"/>
<ref nist="AC-7(a)" disa="1452" />
</Rule>

<Rule id="accounts_password_reuse_limit" severity="medium">
<title>Limit Password Reuse</title>
<description>Do not allow users to reuse recent passwords. This can
be accomplished by using the <tt>remember</tt> option for the <tt>pam_unix</tt> PAM
module.  In the file <tt>/etc/pam.d/system-auth</tt>, append <tt>remember=24</tt> to the 
line which refers to the <tt>pam_unix.so</tt> module, as shown:
<pre>password sufficient pam_unix.so <i>existing_options</i> remember=24</pre>
The DoD and FISMA requirement is 24 passwords.</description>
<ocil clause="it does not">
To verify the password reuse setting is compliant, run the following command:
<pre>$ grep remember /etc/pam.d/system-auth</pre>
The output should show the following at the end of the line:
<pre>remember=24</pre>
</ocil>
<rationale>
Preventing re-use of previous passwords helps ensure that a compromised password is not re-used by a user.
</rationale>
<ident cce="RHEL7-CCE-TBD" />
<oval id="accounts_password_reuse_limit" value="var_password_history_retain_limit" />
<ref nist="IA-5(f),IA-5(1)(e)" disa="200" />
<tested by="DS" on="20121024"/>
</Rule>
</Group>

<Group id="set_password_hashing_algorithm">
<title>Set Password Hashing Algorithm</title>
<description>The system's default algorithm for storing password hashes in
<tt>/etc/shadow</tt> is SHA-512. This can be configured in several
locations.</description>

<Rule id="set_password_hashing_algorithm_systemauth" severity="medium">
<title>Set Password Hashing Algorithm in /etc/pam.d/system-auth</title>
<description>
In <tt>/etc/pam.d/system-auth</tt>, the <tt>password</tt> section of
the file controls which PAM modules execute during a password change.
Set the <tt>pam_unix.so</tt> module in the
<tt>password</tt> section to include the argument <tt>sha512</tt>, as shown below:
<pre>password    sufficient    pam_unix.so sha512 <i>other arguments...</i></pre>
This will help ensure when local users change their passwords, hashes for the new
passwords will be generated using the SHA-512 algorithm.
This is the default.
</description>
<ocil clause="it does not">
Inspect the <tt>password</tt> section of <tt>/etc/pam.d/system-auth</tt>  and
ensure that the <tt>pam_unix.so</tt> module includes the argument
<tt>sha512</tt>:
<pre>$ grep sha512 /etc/pam.d/system-auth</pre>
</ocil>
<rationale>
Using a stronger hashing algorithm makes password cracking attacks more difficult.
</rationale>
<ident cce="RHEL7-CCE-TBD" />
<!-- <oval id="accounts_password_hashing_algorithm" /> -->
<ref nist="IA-5(b),IA-5(c),IA-5(1)(c),IA-7" disa="803"/>
<tested by="DS" on="20121024"/>
<oval id="set_password_hashing_algorithm_systemauth" />
</Rule>

<Rule id="set_password_hashing_algorithm_logindefs" severity="medium">
<title>Set Password Hashing Algorithm in /etc/login.defs</title>
<description>
In <tt>/etc/login.defs</tt>, add or correct the following line to ensure
the system will use SHA-512 as the hashing algorithm:
<pre>ENCRYPT_METHOD SHA512</pre>
</description>
<ocil clause="it does not">
Inspect <tt>/etc/login.defs</tt> and ensure the following line appears:
<pre>ENCRYPT_METHOD SHA512</pre>
</ocil>
<rationale>
Using a stronger hashing algorithm makes password cracking attacks more difficult.
</rationale>
<!-- <oval id="accounts_password_hashing_algorithm" /> -->
<ident cce="RHEL7-CCE-TBD" />
<ref nist="IA-5(b),IA-5(c),IA-5(1)(c),IA-7" disa="803"/>
<tested by="DS" on="20121024"/>
<oval id="set_password_hashing_algorithm_logindefs" />
</Rule>

<Rule id="set_password_hashing_algorithm_libuserconf" severity="medium">
<title>Set Password Hashing Algorithm in /etc/libuser.conf</title>
<description>
In <tt>/etc/libuser.conf</tt>, add or correct the following line in its
<tt>[defaults]</tt> section to ensure the system will use the SHA-512
algorithm for password hashing:
<pre>crypt_style = sha512</pre>
</description>
<ocil clause="it does not">
Inspect <tt>/etc/libuser.conf</tt> and ensure the following line appears
in the <tt>[default]</tt> section:
<pre>crypt_style = sha512</pre>
</ocil>
<rationale>
Using a stronger hashing algorithm makes password cracking attacks more difficult.
</rationale>
<!-- <oval id="accounts_password_hashing_algorithm" /> -->
<ident cce="RHEL7-CCE-TBD" />
<ref nist="IA-5(b),IA-5(c),IA-5(1)(c),IA-7" disa="803"/>
<tested by="DS" on="20121026"/>
<oval id="set_password_hashing_algorithm_libuserconf" />
</Rule>
</Group>

</Group>
