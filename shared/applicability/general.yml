cpes:
  - audit:
      name: "cpe:/a:audit"
      title: "Package audit is installed"
      check_id: installed_env_has_audit_package
      bash_conditional: {{{ bash_pkg_conditional("audit") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("audit") }}}

  - chrony:
      name: "cpe:/a:chrony"
      title: "Package chrony is installed"
      check_id: installed_env_has_chrony_package
      bash_conditional: {{{ bash_pkg_conditional("chrony") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("chrony") }}}

  - gdm:
      name: "cpe:/a:gdm"
      title: "Package gdm is installed"
      check_id: installed_env_has_gdm_package
      bash_conditional: {{{ bash_pkg_conditional("gdm") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("gdm") }}}

  - krb5_server_older_than_1_17-18:
      name: "cpe:/a:krb5_server_older_than_1_17-18"
      title: "Package krb5 server is installed and version is lesser than 1.17-18"
      check_id: krb5_server_older_than_1_17_18

  - krb5_workstation_older_than_1_17-18:
      name: "cpe:/a:krb5_workstation_older_than_1_17-18"
      title: "Package krb5 workstation is installed and version is lesser than 1.17-18"
      check_id: krb5_workstation_older_than_1_17_18

  - libuser:
      name: "cpe:/a:libuser"
      title: "Package libuser is installed"
      check_id: installed_env_has_libuser_package
      bash_conditional: {{{ bash_pkg_conditional("libuser") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("libuser") }}}

  - login_defs:
      name: "cpe:/a:login_defs"
      title: "Package providing /etc/login.defs is installed"
      check_id: installed_env_has_login_defs
      bash_conditional: {{{ bash_pkg_conditional("login_defs") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("login_defs") }}}

  - net-snmp:
      name: "cpe:/a:net-snmp"
      title: "Package net-snmp is installed"
      check_id: installed_env_has_net-snmp_package
      bash_conditional: {{{ bash_pkg_conditional("net-snmp") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("net-snmp") }}}

  - nss-pam-ldapd:
      name: "cpe:/a:nss-pam-ldapd"
      title: "Package nss-pam-ldapd is installed"
      check_id: installed_env_has_nss-pam-ldapd_package
      bash_conditional: {{{ bash_pkg_conditional("nss-pam-ldapd") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("nss-pam-ldapd") }}}

  - ntp:
      name: "cpe:/a:ntp"
      title: "Package ntp is installed"
      check_id: installed_env_has_ntp_package
      bash_conditional: {{{ bash_pkg_conditional("ntp") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("ntp") }}}

  - ocp4-master-node:
      name: "cpe:/a:ocp4-master-node"
      title: "Node is an OpenShift 4 master node"
      check_id: node_is_ocp4_master_node

  - pam:
      name: "cpe:/a:pam"
      title: "Package pam is installed"
      check_id: installed_env_has_pam_package
      bash_conditional: {{{ bash_pkg_conditional("pam") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("pam") }}}

  - partition-var-tmp:
      name: "cpe:/a:partition-var-tmp"
      title: "There is a /var/tmp partition"
      check_id: installed_env_mounts_var_tmp
      bash_conditional: {{{ bash_partition_conditional("/var/tmp") }}}
      ansible_conditional: {{{ ansible_partition_conditional("/var/tmp") }}}

  - partition-tmp:
      name: "cpe:/a:partition-tmp"
      title: "There is a /tmp partition"
      check_id: installed_env_mounts_tmp
      bash_conditional: {{{ bash_partition_conditional("/tmp") }}}
      ansible_conditional: {{{ ansible_partition_conditional("/tmp") }}}

  - polkit:
      name: "cpe:/a:polkit"
      title: "Package polkit is installed"
      check_id: installed_env_has_polkit_package

  - postfix:
      name: "cpe:/a:postfix"
      title: "Package postfix is installed"
      check_id: installed_env_has_postfix_package
      bash_conditional: {{{ bash_pkg_conditional("postfix") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("postfix") }}}

  - sssd:
      name: "cpe:/a:sssd"
      title: "Package sssd-common is installed"
      check_id: installed_env_has_sssd-common_package
      bash_conditional: {{{ bash_pkg_conditional("sssd") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("sssd") }}}

  - sssd-ldap:
      name: "cpe:/a:sssd-ldap"
      title: "SSSD is configured to use LDAP"
      check_id: sssd_conf_uses_ldap

  - sudo:
      name: "cpe:/a:sudo"
      title: "Package sudo is installed"
      check_id: installed_env_has_sudo_package
      bash_conditional: {{{ bash_pkg_conditional("sudo") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("sudo") }}}

  - systemd:
      name: "cpe:/a:systemd"
      title: "Package systemd is installed"
      check_id: installed_env_has_systemd_package
      bash_conditional: {{{ bash_pkg_conditional("systemd") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("systemd") }}}

  - tftp-server:
      name: "cpe:/a:tftp-server"
      title: "Package tftp-server is installed"
      check_id: installed_env_has_tftp_server_package
      bash_conditional: {{{ bash_pkg_conditional("tftp-server") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("tftp-server") }}}

  - tmux:
      name: "cpe:/a:tmux"
      title: "Package tmux is installed"
      check_id: installed_env_has_tmux_package
      bash_conditional: {{{ bash_pkg_conditional("tmux") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("tmux") }}}
      
  - usbguard:
      name: "cpe:/a:usbguard"
      title: "Package usbguard is installed"
      check_id: installed_env_has_usbguard_package
      bash_conditional: {{{ bash_pkg_conditional("usbguard") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("usbguard") }}}

  - yum:
      name: "cpe:/a:yum"
      title: "Package yum is installed"
      check_id: installed_env_has_yum_package
      bash_conditional: {{{ bash_pkg_conditional("yum") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("yum") }}}

  - zypper:
      name: "cpe:/a:zypper"
      title: "Package zypper is installed"
      check_id: installed_env_has_zypper_package
      bash_conditional: {{{ bash_pkg_conditional("zypper") }}}
      ansible_conditional: {{{ ansible_pkg_conditional("zypper") }}}
