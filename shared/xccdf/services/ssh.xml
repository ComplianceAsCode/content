<Group id="ssh">
<title>SSH Server</title>
<description>The SSH protocol is recommended for remote login and
remote file transfer. SSH provides confidentiality and integrity
for data exchanged between two systems, as well as server
authentication, through the use of public key cryptography. The
implementation included with the system is called OpenSSH, and more
detailed documentation is available from its website,
<weblink-macro link="http://www.openssh.org" />. Its server program 
is called <tt>sshd</tt> and provided by the RPM package
<tt>openssh-server</tt>.</description>
<platform idref="cpe:/a:machine" />

<Value id="sshd_idle_timeout_value" interactive="0" operator="equals" type="number">
<title>SSH session Idle time</title>
<description>Specify duration of allowed idle time.</description>
<value selector="">300</value>
<value selector="5_minutes">300</value>
<value selector="10_minutes">600</value>
<value selector="15_minutes">900</value>
<value selector="30_minutes">1800</value>
<value selector="60_minutes">3600</value>
<value selector="120_minutes">7200</value>
</Value>

<Value id="sshd_max_auth_tries_value" interactive="0" operator="equals" type="number">
<title>SSH Max authentication attempts</title>
<description>Specify the maximum number of authentication attempts per connection.</description>
<value selector="">4</value>
<value selector="3">3</value>
<value selector="4">4</value>
<value selector="5">5</value>
<value selector="10">10</value>
</Value>

<Value id="sshd_listening_port" interactive="0" operator="equals" type="number">
<title>SSH Server Listening Port</title>
<description>Specify port the SSH server is listening.</description>
<value selector="">22</value>
<value selector="default">22</value>
</Value>

<Value id="firewalld_sshd_zone" interactive="0" operator="equals" type="string">
<title>SSH enabled firewalld zone</title>
<description>Specify firewalld zone to enable SSH service. This value is used only for remediation purposes.</description>
<value selector="">public</value>
<value selector="block">block</value>
<value selector="dmz">dmz</value>
<value selector="drop">drop</value>
<value selector="external">external</value>
<value selector="home">home</value>
<value selector="internal">internal</value>
<value selector="public">public</value>
<value selector="trusted">trusted</value>
<value selector="work">work</value>
</Value>

<Value id="sshd_approved_macs" interactive="0" operator="equals" type="string">
<title>SSH Approved MACs by FIPS</title>
<description>Specify the FIPS approved MACs (message authentication code) algorithms
	that are used for data integrity protection by the SSH server.</description>
<value selector="default">hmac-sha2-512,hmac-sha2-256,hmac-sha1,hmac-sha1-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com</value>
</Value>

<Value id="sshd_required" interactive="0" operator="equals" type="number">
<title>SSH is required to be installed</title>
<description>Specify if the Policy requires SSH to be installed. Used by SSH Rules
to determine if SSH should be uninstalled or configured.<br />
A value of 0 means that the policy doesn't care if OpenSSH server is installed or not. If it is installed, scanner will check for it's configuration, if it's not installed, the check will pass.<br />
A value of 1 indicates that OpenSSH server package is not required by the policy;<br />
A value of 2 indicates that OpenSSH server package is required by the policy.<br /></description>
<value selector="">0</value>
<value selector="no">1</value>
<value selector="yes">2</value>
</Value>

<Rule id="package_openssh-server_installed" prodtype="rhel7" severity="medium">
<title>Install the OpenSSH Server Package</title>
<description>
The <tt>openssh-server</tt> package should be installed.
<yum-macro install="true" package="openssh-server" />
</description>
<ocil clause="the package is not installed">
<package-check-macro package="openssh-server" />
</ocil>
<rationale>
Without protection of the transmitted information, confidentiality, and
integrity may be compromised because unprotected communications can be
intercepted and either read or altered.
</rationale>
<ident cce="80215-7" prodtype="rhel7" />
<oval id="package_openssh-server_installed" />
<ref prodtype="rhel7" stigid="040300" />
<ref disa="2418,2420,2421,2422" nist="SC-8" srg="SRG-OS-000423-GPOS-00187,SRG-OS-000423-GPOS-00188,SRG-OS-000423-GPOS-00189,SRG-OS000423-GPOS-00190" />
</Rule>

<Rule id="service_sshd_enabled" prodtype="rhel7" severity="medium">
<title>Enable the OpenSSH Service</title>
<description>The SSH server service, sshd, is commonly needed.
<systemd-service-macro enable="true" service="sshd" />
</description>
<ocil>
<systemd-check-macro enable="true" service="sshd" />
</ocil>
<rationale>
Without protection of the transmitted information, confidentiality, and
integrity may be compromised because unprotected communications can be
intercepted and either read or altered.
<br /><br />
This checklist item applies to both internal and external networks and all types
of information system components from which information can be transmitted (e.g., servers,
mobile devices, notebook computers, printers, copiers, scanners, etc). Communication paths
outside the physical protection of a controlled boundary are exposed to the possibility
of interception and modification.
</rationale>
<ident cce="80216-5" prodtype="rhel7" />
<ref prodtype="rhel7" stigid="040310" />
<ref cui="3.1.13,3.5.4,3.13.8" disa="2418,2420,2421,2422" nist="SC-8" srg="SRG-OS-000423-GPOS-00187,SRG-OS-000423-GPOS-00188,SRG-OS-000423-GPOS-00189,SRG-OS000423-GPOS-00190" />
<oval id="service_sshd_enabled" />
</Rule>

<Rule id="service_sshd_disabled" prodtype="rhel7">
<title>Disable SSH Server If Possible (Unusual)</title>
<description>The SSH server service, sshd, is commonly needed.
However, if it can be disabled, do so.
<systemd-service-macro enable="false" service="sshd" />
This is unusual, as SSH is a common method for encrypted and authenticated
remote access.
</description>
<ident cce="80217-3" prodtype="rhel7" />
<oval id="service_sshd_disabled" />
</Rule>

<Rule id="file_permissions_sshd_pub_key" severity="medium">
<title>Verify Permissions on SSH Server Public <tt>*.pub</tt> Key Files</title>
<description><fileperms-desc-macro file="/etc/ssh/*.pub" perms="0644" /></description>
<ocil><fileperms-check-macro file="/etc/ssh/*.pub" perms="-rw-r--r--" /></ocil>
<rationale>
If a public host key file is modified by an unauthorized user, the SSH service
may be compromised.
</rationale>
<ident cce="27311-0" prodtype="rhel7" />
<ref prodtype="rhel7" stigid="040410" />
<ref cui="3.1.13,3.13.10" disa="366" nist="AC-6" srg="SRG-OS-000480-GPOS-00227" />
<oval id="file_permissions_sshd_pub_key" />
</Rule>

<Rule id="file_permissions_sshd_private_key" severity="medium">
<title>Verify Permissions on SSH Server Private <tt>*_key</tt> Key Files</title>
<description><fileperms-desc-macro file="/etc/ssh/*_key" perms="0640" /></description>
<ocil><fileperms-check-macro file="/etc/ssh/*_key" perms="-rw-r-----" /></ocil>
<rationale>
If an unauthorized user obtains the private SSH host key file, the host could be
impersonated.
</rationale>
<ident cce="27485-2" prodtype="rhel7" />
<ref prodtype="rhel7" stigid="040420" />
<ref cui="3.1.13,3.13.10" disa="366" nist="AC-6" srg="SRG-OS-000480-GPOS-00227" />
<oval id="file_permissions_sshd_private_key" />
</Rule>

<Rule id="firewalld_sshd_disabled" prodtype="rhel7">
<title>Remove SSH Server <tt>firewalld</tt> Firewall exception (Unusual)</title>
<description>By default, inbound connections to SSH's port are allowed. If
the SSH server is not being used, this exception should be removed from the
firewall configuration.
<br /><br />
<firewalld-desc-macro allow="false" proto="tcp" service="ssh" />
</description>
<rationale>
If inbound SSH connections are not expected, disallowing access to the SSH port will
avoid possible exploitation of the port by an attacker.
</rationale>
<ident cce="80218-1" prodtype="rhel7" />
<ref cui="3.1.12" />
<oval id="firewalld_sshd_disabled" />
</Rule>

<Group id="ssh_server">
<title>Configure OpenSSH Server if Necessary</title>
<description>If the system needs to act as an SSH server, then
certain changes should be made to the OpenSSH daemon configuration
file <tt>/etc/ssh/sshd_config</tt>. The following recommendations can be
applied to this file. See the <tt>sshd_config(5)</tt> man page for more
detailed information.</description>

<Rule id="firewalld_sshd_port_enabled" prodtype="rhel7">
<title>Enable SSH Server <tt>firewalld</tt> Firewall exception</title>
<description>By default, inbound connections to SSH's port are allowed. If
the SSH server is being used but denied by the firewall, this exception should
be added to the firewall configuration.
<br /><br />
<firewalld-desc-macro allow="true" proto="tcp" service="ssh" />
</description>
<ocil description="the SSH port is blocked, and the exception is missing">
<firewalld-check-macro allow="true" port="22" proto="tcp" service="ssh" />
</ocil>
<rationale>
If inbound SSH connections are expected, adding a firewall rule exception
will allow remote access through the SSH port.
</rationale>
<ident cce="80361-9" prodtype="rhel7" />
<ref cui="3.1.12" />
<oval id="firewalld_sshd_port_enabled" value="sshd_listening_port" />
</Rule>

<Rule id="sshd_allow_only_protocol2" severity="high">
<title>Allow Only SSH Protocol 2</title>
<description>Only SSH protocol version 2 connections should be
permitted. The default setting in
<tt>/etc/ssh/sshd_config</tt> is correct, and can be
verified by ensuring that the following
line appears:
<pre>Protocol 2</pre>
</description>
<ocil clause="it is commented out or is not set correctly to Protocol 2">
To check which SSH protocol version is allowed, check version of <tt>openssh-server</tt> with following command:
<pre>$ rpm -qi openssh-server | grep Version</pre>
Versions equal to or higher than 7.4 only allow Protocol 2.
If version is lower than 7.4, run the following command to check configuration:
<pre>$ sudo grep Protocol /etc/ssh/sshd_config</pre>
If configured properly, output should be <pre>Protocol 2</pre>
</ocil>
<rationale>
SSH protocol version 1 is an insecure implementation of the SSH protocol and
has many well-known vulnerability exploits. Exploits of the SSH daemon could provide
immediate root access to the system.
</rationale>
<warning category="general">As of <tt>openssh-server</tt> version <tt>7.4</tt> and above, the only protocol supported is version 2, and line <pre>Protocol 2</pre> in <tt>/etc/ssh/sshd_config</tt> is not necessary.</warning>
<ident cce="27320-1" prodtype="rhel7" />
<oval id="sshd_allow_only_protocol2" value="sshd_required" />
<ref prodtype="rhel7" stigid="040390" />
<ref cis="5.2.2" cjis="5.5.6" cui="3.1.13,3.5.4" disa="197,366" hipaa="164.308(a)(4)(i),164.308(b)(1),164.308(b)(3),164.310(b),164.312(e)(1),164.312(e)(2)(ii)" nist="AC-17(8).1(ii),IA-5(1)(c)" srg="SRG-OS-000074-GPOS-00042,SRG-OS-000480-GPOS-00227" />
</Rule>

<Rule id="sshd_limit_user_access">
<title>Limit Users' SSH Access</title>
<description>By default, the SSH configuration allows any user with an account
to access the system. In order to specify the users that are allowed to login
via SSH and deny all other users, add or correct the following line in the
<tt>/etc/ssh/sshd_config</tt> file:
<pre>DenyUsers USER1 USER2</pre>
Where <tt>USER1</tt> and <tt>USER2</tt> are valid user names.
</description>
<rationale>
Specifying which accounts are allowed SSH access into the system reduces the
possibility of unauthorized access to the system.
</rationale>
<ident cce="80219-9" prodtype="rhel7" />

<ref cui="3.1.12" nist="AC-3" />
</Rule>

<Rule id="sshd_disable_gssapi_auth" severity="medium">
<title>Disable GSSAPI Authentication</title>
<description>Unless needed, SSH should not permit extraneous or unnecessary
authentication mechanisms like GSSAPI. To disable GSSAPI authentication, add or
correct the following line in the <tt>/etc/ssh/sshd_config</tt> file:
<pre>GSSAPIAuthentication no</pre>
</description>
<ocil clause="it is commented out or is not disabled">
To check if GSSAPIAuthentication is disabled or set correctly, run the following
command:
<pre>$ sudo grep GSSAPIAuthentication /etc/ssh/sshd_config</pre>
If configured properly, output should be <pre>no</pre>
</ocil>
<rationale>
GSSAPI authentication is used to provide additional authentication mechanisms to
applications. Allowing GSSAPI authentication through SSH exposes the system's
GSSAPI to remote hosts, increasing the attack surface of the system.
</rationale>
<ident cce="80220-7" prodtype="rhel7" />
<oval id="sshd_disable_gssapi_auth" value="sshd_required" />
<ref prodtype="rhel7" stigid="040430" ospp="FIA_AFL.1" />
<ref cui="3.1.12" disa="368,318,1812,1813,1814" 
hipaa="164.308(a)(4)(i),164.308(b)(1),164.308(b)(3),164.310(b),164.312(e)(1),164.312(e)(2)(ii)"
nist="CM-6(c)" srg="SRG-OS-000364-GPOS-00151" />
</Rule>

<Rule id="sshd_disable_kerb_auth" severity="medium">
<title>Disable Kerberos Authentication</title>
<description>Unless needed, SSH should not permit extraneous or unnecessary
authentication mechanisms like Kerberos. To disable Kerberos authentication, add
or correct the following line in the <tt>/etc/ssh/sshd_config</tt> file:
<pre>KerberosAuthentication no</pre>
</description>
<ocil clause="it is commented out or is not disabled">
To check if KerberosAuthentication is disabled or set correctly, run the
following command:
<pre>$ sudo grep KerberosAuthentication /etc/ssh/sshd_config</pre>
If configured properly, output should be <pre>no</pre>
</ocil>
<rationale>
Kerberos authentication for SSH is often implemented using GSSAPI. If Kerberos
is enabled through SSH, the SSH daemon provides a means of access to the
system's Kerberos implementation. Vulnerabilities in the system's Kerberos
implementations may be subject to exploitation.
</rationale>
<ident cce="80221-5" prodtype="rhel7" />
<oval id="sshd_disable_kerb_auth" value="sshd_required" />
<ref prodtype="rhel7" stigid="040440" ospp="FIA_AFL.1" />
<ref cui="3.1.12" disa="368,318,1812,1813,1814" hipaa="164.308(a)(4)(i),164.308(b)(1),164.308(b)(3),164.310(b),164.312(e)(1),164.312(e)(2)(ii)" nist="CM-6(c)" srg="SRG-OS-000364-GPOS-00151" />
</Rule>

<Rule id="sshd_enable_strictmodes" severity="medium">
<title>Enable Use of Strict Mode Checking</title>
<description>SSHs StrictModes option checks file and ownership permissions in
the user's home directory <tt>.ssh</tt> folder before accepting login. If world-
writable permissions are found, logon is rejected. To enable StrictModes in SSH,
add or correct the following line in the <tt>/etc/ssh/sshd_config</tt> file:
<pre>StrictModes yes</pre>
</description>
<ocil clause="it is commented out or is not enabled">
To check if StrictModes is enabled or set correctly, run the
following command:
<pre>$ sudo grep StrictModes /etc/ssh/sshd_config</pre>
If configured properly, output should be <pre>yes</pre>
</ocil>
<rationale>
If other users have access to modify user-specific SSH configuration files, they
may be able to log into the system as another user.
</rationale>
<ident cce="80222-3" prodtype="rhel7" />
<oval id="sshd_enable_strictmodes" value="sshd_required" />
<ref prodtype="rhel7" stigid="040450" />
<ref cui="3.1.12" disa="366" hipaa="164.308(a)(4)(i),164.308(b)(1),164.308(b)(3),164.310(b),164.312(e)(1),164.312(e)(2)(ii)" nist="AC-6" srg="SRG-OS-000480-GPOS-00227" />
</Rule>

<Rule id="sshd_use_priv_separation" severity="medium">
<title>Enable Use of Privilege Separation</title>
<description>When enabled, SSH will create an unprivileged child process that
has the privilege of the authenticated user. To enable privilege separation in
SSH, add or correct the following line in the <tt>/etc/ssh/sshd_config</tt> file:
<pre>UsePrivilegeSeparation sandbox</pre>
</description>
<ocil clause="it is commented out or is not enabled">
To check if UsePrivilegeSeparation is enabled or set correctly, run the
following command:
<pre>$ sudo grep UsePrivilegeSeparation /etc/ssh/sshd_config</pre>
If configured properly, output should be <pre>sandbox</pre>
</ocil>
<rationale>
SSH daemon privilege separation causes the SSH process to drop root privileges
when not needed which would decrease the impact of software vulnerabilities in
the unprivileged section.
</rationale>
<ident cce="80223-1" prodtype="rhel7" />
<oval id="sshd_use_priv_separation" value="sshd_required" />
<ref prodtype="rhel7" stigid="040460" />
<ref cui="3.1.12" disa="366" hipaa="164.308(a)(4)(i),164.308(b)(1),164.308(b)(3),164.310(b),164.312(e)(1),164.312(e)(2)(ii)" nist="AC-6" srg="SRG-OS-000480-GPOS-00227" />
</Rule>

<Rule id="sshd_disable_compression" severity="medium">
<title>Disable Compression Or Set Compression to <tt>delayed</tt></title>
<description>Compression is useful for slow network connections over long
distances but can cause performance issues on local LANs. If use of compression
is required, it should be enabled only after a user has authenticated; otherwise
, it should be disabled. To disable compression or delay compression until after
a user has successfully authenticated, add or correct the following line in the
<tt>/etc/ssh/sshd_config</tt> file:
<pre>Compression no</pre> or <pre>Compression delayed</pre>
</description>
<ocil clause="it is commented out, or is not set to no or delayed">
To check if compression is enabled or set correctly, run the
following command:
<pre>$ sudo grep Compression /etc/ssh/sshd_config</pre>
If configured properly, output should be <pre>no</pre> or <pre>delayed</pre>.
</ocil>
<rationale>
If compression is allowed in an SSH connection prior to authentication,
vulnerabilities in the compression software could result in compromise of the
system from an unauthenticated connection, potentially wih root privileges.
</rationale>
<ident cce="80224-9" prodtype="rhel7" />
<oval id="sshd_disable_compression" value="sshd_required" />
<ref prodtype="rhel7" stigid="040470" />
<ref cui="3.1.12" disa="366" hipaa="164.308(a)(4)(i),164.308(b)(1),164.308(b)(3),164.310(b),164.312(e)(1),164.312(e)(2)(ii)" nist="CM-6(b)" srg="SRG-OS-000480-GPOS-00227" />
</Rule>

<Rule id="sshd_print_last_log" severity="low">
<title>Print Last Log</title>
<description>When enabled, SSH will display the date and time of the last
successful account logon. To enable LastLog in
SSH, add or correct the following line in the <tt>/etc/ssh/sshd_config</tt> file:
<pre>PrintLastLog yes</pre>
</description>
<ocil clause="it is commented out or is not enabled">
To check if PrintLastLog is enabled or set correctly, run the
following command:
<pre>$ sudo grep PrintLastLog /etc/ssh/sshd_config</pre>
If configured properly, output should be <pre>yes</pre>
</ocil>
<rationale>
Providing users feedback on when account accesses last occurred facilitates user
recognition and reporting of unauthorized account use.
</rationale>
<ident cce="80225-6" prodtype="rhel7" />
<oval id="sshd_print_last_log" value="sshd_required" />
<ref prodtype="rhel7" stigid="040360" />
<ref disa="366" nist="AC-9" srg="SRG-OS-000480-GPOS-00227" />
</Rule>

<Rule id="sshd_set_loglevel_info" severity="low">
<title>Set LogLevel to INFO</title>
<description>The INFO parameter specifices that record login and logout activity will be logged.
To specify the log level in
SSH, add or correct the following line in the <tt>/etc/ssh/sshd_config</tt> file:
<pre>LogLevel INFO</pre>
</description>
<ocil clause="it is commented out or is not enabled">
To check if LogLevel is enabled or set correctly, run the
following command:
<pre>$ sudo grep "^LogLevel" /etc/ssh/sshd_config</pre>
If configured properly, output should be <pre>LogLevel INFO</pre>
</ocil>
<rationale>
SSH provides several logging levels with varying amounts of verbosity. <tt>DEBUG</tt> is specifically
not recommended other than strictly for debugging SSH communications since it provides
so much data that it is difficult to identify important security information. <tt>INFO</tt> level is the
basic level that only records login activity of SSH users. In many situations, such as Incident
Response, it is important to determine when a particular user was active on a system. The
logout record can eliminate those users who disconnected, which helps narrow the field.
</rationale>
<oval id="sshd_set_loglevel_info" />
<ref cis="5.2.3" prodtype="rhel7" />
<ref cis="9.3.2" prodtype="debian8" />
</Rule>







<Rule id="sshd_set_idle_timeout">
<title>Set SSH Idle Timeout Interval</title>
<description>SSH allows administrators to set an idle timeout
interval.
After this interval has passed, the idle user will be
automatically logged out.
<br /><br />
To set an idle timeout interval, edit the following line in <tt>/etc/ssh/sshd_config</tt> as
follows:
<pre>ClientAliveInterval <b>interval</b></pre>
The timeout <b>interval</b> is given in seconds. To have a timeout
of 10 minutes, set <b>interval</b> to 600.
<br /><br />
If a shorter timeout has already been set for the login shell, that value will 
preempt any SSH setting made here. Keep in mind that some processes may stop SSH
from correctly detecting that the user is idle.
</description>
<ocil clause="it is commented out or not configured properly">
Run the following command to see what the timeout interval is:
<pre>$ sudo grep ClientAliveInterval /etc/ssh/sshd_config</pre>
If properly configured, the output should be:
<pre>ClientAliveInterval 600</pre>
</ocil>
<rationale>
Terminating an idle ssh session within a short time period reduces the window of
opportunity for unauthorized personnel to take control of a management session
enabled on the console or console port that has been let unattended.
</rationale>
<ident cce="27433-2" prodtype="rhel7" />
<oval id="sshd_set_idle_timeout" value="sshd_idle_timeout_value" value2="sshd_required" />
<ref prodtype="rhel7" stigid="040320" />
<ref cis="5.2.12" cjis="5.5.6" cui="3.1.11" disa="1133,2361" nist="AC-2(5),SA-8(i),AC-12" pcidss="Req-8.1.8" srg="SRG-OS-000163-GPOS-00072,SRG-OS-000279-GPOS-00109" />
</Rule>

<Rule id="sshd_set_keepalive" severity="medium">
<title>Set SSH Client Alive Count</title>
<description>To ensure the SSH idle timeout occurs precisely when the <tt>ClientAliveCountMax</tt> is set,
edit <tt>/etc/ssh/sshd_config</tt> as follows:
<pre>ClientAliveCountMax 0</pre>
</description>
<ocil clause="it is commented out or not configured properly">
To ensure the SSH idle timeout will occur when the <tt>ClientAliveCountMax</tt> is set, run the following command:
<pre>$ sudo grep ClientAliveCountMax /etc/ssh/sshd_config</pre>
If properly configured, output should be:
<pre>ClientAliveCountMax 0</pre>
</ocil>
<rationale>
This ensures a user login will be terminated as soon as the <tt>ClientAliveCountMax</tt>
is reached.
</rationale>
<ident cce="27082-7" prodtype="rhel7" />
<oval id="sshd_set_keepalive" value="sshd_required" />
<ref prodtype="rhel7" stigid="040340" />
<ref cis="5.2.12" cjis="5.5.6" cui="3.1.11" disa="1133,2361" hipaa="164.308(a)(4)(i),164.308(b)(1),164.308(b)(3),164.310(b),164.312(e)(1),164.312(e)(2)(ii)" nist="AC-2(5),SA-8,AC-12" srg="SRG-OS-000163-GPOS-00072,SRG-OS-000279-GPOS-00109" />
</Rule>

<Rule id="sshd_set_max_auth_tries" severity="medium">
<title>Set SSH authentication attempt limit</title>
<description>The <tt>MaxAuthTries</tt> parameter specifies the maximum number of authentication attempts
permitted per connection. Once the number of failures reaches half this value, additional failures are logged.
to set MaxAUthTries edit <tt>/etc/ssh/sshd_config</tt> as follows:
<pre>MaxAuthTries <b>tries</b></pre>
</description>
<ocil clause="it is commented out or not configured properly">
To ensure the <tt>MaxAuthTries</tt> parameter is set, run the following command:
<pre>$ sudo grep MaxAuthTries /etc/ssh/sshd_config</pre>
If properly configured, output should be:
<pre>MaxAuthTries <b>tries</b></pre>
</ocil>
<rationale>
Setting the MaxAuthTries parameter to a low number will minimize the risk of successful
brute force attacks to the SSH server.
</rationale>
<oval id="sshd_set_max_auth_tries" value="sshd_max_auth_tries_value" />
<ref cis="9.3.5" prodtype="debian8" />
<ref cis="5.2.5" prodtype="rhel7" />
</Rule>

<Rule id="sshd_disable_rhosts" severity="medium">
<title>Disable SSH Support for .rhosts Files</title>
<description>SSH can emulate the behavior of the obsolete rsh
command in allowing users to enable insecure access to their
accounts via <tt>.rhosts</tt> files.
<br /><br />
To ensure this behavior is disabled, add or correct the
following line in <tt>/etc/ssh/sshd_config</tt>:
<pre>IgnoreRhosts yes</pre>
</description>
<ocil>
<sshd-check-macro default="yes" option="IgnoreRhosts" value="yes" />
</ocil>
<rationale>
SSH trust relationships mean a compromise on one host
can allow an attacker to move trivially to other hosts.
</rationale>
<ident cce="27377-1" prodtype="rhel7" />
<oval id="sshd_disable_rhosts" value="sshd_required" />
<ref prodtype="rhel7" stigid="040350" ospp="FIA_AFL.1" />
<ref nist="AC-3,CM-6(a)" disa="366" cis="5.2.6" srg="SRG-OS-000480-GPOS-00227" 
cjis="5.5.6" cui="3.1.12" />
</Rule>

<Rule id="sshd_disable_user_known_hosts" severity="medium">
<title>Disable SSH Support for User Known Hosts</title>
<description>SSH can allow system users user host-based authentication to connect
to systems if a cache of the remote systems public keys are available.
This should be disabled.
<br /><br />
To ensure this behavior is disabled, add or correct the
following line in <tt>/etc/ssh/sshd_config</tt>:
<pre>IgnoreUserKnownHosts yes</pre>
</description>
<ocil>
<sshd-check-macro default="no" option="IgnoreUserKnownHosts" value="yes" />
</ocil>
<rationale>
Configuring this setting for the SSH daemon provides additional
assurance that remove login via SSH will require a password, even
in the event of misconfiguration elsewhere.
</rationale>
<ident cce="80372-6" prodtype="rhel7" />
<oval id="sshd_disable_user_known_hosts" value="sshd_required" />
<ref prodtype="rhel7" stigid="040380" ospp="FIA_AFL.1" />
<ref cui="3.1.12" disa="366"
hipaa="164.308(a)(4)(i),164.308(b)(1),164.308(b)(3),164.310(b),164.312(e)(1),164.312(e)(2)(ii)"
nist="CM-6(a)" srg="SRG-OS-000480-GPOS-00227" />
</Rule>

<Rule id="sshd_disable_rhosts_rsa" severity="medium">
<title>Disable SSH Support for Rhosts RSA Authentication</title>
<description>SSH can allow authentication through the obsolete rsh
command through the use of the authenticating user's SSH keys. This should be disabled.
<br /><br />
To ensure this behavior is disabled, add or correct the
following line in <tt>/etc/ssh/sshd_config</tt>:
<pre>RhostsRSAAuthentication no</pre>
</description>
<ocil>
To check which SSH protocol version is allowed, check version of
<tt>openssh-server</tt> with following command:
<pre>$ rpm -qi openssh-server | grep Version</pre>
Versions equal to or higher than 7.4 have deprecated the <tt>RhostsRSAAuthentication</tt> option.
If version is lower than 7.4, run the following command to check configuration:
<sshd-check-macro default="yes" option="RhostsRSAAuthentication" value="no" />
</ocil>
<rationale>
Configuring this setting for the SSH daemon provides additional
assurance that remove login via SSH will require a password, even
in the event of misconfiguration elsewhere.
</rationale>
<warning category="general">As of <tt>openssh-server</tt> version <tt>7.4</tt> and above,
the <tt>RhostsRSAAuthentication</tt> option has been deprecated, and the line
<pre>RhostsRSAAuthentication no</pre> in <tt>/etc/ssh/sshd_config</tt> is not
necessary.</warning>
<ident cce="80373-4" prodtype="rhel7" />
<oval id="sshd_disable_rhosts_rsa" value="sshd_required" />
<ref prodtype="rhel7" stigid="040330" ospp="FIA_AFL.1" />
<ref cui="3.1.12" disa="366"
hipaa="164.308(a)(4)(i),164.308(b)(1),164.308(b)(3),164.310(b),164.312(e)(1),164.312(e)(2)(ii)"
nist="CM-6(a)" srg="SRG-OS-000480-GPOS-00227" />
</Rule>

<Rule id="disable_host_auth" severity="medium">
<title>Disable Host-Based Authentication</title>
<description>SSH's cryptographic host-based authentication is
more secure than <tt>.rhosts</tt> authentication. However, it is
not recommended that hosts unilaterally trust one another, even
within an organization.
<br /><br />
To disable host-based authentication, add or correct the
following line in <tt>/etc/ssh/sshd_config</tt>:
<pre>HostbasedAuthentication no</pre>
</description>
<ocil>
<sshd-check-macro default="yes" option="HostbasedAuthentication" value="no" />
</ocil>
<rationale>
SSH trust relationships mean a compromise on one host
can allow an attacker to move trivially to other hosts.
</rationale>
<ident cce="27413-4" prodtype="rhel7" />
<oval id="disable_host_auth" value="sshd_required" />
<ref prodtype="rhel7" stigid="010470" ospp="FIA_AFL.1" />
<ref cis="5.2.7" cjis="5.5.6" cui="3.1.12" disa="366" 
hipaa="164.308(a)(4)(i),164.308(b)(1),164.308(b)(3),164.310(b),164.312(e)(1),164.312(e)(2)(ii)" 
nist="AC-3,CM-6(b)" srg="SRG-OS-000480-GPOS-00229" />
</Rule>

<Rule id="sshd_enable_x11_forwarding" severity="high">
<title>Enable Encrypted X11 Forwarding</title>
<description>By default, remote X11 connections are not encrypted when initiated
by users. SSH has the capability to encrypt remote X11 connections when SSH's
<tt>X11Forwarding</tt> option is enabled.
<br /><br />
To enable X11 Forwarding, add or correct the
following line in <tt>/etc/ssh/sshd_config</tt>:
<pre>X11Forwarding yes</pre>
</description>
<ocil>
<sshd-check-macro default="no" option="X11Forwarding" value="yes" />
</ocil>
<rationale>
Open X displays allow an attacker to capture keystrokes and to execute commands
remotely.
</rationale>
<ident cce="80226-4" prodtype="rhel7" />
<oval id="sshd_enable_x11_forwarding" value="sshd_required" />
<ref prodtype="rhel7" stigid="040710" />
<ref cis="5.2.4" cui="3.1.13" disa="366" nist="CM-2(1)(b)" srg="SRG-OS-000480-GPOS-00227" />
</Rule>

<Rule id="sshd_disable_root_login" severity="medium">
<title>Disable SSH Root Login</title>
<description>The root user should never be allowed to login to a
system directly over a network.
To disable root login via SSH, add or correct the following line
in <tt>/etc/ssh/sshd_config</tt>:
<pre>PermitRootLogin no</pre>
</description>
<ocil>
<sshd-check-macro default="no" option="PermitRootLogin" value="no" />
</ocil>
<rationale>
Even though the communications channel may be encrypted, an additional layer of
security is gained by extending the policy of not logging directly on as root.
In addition, logging in with a user-specific account provides individual
accountability of actions performed on the system and also helps to minimize
direct attack attempts on root's password.
</rationale>
<ident cce="27445-6" prodtype="rhel7" />
<oval id="sshd_disable_root_login" value="sshd_required" />
<ref prodtype="rhel7" stigid="040370" ospp="FIA_AFL.1" />
<ref cis="5.2.8" cjis="5.5.6" cui="3.1.1, 3.1.5" disa="366" hipaa="164.308(a)(4)(i),164.308(b)(1),164.308(b)(3),164.310(b),164.312(e)(1),164.312(e)(2)(ii)" nist="AC-3,AC-6(2),IA-2(1),IA-2(5)" srg="SRG-OS-000480-GPOS-00227" />
</Rule>

<Rule id="sshd_disable_empty_passwords" severity="high">
<title>Disable SSH Access via Empty Passwords</title>
<description>To explicitly disallow SSH login from accounts with
empty passwords, add or correct the following line in <tt>/etc/ssh/sshd_config</tt>:
<br />
<pre>PermitEmptyPasswords no</pre>
<br />
Any accounts with empty passwords should be disabled immediately, and PAM configuration
should prevent users from being able to assign themselves empty passwords.
</description>
<ocil>
<sshd-check-macro default="yes" option="PermitEmptyPasswords" value="no" />
</ocil>
<rationale>
Configuring this setting for the SSH daemon provides additional assurance that
remote login via SSH will require a password, even in the event of 
misconfiguration elsewhere.
</rationale>
<ident cce="27471-2" prodtype="rhel7" />
<oval id="sshd_disable_empty_passwords" value="sshd_required" />
<ref prodtype="rhel7" stigid="010300" ospp="FIA_AFL.1" />
<ref cis="5.2.9" cjis="5.5.6" cui="3.1.1,3.1.5" disa="366" hipaa="164.308(a)(4)(i),164.308(b)(1),164.308(b)(3),164.310(b),164.312(e)(1),164.312(e)(2)(ii)" nist="AC-3,AC-6,CM-6(b)" srg="SRG-OS-000480-GPOS-00229" />
</Rule>

<Rule id="sshd_enable_warning_banner" severity="medium">
<title>Enable SSH Warning Banner</title>
<description>
To enable the warning banner and ensure it is consistent
across the system, add or correct the following line in <tt>/etc/ssh/sshd_config</tt>:
<pre>Banner /etc/issue</pre>
Another section contains information on how to create an
appropriate system-wide warning banner.
</description>
<ocil>
<sshd-check-macro default="no" option="Banner" value="/etc/issue" />
</ocil>
<rationale>
The warning message reinforces policy awareness during the logon process and
facilitates possible legal action against attackers. Alternatively, systems
whose ownership should not be obvious should ensure usage of a banner that does
not provide easy attribution.
</rationale>
<ident cce="27314-4" prodtype="rhel7" />
<oval id="sshd_enable_warning_banner" value="sshd_required" />
<ref prodtype="rhel7" stigid="040170" ospp="FMT_MOF_EXT.1" />
<ref cis="5.2.16" cjis="5.5.6" cui="3.1.9" disa="48,50,1384,1385,1386,1387,1388" hipaa="164.308(a)(4)(i),164.308(b)(1),164.308(b)(3),164.310(b),164.312(e)(1),164.312(e)(2)(ii)" nist="AC-8(a),AC-8(b),AC-8(c)(1),AC-8(c)(2),AC-8(c)(3)" srg="SRG-OS-000023-GPOS-00006,SRG-OS-000024-GPOS-00007,SRG-OS-000228-GPOS-00088" />
</Rule>

<Rule id="sshd_do_not_permit_user_env" severity="medium">
<title>Do Not Allow SSH Environment Options</title>
<description>To ensure users are not able to override environment
options to the SSH daemon, add or correct the following line
in <tt>/etc/ssh/sshd_config</tt>:
<pre>PermitUserEnvironment no</pre>
</description>
<ocil clause="PermitUserEnvironment is not disabled">
To ensure users are not able to present environment daemons, run the following command:
<pre>$ sudo grep PermitUserEnvironment /etc/ssh/sshd_config</pre>
If properly configured, output should be:
<pre>PermitUserEnvironment no</pre>
</ocil>
<rationale>
SSH environment options potentially allow users to bypass
access restriction in some configurations.
</rationale>
<ident cce="27363-1" prodtype="rhel7" />
<oval id="sshd_do_not_permit_user_env" value="sshd_required" />
<ref prodtype="rhel7" stigid="010460" />
<ref cis="5.2.10" cjis="5.5.6" cui="3.1.12" disa="366" hipaa="164.308(a)(4)(i),164.308(b)(1),164.308(b)(3),164.310(b),164.312(e)(1),164.312(e)(2)(ii)" nist="CM-6(b)" srg="SRG-OS-000480-GPOS-00229" />
</Rule>

<Rule id="sshd_use_approved_ciphers" severity="medium">
<title>Use Only FIPS 140-2 Validated Ciphers</title>
<description>Limit the ciphers to those algorithms which are FIPS-approved.
Counter (CTR) mode is also preferred over cipher-block chaining (CBC) mode.
The following line in <tt>/etc/ssh/sshd_config</tt> demonstrates use of 
FIPS 140-2 validated ciphers:
<pre>Ciphers aes128-ctr,aes192-ctr,aes256-ctr</pre>
<br /><br />
The following ciphers are FIPS 140-2 certified on RHEL 7:
<br />- aes128-ctr
<br />- aes192-ctr
<br />- aes256-ctr
<br />- aes128-cbc
<br />- aes192-cbc
<br />- aes256-cbc
<br />- 3des-cbc
<br />- rijndael-cbc@lysator.liu.se
<br /><br />
Any combination of the above ciphers will pass this check. Official FIPS 140-2 paperwork for 
RHEL7 can be found at http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140sp/140sp2630.pdf.
</description>
<ocil clause="FIPS ciphers are not configured or the enabled ciphers are not FIPS-approved">
Only FIPS ciphers should be used. To verify that only FIPS-approved
ciphers are in use, run the following command:
<pre>$ sudo grep Ciphers /etc/ssh/sshd_config</pre>
The output should contain only those ciphers which are FIPS-approved.</ocil>
<rationale>
Unapproved mechanisms that are used for authentication to the cryptographic module are not verified and therefore
cannot be relied upon to provide confidentiality or integrity, and system data may be compromised.
<br />
Operating systems utilizing encryption are required to use FIPS-compliant mechanisms for authenticating to
cryptographic modules.
<br />
FIPS 140-2 is the current standard for validating that mechanisms used to access cryptographic modules
utilize authentication that meets industry and government requirements. For government systems, this allows
Security Levels 1, 2, 3, or 4 for use on Red Hat Enterprise Linux.
</rationale>
<ident cce="27295-5" prodtype="rhel7" />
<oval id="sshd_use_approved_ciphers" value="sshd_required" />
<ref prodtype="rhel7" stigid="040110" />
<ref cis="5.2.10" cjis="5.5.6" cui="3.1.13,3.13.11,3.13.8" disa="68,366,803" hipaa="164.308(b)(1),164.308(b)(2),164.312(e)(1),164.312(e)(2)(i),164.312(e)(2)(ii),164.314(b)(2)(i)" nist="AC-3,AC-17(2),AU-10(5),CM-6(b),IA-5(1)(c),IA-7" srg="SRG-OS-000033-GPOS-00014,SRG-OS-000120-GPOS-00061,SRG-OS-000125-GPOS-00065,SRG-OS-000250-GPOS-00093,SRG-OS-000393-GPOS-00173" />
</Rule>

<Rule id="sshd_use_approved_macs" severity="medium">
<title>Use Only FIPS 140-2 Validated MACs</title>
<description>Limit the MACs to those hash algorithms which are FIPS-approved.
The following line in <tt>/etc/ssh/sshd_config</tt> demonstrates use 
of FIPS-approved MACs:
<br /><br />
<pre>MACs hmac-sha2-512,hmac-sha2-256</pre>
<br /><br />
Only the following message authentication codes are FIPS 140-2 certified on RHEL 7:
<br />- hmac-sha1
<br />- hmac-sha2-256
<br />- hmac-sha2-512
<br />- hmac-sha1-etm@openssh.com
<br />- hmac-sha2-256-etm@openssh.com
<br />- hmac-sha2-512-etm@openssh.com
<br /><br />
Any combination of the above MACs will pass this check. Official FIPS 140-2 paperwork for
RHEL7 can be found at http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140sp/140sp2630.pdf.
</description>
<ocil clause="MACs option is commented out or not using FIPS-approved hash algorithms">
Only FIPS-approved MACs should be used. To verify that only FIPS-approved
MACs are in use, run the following command:
<pre>$ sudo grep -i macs /etc/ssh/sshd_config</pre>
The output should contain only those MACs which are FIPS-approved. Any use of other
ciphers or algorithms will result in the module entering the non-FIPS mode of
operation.

</ocil>
<rationale>
DoD Information Systems are required to use FIPS-approved cryptographic hash
functions. The only SSHv2 hash algorithms meeting this requirement is SHA2.
</rationale>
<ident cce="27455-5" prodtype="rhel7" />
<oval id="sshd_use_approved_macs" value="sshd_approved_macs" value2="sshd_required" />
<ref prodtype="rhel7" stigid="040400" />
<ref cis="5.2.12" cui="3.1.13,3.13.11,3.13.8" disa="1453" hipaa="164.308(b)(1),164.308(b)(2),164.312(e)(1),164.312(e)(2)(i),164.312(e)(2)(ii),164.314(b)(2)(i)" nist="AC-17(2),IA-7,SC-13" srg="SRG-OS-000250-GPOS-00093" />
</Rule>


<Rule id="sshd_use_strong_ciphers" severity="medium">
<title>Use Only Strong Ciphers</title>
<description>Limit the ciphers to strong algorithms.
Counter (CTR) mode is also preferred over cipher-block chaining (CBC) mode.
The following line in <tt>/etc/ssh/sshd_config</tt>
demonstrates use of those ciphers:
<pre>Ciphers aes128-ctr,aes192-ctr,aes256-ctr</pre>
<pre>chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes128-ctr</pre>
The man page <tt>sshd_config(5)</tt> contains a list of supported ciphers.
</description>
<ocil clause="ciphers are not configured or not using strong ciphers">
Only strong ciphers should be used. To verify that only strong
ciphers are in use, run the following command:
<pre>$ sudo grep Ciphers /etc/ssh/sshd_config</pre>
The output should contain only those ciphers which are considered strong, namely,
chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes128-ctr
</ocil>
<rationale>
Based on research conducted at various institutions, it was determined that the symmetric
portion of the SSH Transport Protocol (as described in RFC 4253) has security weaknesses
that allowed recovery of up to 32 bits of plaintext from a block of ciphertext that was
encrypted with the Cipher Block Chaining (CBD) method. From that research, new Counter
mode algorithms (as described in RFC4344) were designed that are not vulnerable to these
types of attacks and these algorithms are now recommended for standard use.
</rationale>
<oval id="sshd_use_strong_ciphers" />
<ref cis="9.3.11" prodtype="debian" />
</Rule>


<Rule id="sshd_use_strong_macs" severity="medium">
<title>Use Only Strong MACs</title>
<description>Limit the MACs to strong hash algorithms.
The following line in <tt>/etc/ssh/sshd_config</tt> demonstrates use
of those MACs:
<pre>MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160</pre>
</description>
<ocil clause="MACs option is commented out or not using strong hash algorithms">
Only strong MACs should be used. To verify that only strong
MACs are in use, run the following command:
<pre>$ sudo grep -i macs /etc/ssh/sshd_config</pre>
The output should contain only those MACs which are strong, namely,
hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160 hash functions.
</ocil>
<rationale>
MD5 and 96-bit MAC algorithms are considered weak and have been shown to increase
exploitability in SSH downgrade attacks. Weak algorithms continue to have a great deal of
attention as a weak spot that can be exploited with expanded computing power. An
attacker that breaks the algorithm could take advantage of a MiTM position to decrypt the
SSH tunnel and capture credentials and information
</rationale>
<oval id="sshd_use_strong_macs" />
</Rule>

<Group id="sshd_strengthen_firewall">
<title>Strengthen Firewall Configuration if Possible</title>
<description>If the SSH server is expected to only receive connections from
the local network, then strengthen the default firewall rule for the SSH service
to only accept connections from the appropriate network segment(s).
<br /><br />
Determine an appropriate network block, <tt>netwk</tt>, network mask, <tt>mask</tt>, and
network protocol, <tt>ip_protocol</tt>, representing the systems on your network which will
be allowed to access this SSH server.
<br /><br />
Run the following command:
<pre>firewall-cmd --permanent --add-rich-rule='rule family="ip_protocol" source address="netwk/mask" service name="ssh" accept'</pre>
</description>
<rationale>
Restricting SSH access to only trusted network segments reduces exposure of the SSH
server to attacks from unauthorized networks.</rationale>


</Group>

</Group>
</Group>