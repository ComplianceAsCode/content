# platform = multi_platform_all
# reboot = false
# strategy = configure
# complexity = low
# disruption = high

{{% if MOUNTOPTION_ARG_VAR %}}
{{{ ansible_instantiate_variables(MOUNTOPTION_ARG_VAR) }}}
{{% endif %}}

{{% if MOUNT_HAS_TO_EXIST == "no" %}}
   {{% set TABFILE='' %}}
{{% else %}}
   {{% set TABFILE='--fstab' %}}
{{% endif %}}

- name: "{{{ rule_title }}}: Check information associated to mountpoint"
  command: findmnt {{{ TABFILE }}} '{{{ MOUNTPOINT }}}'
  register: device_name
  failed_when: device_name.rc > 1
  changed_when: False

- name: "{{{ rule_title }}}: Create mount_info dictionary variable"
  set_fact:
    mount_info: "{{ mount_info|default({})|combine({item.0: item.1}) }}"
  with_together:
    - "{{ device_name.stdout_lines[0].split() | list | lower }}"
    - "{{ device_name.stdout_lines[1].split() | list }}"
  when:
    - device_name.stdout is defined and device_name.stdout_lines is defined
    - (device_name.stdout | length > 0)

- name: "{{{ rule_title }}}: If {{{ MOUNTPOINT }}} not mounted, craft mount_info manually"
  set_fact:
    mount_info: '{{ mount_info|default({})|combine({item.0: item.1}) }}'
  with_together:
    - ["target", "source", "fstype", "options"]
    - ["{{{ MOUNTPOINT }}}", "{{{ FILESYSTEM }}}", "{{{ TYPE }}}", "defaults"]
  when:
    - ("{{{ TABFILE }}}" | length == 0)
    - (device_name.stdout | length == 0)

- name: "{{{ rule_title }}}: Make sure {{{ MOUNTOPTION }}} option is part of the to {{{ MOUNTPOINT }}} options"
  set_fact:
{{% if MOUNTOPTION_ARG_VAR %}}
    mount_info: "{{ mount_info | combine( {'options':''~mount_info.options~',{{{ MOUNTOPTION }}}='~{{{ MOUNTOPTION_ARG_VAR }}}~'' }) }}"
{{% else %}}
    mount_info: "{{ mount_info | combine( {'options':''~mount_info.options~',{{{ MOUNTOPTION }}}' }) }}"
{{% endif %}}
  when:
    - mount_info is defined and "{{{ MOUNTOPTION }}}" not in mount_info.options

- name: "{{{ rule_title }}}: Ensure {{{ MOUNTPOINT }}} is mounted with {{{ MOUNTOPTION }}} option"
  mount:
    path: "{{{ MOUNTPOINT }}}"
    src: "{{ mount_info.source }}"
    opts: "{{ mount_info.options }}"
    state: "mounted"
    fstype: "{{ mount_info.fstype }}"
  when:
    - (device_name.stdout is defined and (device_name.stdout | length > 0)) or ("{{{ TABFILE }}}" | length == 0)
