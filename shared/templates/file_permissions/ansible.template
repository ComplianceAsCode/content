# platform = multi_platform_all
# reboot = false
# strategy = configure
# complexity = low
# disruption = low

{{% for path in FILEPATH %}}
{{% if IS_DIRECTORY %}}
{{% if FILE_REGEX %}}

{{%- if RECURSIVE %}}
{{% set FIND_RECURSE_ARGS="" %}}
{{%- else %}}
{{% set FIND_RECURSE_ARGS="-maxdepth 1" %}}
{{%- endif %}}

{{%- if ALLOW_STRICTER_PERMISSIONS %}}
{{% set PERMS="-perm /" + SEARCH_MODE %}}
{{%- else %}}
{{% set PERMS="\! -perm " + SEARCH_MODE %}}
{{%- endif %}}

- name: Find {{{ path }}} file(s){{% if RECURSIVE %}} recursively{{% endif %}}
  command: 'find -H {{{ path }}} {{{ FIND_RECURSE_ARGS }}} {{{ PERMS }}} -type f -regex "{{{ FILE_REGEX[loop.index0] }}}"'
  register: files_found
  changed_when: False
  failed_when: False
  check_mode: no

- name: Set permissions for {{{ path }}} file(s)
  file:
    path: "{{ item }}"
    mode: "{{{ FILEMODE }}}"
    state: file
  with_items:
    - "{{ files_found.stdout_lines }}"

{{% else %}}

- name: Set permissions for {{{ path }}}{{% if RECURSIVE %}} recursively{{% endif %}}
  file:
    path: "{{{ path }}}"
    state: directory
{{% if RECURSIVE %}}
    recurse: yes
{{% endif %}}
    mode: "{{{ FILEMODE }}}"

{{% endif %}}
{{% else %}}

- name: Test for existence {{{ path }}}
  stat:
    path: "{{{ path }}}"
  register: file_exists
  
- name: Ensure permission {{{ FILEMODE }}} on {{{ path }}}
  file:
    path: "{{{ path }}}"
    mode: "{{{ FILEMODE }}}"
  when: file_exists.stat is defined and file_exists.stat.exists

{{% endif %}}
{{% endfor %}}
