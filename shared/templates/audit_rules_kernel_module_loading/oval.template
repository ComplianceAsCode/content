<def-group>
  <definition class="compliance" id="{{{ _RULE_ID }}}" version="1">
    {{{ oval_metadata("The audit rules should be configured to log information about kernel module loading and unloading.", rule_title=rule_title) }}}

    <criteria operator="OR">

      <!-- Test the augenrules case -->
      <criteria operator="AND">
        <extend_definition comment="audit augenrules" definition_ref="audit_rules_augenrules" />
        <criterion comment="audit augenrules 32-bit {{{ NAME }}}" test_ref="test_32bit_ardm_{{{ NAME }}}_augenrules" />
        <criteria operator="OR">
          <!-- System either isn't 64-bit => we just check presence of 32-bit version of {{{ NAME }}} audit DAC rule -->
          <extend_definition comment="64-bit system" definition_ref="system_info_architecture_64bit" negate="true" />
          <!-- Or system is 64-bit => in that case we also need to verify the presence of 64-bit version of {{{ NAME }}} audit DAC rule -->
          <criterion comment="audit augenrules 64-bit {{{ NAME }}}" test_ref="test_64bit_ardm_{{{ NAME }}}_augenrules" />
        </criteria>
      </criteria>

      <!-- OR test the auditctl case -->
      <criteria operator="AND">
        <extend_definition comment="audit auditctl" definition_ref="audit_rules_auditctl" />
        <criterion comment="audit auditctl 32-bit {{{ NAME }}}" test_ref="test_32bit_ardm_{{{ NAME }}}_auditctl" />
        <criteria operator="OR">
          <!-- System either isn't 64-bit => we just check presence of 32-bit version of the {{{ NAME }}} audit DAC rule -->
          <extend_definition comment="64-bit system" definition_ref="system_info_architecture_64bit" negate="true" />
          <!-- Or system is 64-bit => in that case we also need to verify the presence of 64-bit version of {{{ NAME }}} audit DAC rule -->
          <criterion comment="audit auditctl 64-bit {{{ NAME }}}" test_ref="test_64bit_ardm_{{{ NAME }}}_auditctl" />
        </criteria>
      </criteria>

    </criteria>
  </definition>

{{% macro arkml_oval(audit_type, bits, name) %}}
  <ind:textfilecontent54_test check="all" comment="audit {{{ audit_type }}} {{{ bits }}}-bit {{{ name }}}" id="test_{{{ bits }}}bit_ardm_{{{ name }}}_{{{ audit_type }}}" version="1">
    <ind:object object_ref="object_{{{ bits }}}bit_ardm_{{{ name }}}_{{{ audit_type }}}" />
  </ind:textfilecontent54_test>
  <ind:textfilecontent54_object id="object_{{{ bits }}}bit_ardm_{{{ name }}}_{{{ audit_type }}}" version="1">
    {{% if audit_type == "augenrules" %}}
    <ind:filepath operation="pattern match">^/etc/audit/rules\.d/.*\.rules$</ind:filepath>
    {{% elif audit_type == "auditctl" %}}
    <ind:filepath>/etc/audit/audit.rules</ind:filepath>
    {{% endif %}}
    {{% if "ol" in families or 'rhel' in product or 'ubuntu' in product %}}
    {{% set audit_formats = "(?:-F\s+auid>=" ~ uid_min ~ "[\s]+)(?:-F\s+auid!=(unset|4294967295))\s+" %}}
    {{% else %}}
    {{% set audit_formats = "" %}}
    {{% endif %}}
    <ind:pattern operation="pattern match">^[\s]*-a[\s]+always,exit[\s]+(?:.*-F[\s]+arch=b{{{ bits }}}[\s]+)(?:.*(-S[\s]+{{{ name }}}[\s]+|([\s]+|[,]){{{ name }}}([\s]+|[,]))).*{{{ audit_formats }}}(-k[\s]+|-F[\s]+key=)[\S]+[\s]*$</ind:pattern>
    <ind:instance datatype="int">1</ind:instance>
  </ind:textfilecontent54_object>
{{% endmacro %}}

{{% for audit_type in ["augenrules", "auditctl" ] %}}
{{% for bits in ["32", "64" ] %}}
{{{ arkml_oval(audit_type, bits, NAME) }}}
{{% endfor %}}
{{% endfor %}}

</def-group>

