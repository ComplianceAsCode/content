# platform = multi_platform_rhel,multi_platform_fedora,multi_platform_ol,multi_platform_rhv,multi_platform_sle
# reboot = true
# strategy = restrict
# complexity = low
# disruption = low

#
# What architecture are we on?
#
- name: Set architecture for audit {{{ NAME | join(", ") }}} tasks
  set_fact:
    audit_arch: "b{{ ansible_architecture | regex_replace('.*(\\d\\d$)','\\1') }}"

{{% for EXIT_CODE in ["EACCES","EPERM"] %}}
- name: Perform remediation of Audit rules for {{{ NAME | join(", ") }}} {{{ EXIT_CODE}}} for x86 platform
  block:
    {{{ ansible_audit_augenrules_add_syscall_rule(
      action_arch_filters="-a always,exit -F arch=b32",
      other_filters="-F exit=-"~EXIT_CODE,
      auid_filters="-F auid>="~auid~" -F auid!=unset",
      syscalls=NAME,
      key="access",
      syscall_grouping=SYSCALL_GROUPING,
      )|indent(4) }}}
    {{{ ansible_audit_auditctl_add_syscall_rule(
      action_arch_filters="-a always,exit -F arch=b32",
      other_filters="-F exit=-"~EXIT_CODE,
      auid_filters="-F auid>="~auid~" -F auid!=unset",
      syscalls=NAME,
      key="access",
      syscall_grouping=SYSCALL_GROUPING,
      )|indent(4) }}}

- name: Perform remediation of Audit rules for {{{ NAME | join(", ") }}} {{{ EXIT_CODE }}} for x86_64 platform
  block:
    {{{ ansible_audit_augenrules_add_syscall_rule(
      action_arch_filters="-a always,exit -F arch=b64",
      other_filters="-F exit=-"~EXIT_CODE,
      auid_filters="-F auid>="~auid~" -F auid!=unset",
      syscalls=NAME,
      key="access",
      syscall_grouping=SYSCALL_GROUPING,
      )|indent(4) }}}
    {{{ ansible_audit_auditctl_add_syscall_rule(
      action_arch_filters="-a always,exit -F arch=b64",
      other_filters="-F exit=-"~EXIT_CODE,
      auid_filters="-F auid>="~auid~" -F auid!=unset",
      syscalls=NAME,
      key="access",
      syscall_grouping=SYSCALL_GROUPING,
      )|indent(4) }}}
  when: audit_arch == "b64"
{{% endfor %}}
