# platform = multi_platform_all
# reboot = true
# strategy = disable
# complexity = low
# disruption = medium

{{#- sysctl quirks -#}}
{{%- set setsysctlvar_rx -%}}
^[ \\t]*-?[ \\t]*{{{
    SYSCTLVAR | escape_regex_sq |
    replace('[.]', '[./]') | replace('[/]', '[./]')
    }}}[ \\t]*=
{{%- endset %}}
- name: List /etc/sysctl.d/*.conf files
  find:
    paths: {{{ ansible_sysctl_set_config_directories() }}}
    contains: >-
      {{{ setsysctlvar_rx }}}.*$
    patterns: "*.conf"
    file_type: any
  register: find_sysctl_d

- name: Comment out any occurrences of {{{ SYSCTLVAR }}} from config files
  replace:
    path: "{{ item.path }}"
    regexp: >-
      {{{ setsysctlvar_rx }}}
    replace: '#{{{ SYSCTLVAR }}}'
  loop: "{{ find_sysctl_d.files }}"

- name: Comment out any occurrences of {{{ SYSCTLVAR }}} from /etc/sysctl.conf
  replace:
    path: "/etc/sysctl.conf"
    regexp: >-
      {{{ setsysctlvar_rx }}}
    replace: '#{{{ SYSCTLVAR }}}'
{{%- if sysctl_remediate_drop_in_file != "true" %}}
{{#- sysctl module manages only last entry #}}
    before: >-
      .*\n{{{ setsysctlvar_rx | trim('^') }}}
{{%- endif %}}
{{%- if SYSCTLVAL == "" or SYSCTLVAL is not string  %}}

- (xccdf-var sysctl_{{{ SYSCTLID }}}_value)

- name: Ensure sysctl {{{ SYSCTLVAR }}} is set
  sysctl:
    name: "{{{ SYSCTLVAR }}}"
    value: "{{ sysctl_{{{ SYSCTLID }}}_value }}"
{{%- else %}}

- name: Ensure sysctl {{{ SYSCTLVAR }}} is set to {{{ SYSCTLVAL }}}
  sysctl:
    name: "{{{ SYSCTLVAR }}}"
    value: "{{{ SYSCTLVAL }}}"
{{%- endif %}}
    sysctl_file: >-
{{%- if sysctl_remediate_drop_in_file == "true" %}}
      /etc/sysctl.d/{{{ SYSCTLVAR | replace('.','_') | replace('/', '_') }}}.conf
{{%- else %}}
      /etc/sysctl.conf
{{%- endif %}}
    state: present
    reload: yes
    sysctl_set: true
