{{%- if SYSCTLVAL is none %}}
{{%- set COMMENT_VALUE="the appropriate value" %}}
{{%- elif SYSCTLVAL is string %}}
{{%- set COMMENT_VALUE=SYSCTLVAL %}}
{{%- else -%}}
{{%- set COMMENT_VALUE = SYSCTLVAL | join(" or " ) %}}
{{%- endif %}}

{{%- macro state_static_sysctld(suffix) -%}}
    <ind:object object_ref="{{{ obj_static_sysctld_id(suffix) }}}"/>
{{%- if SYSCTLVAL is none or SYSCTLVAL is string -%}}
    <ind:state state_ref="state_{{{ rule_id }}}_static_sysctld"/>
{{%- else -%}}
{{%- for x in SYSCTLVAL %}}
    <ind:state state_ref="state_{{{ rule_id }}}_static_sysctld_{{{ x }}}"/>
{{%- endfor -%}}
{{%- endif -%}}
{{%- endmacro -%}}

{{%- set sysctl_dirs = ['/etc/sysctl.d', '/run/sysctl.d'] -%}}
{{%- if product in [ "sle12", "sle15"] or all_possible -%}}
{{%- set sysctl_dirs = sysctl_dirs + ['/usr/local/lib/sysctl.d'] -%}}
{{%- endif -%}}
{{%- if product not in ["fedora", "ol7", "ol8", "ol9", "rhcos4", "rhel7", "rhel8", "rhel9"] or all_possible -%}}
{{%- set sysctl_dirs = sysctl_dirs + ['/usr/lib/sysctl.d'] -%}}
{{%- set sysctl_dirs = sysctl_dirs + ['/lib/sysctl.d'] -%}}
{{%- endif -%}}

{{%- macro sysctl_d_id(sysctl_dir) -%}}
{{{- sysctl_dir.lstrip('/') | replace('/', '_') | replace ('.', '') -}}}
{{%- endmacro -%}}

{{%- macro obj_static_sysctld_id(suffix) -%}}
obj_{{{ rule_id }}}_static_sysctld_{{{ suffix }}}
{{%- endmacro -%}}

{{%- macro sysctl_match() -%}}
    <ind:pattern operation="pattern match">^[ \t]*-?[ \t]*{{{
        SYSCTLVAR | escape_regex_sq | replace('[.]', '[./]') | replace('[/]', '[./]')
    }}}[ \t]*=[ \t]*(|\S|\S[^\n]*\S)[ \t]*$</ind:pattern>
    <ind:instance datatype="int" operation="greater than or equal">1</ind:instance>
{{%- endmacro -%}}

{{%- macro sysctl_local_variables(suffix) -%}}
{{%- if SYSCTLVAR == "net.ipv4.ip_local_port_range" %}}
    <local_variable id="local_var_{{{ rule_id }}}_first_value{{{ suffix }}}"
                    comment="port range first element"
                    version="1" datatype="string">
        <regex_capture pattern="^\s*(\d+)\s+\d+\s*$">
            <variable_component var_ref="{{{ rule_id }}}_value"/>
        </regex_capture>
    </local_variable>

    <local_variable id="local_var_{{{ rule_id }}}_last_value{{{ suffix }}}"
                    comment="port range last element"
                    version="1" datatype="string">
        <regex_capture pattern="^\s*\d+\s+(\d+)\s*$">
            <variable_component var_ref="{{{ rule_id }}}_value"/>
        </regex_capture>
    </local_variable>

    <local_variable id="local_var_{{{ rule_id }}}_regex{{{ suffix }}}"
                    comment="port range first element"
                    version="1" datatype="string">
        <concat>
            <literal_component>^\s*(</literal_component>
            <variable_component var_ref="local_var_{{{ rule_id }}}_first_value{{{ suffix }}}"/>
            <literal_component>\s+</literal_component>
            <variable_component var_ref="local_var_{{{ rule_id }}}_last_value{{{ suffix }}}"/>
            <literal_component>)\s*$</literal_component>
        </concat>
    </local_variable>
{{%- else %}}
    {{{ oval_var_trim(rule_id ~ "_value", suffix=suffix, DATATYPE=DATATYPE) }}}
{{%- endif -%}}
{{%- endmacro -%}}

{{%- if "P" in FLAGS -%}}

<def-group>
    <definition class="compliance" id="{{{ rule_id }}}" version="3">
        {{{ oval_metadata("The '" + SYSCTLVAR + "' kernel parameter should be set to the appropriate value in both system configuration and system runtime.") }}}
        <criteria operator="AND">
            <extend_definition comment="{{{ SYSCTLVAR }}} configuration setting check"
                               definition_ref="{{{ rule_id }}}_static"/>
            <extend_definition comment="{{{ SYSCTLVAR }}} runtime setting check"
                               definition_ref="{{{ rule_id }}}_runtime"/>
        </criteria>
    </definition>
</def-group>

{{%- elif "I" in FLAGS %}}

<def-group>
    <definition class="compliance" id="{{{ rule_id }}}" version="4">
        {{{ oval_metadata("The kernel '" + SYSCTLVAR + "' parameter should be set to the appropriate value in both system configuration and system runtime.") }}}
        <criteria comment="IPv6 disabled or {{{ SYSCTLVAR }}} set correctly" operator="OR">
{{%- if product in ["ubuntu1604", "ubuntu1804"] %}}
            <extend_definition comment="is IPv6 enabled?"
                               definition_ref="kernel_module_ipv6_option_disabled"/>
{{%- else %}}
            <extend_definition comment="is IPv6 enabled?"
                               definition_ref="sysctl_kernel_ipv6_disable"/>
{{%- endif %}}
            <criteria operator="AND">
                <extend_definition comment="{{{ SYSCTLVAR }}} configuration setting check"
                                   definition_ref="{{{ rule_id }}}_static"/>
                <extend_definition comment="{{{ SYSCTLVAR }}} runtime setting check"
                                   definition_ref="{{{ rule_id }}}_runtime"/>
            </criteria>
        </criteria>
    </definition>
</def-group>

{{%- endif -%}}
{{%- if "R" in FLAGS %}}

<def-group>
    <definition class="compliance" id="{{{ rule_id }}}_runtime" version="3">
        {{{ oval_metadata("The kernel '" + SYSCTLVAR + "' parameter should be set to " + COMMENT_VALUE + " in the system runtime.") }}}
        <criteria operator="AND">
            <criterion comment="kernel runtime parameter {{{ SYSCTLVAR }}} set to {{{ COMMENT_VALUE }}}"
                       test_ref="test_{{{ rule_id }}}_runtime"/>
        </criteria>
    </definition>

    <unix:sysctl_test id="test_{{{ rule_id }}}_runtime" version="1"
                      comment="kernel runtime parameter {{{ SYSCTLVAR }}} set to {{{ COMMENT_VALUE }}}"
                      check="all" check_existence="all_exist" state_operator="OR">
        <unix:object object_ref="obj_{{{ rule_id }}}_runtime"/>
{{%- if SYSCTLVAL is none or SYSCTLVAL is string %}}
        <unix:state state_ref="state_{{{ rule_id }}}_runtime"/>
{{%- else -%}}
{{%- for x in SYSCTLVAL %}}
        <unix:state state_ref="state_{{{ rule_id }}}_runtime_{{{ x }}}"/>
{{%- endfor -%}}
{{%- endif %}}
    </unix:sysctl_test>

    <unix:sysctl_object id="obj_{{{ rule_id }}}_runtime" version="1">
        <unix:name>{{{ SYSCTLVAR }}}</unix:name>
    </unix:sysctl_object>

{{%- if SYSCTLVAL is none %}}
    <unix:sysctl_state id="state_{{{ rule_id }}}_runtime" version="1">
{{%- if SYSCTLVAR == "net.ipv4.ip_local_port_range" %}}
        <unix:value datatype="string" operation="pattern match"
                    var_ref="local_var_{{{ rule_id }}}_regex"/>
{{%- else %}}
        <unix:value datatype="{{{ DATATYPE }}}" operation="equals"
                    var_ref="{{{ rule_id }}}_value_trim"/>
{{%- endif %}}
    </unix:sysctl_state>
{{{ sysctl_local_variables("") }}}

    <external_variable id="{{{ rule_id }}}_value" version="1"
                       comment="External variable for {{{ SYSCTLVAR }}}" datatype="{{{ DATATYPE }}}"/>
{{%- elif SYSCTLVAL is string %}}
    <unix:sysctl_state id="state_{{{ rule_id }}}_runtime" version="1">
{{%- if OPERATION == "pattern match" %}}
        <unix:value datatype="{{{ DATATYPE }}}"
                    operation="{{{ OPERATION }}}">{{{ SYSCTLVAL_REGEX }}}</unix:value>
{{%- else %}}
        <unix:value datatype="{{{ DATATYPE }}}"
                    operation="{{{ OPERATION }}}">{{{ SYSCTLVAL }}}</unix:value>
{{%- endif %}}
    </unix:sysctl_state>
{{%- else -%}}
{{%- for x in SYSCTLVAL %}}
    <unix:sysctl_state id="state_{{{ rule_id }}}_runtime_{{{ x }}}" version="1">
        <unix:value datatype="{{{ DATATYPE }}}"
                    operation="{{{ OPERATION }}}">{{{ x }}}</unix:value>
    </unix:sysctl_state>
{{%- endfor -%}}
{{%- endif %}}
</def-group>

{{%- endif -%}}
{{%- if "S" in FLAGS %}}

<def-group>
    <definition class="compliance" id="{{{ rule_id }}}_static" version="3">
        {{{ oval_metadata("The kernel '" + SYSCTLVAR + "' parameter should be set to " + COMMENT_VALUE + " in the system configuration.") }}}
        <criteria operator="OR">
            <criteria operator="AND">
                <criteria operator="AND">
                    <criterion comment="kernel static parameter {{{ SYSCTLVAR }}} set to {{{ COMMENT_VALUE }}} in /etc/sysctl.conf"
                               test_ref="test_{{{ rule_id }}}_static"/>
                    <!-- see sysctl.d(5) -->
{{%- for sysctl_dir in sysctl_dirs %}}
                    <criterion comment="kernel static parameter {{{ SYSCTLVAR }}} set to {{{ COMMENT_VALUE }}} in {{{ sysctl_dir }}}/*.conf"
                               test_ref="test_{{{ rule_id }}}_static_{{{ sysctl_d_id(sysctl_dir) }}}"/>
{{%- endfor %}}
                </criteria>
                <criterion comment="Check that {{{ SYSCTLID }}} is defined in at least one file"
                           test_ref="test_{{{ rule_id }}}_static_not_defined"
                           negate="true"/>
            </criteria>
{{%- if MISSING_PARAMETER_PASS == "true" %}}
            <criterion comment="Check that {{{ SYSCTLID }}} is not defined in any file"
                       test_ref="test_{{{ rule_id }}}_static_not_defined"/>
{{%- endif %}}
        </criteria>
    </definition>

    <ind:textfilecontent54_test id="test_{{{ rule_id }}}_static_not_defined"
                                version="2" check="all" check_existence="none_exist"
                                comment="{{{ SYSCTLVAR }}} static configuration not defined">
        <ind:object object_ref="{{{ obj_static_sysctld_id("unfiltered") }}}"/>
    </ind:textfilecontent54_test>

    <ind:textfilecontent54_test id="test_{{{ rule_id }}}_static"
                                version="2" check="all" check_existence="any_exist"
                                comment="{{{ SYSCTLVAR }}} static configuration in /etc/sysctl.conf"
                                state_operator="OR">
        {{{ state_static_sysctld("sysctl") }}}
    </ind:textfilecontent54_test>

    <ind:textfilecontent54_object id="{{{ obj_static_sysctld_id("sysctl") }}}" version="1">
        <ind:filepath>/etc/sysctl.conf</ind:filepath>
        {{{ sysctl_match() }}}
    </ind:textfilecontent54_object>
{{%- for sysctl_dir in sysctl_dirs %}}

    <ind:textfilecontent54_test id="test_{{{ rule_id }}}_static_{{{ sysctl_d_id(sysctl_dir) }}}"
                                version="2" check="all" check_existence="any_exist"
                                comment="{{{ SYSCTLVAR }}} static configuration in {{{ sysctl_dir }}}/*.conf"
                                state_operator="OR">
        {{{ state_static_sysctld(sysctl_d_id(sysctl_dir)) }}}
    </ind:textfilecontent54_test>

    <ind:textfilecontent54_object id="{{{ obj_static_sysctld_id(sysctl_d_id(sysctl_dir)) }}}" version="1">
        <ind:path>{{{ sysctl_dir }}}</ind:path>
        <ind:filename operation="pattern match">^.*\.conf$</ind:filename>
        {{{ sysctl_match() }}}
    </ind:textfilecontent54_object>
{{%- endfor %}}

    <local_variable comment="List of conf files" datatype="string"
                    id="local_var_conf_files_{{{ rule_id }}}" version="1">
        <object_component object_ref="{{{ obj_static_sysctld_id("unfiltered") }}}"
                          item_field="filepath"/>
    </local_variable>

    <!-- Avoid directly referencing a possibly empty collection, one empty collection will cause the
         variable to have no value even when there are valid objects. -->
    <ind:textfilecontent54_object id="{{{ obj_static_sysctld_id("unfiltered") }}}" version="1">
{{%- set obj_refs = [] -%}}
{{%- set _ = obj_refs.append('<object_reference>' ~ obj_static_sysctld_id("sysctl") ~ '</object_reference>') -%}}
{{%- for sysctl_dir in sysctl_dirs -%}}
{{%- set _ = obj_refs.append('<object_reference>' ~ obj_static_sysctld_id(sysctl_d_id(sysctl_dir)) ~ '</object_reference>') -%}}
{{%- endfor -%}}
        {{{ oval_list_to_set(obj_refs) | indent(8) }}}
    </ind:textfilecontent54_object>

{{%- if SYSCTLVAL is none %}}

    <ind:textfilecontent54_state id="state_{{{ rule_id }}}_static_sysctld" version="1">
{{%- if SYSCTLVAR == "net.ipv4.ip_local_port_range" %}}
        <ind:subexpression operation="pattern match" datatype="string"
                           var_ref="local_var_{{{ rule_id }}}_regex_static"/>
{{%- else %}}
        <ind:subexpression operation="{{{ OPERATION }}}" var_ref="{{{ rule_id }}}_value_trim_static"
                           datatype="{{{ DATATYPE }}}"/>
{{%- endif %}}
    </ind:textfilecontent54_state>
{{{ sysctl_local_variables("_static") }}}

    <external_variable id="{{{ rule_id }}}_value" version="1"
                       comment="External variable for {{{ SYSCTLVAR }}}" datatype="{{{ DATATYPE }}}"/>
{{%- elif SYSCTLVAL is string -%}}
    <ind:textfilecontent54_state id="state_{{{ rule_id }}}_static_sysctld" version="1">
{{%- if OPERATION == "pattern match" %}}
        <ind:subexpression operation="{{{ OPERATION }}}" datatype="{{{ DATATYPE }}}">{{{ SYSCTLVAL_REGEX }}}</ind:subexpression>
{{%- else %}}
        <ind:subexpression operation="{{{ OPERATION }}}" datatype="{{{ DATATYPE }}}">{{{ SYSCTLVAL }}}</ind:subexpression>
{{%- endif %}}
    </ind:textfilecontent54_state>
{{%- else -%}}
{{%- for x in SYSCTLVAL %}}
    <ind:textfilecontent54_state id="state_{{{ rule_id }}}_static_sysctld_{{{ x }}}" version="1">
        <ind:subexpression operation="{{{ OPERATION }}}" datatype="{{{ DATATYPE }}}">{{{ x }}}</ind:subexpression>
    </ind:textfilecontent54_state>
{{%- endfor -%}}
{{%- endif %}}
</def-group>
{{%- endif -%}}
