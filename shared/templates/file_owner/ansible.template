# platform = multi_platform_all
# reboot = false
# strategy = configure
# complexity = low
# disruption = low

{{% if FILEPATH is not string %}}
{{% for path in FILEPATH %}}
{{% if IS_DIRECTORY and FILE_REGEX %}}

  {{% if FILE_REGEX is not string %}}
- name: Find {{{ path }}} file(s) matching {{{ FILE_REGEX[loop.index0] }}}
  find:
    paths: "{{{ path }}}"
    patterns: {{{ FILE_REGEX[loop.index0] }}}
    use_regex: yes
  register: files_found

- name: Ensure group owner on {{{ path }}} file(s) matching {{{ FILE_REGEX[loop.index0] }}}
  file:
    path: "{{ item.path }}"
    owner: "{{{ FILEUID }}}"
  with_items:
    - "{{ files_found.files }}"

  {{% else %}}
- name: Find {{{ path }}} file(s) matching {{{ FILE_REGEX }}}
  find:
    paths: "{{{ path }}}"
    patterns: {{{ FILE_REGEX }}}
    use_regex: yes
  register: files_found
  {{% endif %}}

{{% else %}}

- name: Test for existence {{{ path }}}
  stat:
    path: "{{{ path }}}"
  register: file_exists

- name: Ensure owner {{{ FILEUID }}} on {{{ path }}}
  file:
    path: "{{{ path }}}"
    owner: "{{{ FILEUID }}}"
  when: file_exists.stat is defined and file_exists.stat.exists

{{% endif %}}
{{% endfor %}}
{{% elif IS_DIRECTORY and FILE_REGEX %}}

- name: Find {{{ FILEPATH }}} file(s) matching {{{ FILE_REGEX }}}
  find:
    paths: "{{{ FILEPATH }}}"
    patterns: "{{{ FILE_REGEX }}}"
    use_regex: yes
  register: files_found

- name: Ensure group owner on {{{ FILEPATH }}} file(s) matching {{{ FILE_REGEX }}}
  file:
    path: "{{ item.path }}"
    owner: "{{{ FILEUID }}}"
  with_items:
    - "{{ files_found.files }}"

{{% else %}}

- name: Test for existence {{{ FILEPATH }}}
  stat:
    path: "{{{ FILEPATH }}}"
  register: file_exists

- name: Ensure owner {{{ FILEUID }}} on {{{ FILEPATH }}}
  file:
    path: "{{{ FILEPATH }}}"
    owner: "{{{ FILEUID }}}"
  when: file_exists.stat is defined and file_exists.stat.exists

{{% endif %}}
