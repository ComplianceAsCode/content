#
# product-make.include
#
# The common Makefile snippets used by other Makefiles in various product subfolders
#
# The snippets assume that the following variables are set by each product:
#  * $(SHARED)
#
#

# Include project level information
include $(SHARED)/../VERSION

# Defaults for the global variables - directories
IN = input
OUT = output
BUILD = build
BUILD_REMEDIATIONS=$(BUILD)/remediations
TRANS = transforms
SHARED_OVAL = $(SHARED)/oval
SHARED_OVAL_5_11 = $(SHARED_OVAL)/oval_5.11
SHARED_REMEDIATIONS = $(BUILD)/shared/bash $(SHARED)/templates/static/bash # Currently we cannot build shared remediations only once
PRODUCT_REMEDIATIONS = templates/output/bash
STANDARD_OVAL_DIRS = $(SHARED_OVAL) $(IN)/oval
REFS = $(SHARED)/references
CONF = $(SHARED)/../config
UTILS = utils
DIST = dist

# Defaults for the global variables - others
ID = ssg

# Query environment - ask openscap if it can do OVAL 5.11
OVAL_5_11 := $(shell oscap --version | grep -q "OVAL Version: 5.11.*"; echo $$?)

# Query environment - ask openscap if it can generate guide from DataStream
OPENSCAP_1_1_OR_LATER := $(shell oscap --version | grep -q -E "OpenSCAP command line tool \(oscap\) 1\.[1-9]+[0-9]*\."; echo $$?)

# Query environment - ask openscap if it has SVG support in guides
OPENSCAP_SVG := $(shell $(SHARED)/$(UTILS)/oscap-svg-support.py; echo $$?)

# Query environment - check shellcheck
SHELLCHECK_AVAIL := $(shell which shellcheck >& /dev/null; echo $$?)

# Common build targets - include the SSG logo into the XCCDF header
$(OUT)/guide.xml: $(SHARED)/$(TRANS)/includelogo.xslt $(IN)/guide.xml
ifeq ($(OPENSCAP_SVG), 0)
	xsltproc -o $(OUT)/guide.xml $(SHARED)/$(TRANS)/includelogo.xslt $(IN)/guide.xml
else
	mkdir -p $(OUT)/
	cp $(IN)/guide.xml $(OUT)/
endif

# Common build targets - compose single shorthand XCCDF guide from all the sources
guide_xslt_deps= $(wildcard $(IN)/auxiliary/*.xml) $(wildcard $(IN)/profiles/*.xml) $(wildcard $(IN)/xccdf/**/*.xml)
$(OUT)/shorthand.xml: $(OUT)/guide.xml $(IN)/guide.xslt $(guide_xslt_deps)
	xsltproc --stringparam SHARED_RP "$(realpath $(SHARED))" -o $@ $(IN)/guide.xslt $(OUT)/guide.xml
	xmllint --format --output $@ $@

# Create temporary $(SHARED)/$(OUT) folder to hold information like list of contributors or list of
# available remediation functions used by all SSG benchmarks
$(SHARED)/$(OUT):
	mkdir -p $@

# Benchmark metadata prerequisite - derive $(SHARED)/$(OUT)/contributors.xml from the content of Contributors.md
$(SHARED)/$(OUT)/contributors.xml: $(SHARED)/$(OUT)
	# Create $(SHARED)/$(OUT)/contributors.xml file:
	# * holding <text> like root element and
	# * names of the individual SSG contributor(s) within <contributor> element(s)
	echo "<text>" > $@
	sed -n -e 's/\* \(.*\)/<contributor>\1<\/contributor>/p' $(SHARED)/../Contributors.md >> $@
	echo "</text>" >> $@

# Common build targets - convert shorthand format to an XCCDF stub
$(OUT)/xccdf-unlinked-unresolved.xml: $(OUT)/shorthand.xml $(SHARED)/$(OUT)/contributors.xml $(TRANS)/shorthand2xccdf.xslt $(TRANS)/constants.xslt $(SHARED)/$(TRANS)/shared_constants.xslt
	xsltproc --stringparam ssg_version "$(SSG_MAJOR_VERSION).$(SSG_MINOR_VERSION)" -o $@ $(TRANS)/shorthand2xccdf.xslt $<

# Common build targets - improve the XCCDF stub - first resolve
$(OUT)/xccdf-unlinked-empty-groups.xml: $(OUT)/xccdf-unlinked-unresolved.xml
	oscap xccdf resolve -o $@ $<

# Common build targets - improve the XCCDF stub - second resolve
$(OUT)/xccdf-unlinked-empty-groups-unselected.xml: $(OUT)/xccdf-unlinked-empty-groups.xml $(SHARED)/$(UTILS)/unselect-empty-xccdf-groups.py
	$(SHARED)/$(UTILS)/unselect-empty-xccdf-groups.py --input $< --output $@

# Common build targets - improve the XCCDF stub - third resolve
$(OUT)/xccdf-unlinked-resolved.xml: $(OUT)/xccdf-unlinked-empty-groups-unselected.xml
	oscap xccdf resolve -o $@ $<

# Common build targets - create OCIL questionnaire stub for further processing
$(OUT)/ocil-unlinked.xml: $(OUT)/xccdf-unlinked-resolved.xml $(SHARED)/$(TRANS)/xccdf-create-ocil.xslt
	xsltproc -o $@ $(SHARED)/$(TRANS)/xccdf-create-ocil.xslt $<
	xmllint --format --output $(OUT)/unlinked-$(PROD)-ocil.xml $@

# Common build targets - an XCCDF witch OCIL checks in the form of official OCIL-2.0 syntax
$(OUT)/xccdf-unlinked-ocilrefs.xml: $(OUT)/xccdf-unlinked-resolved.xml $(OUT)/ocil-unlinked.xml $(SHARED)/$(TRANS)/xccdf-ocilcheck2ref.xslt $(SHARED)/$(TRANS)/shared_constants.xslt
	xsltproc -stringparam product "$(PROD)" -o $@ $(SHARED)/$(TRANS)/xccdf-ocilcheck2ref.xslt $<


$(PRODUCT_REMEDIATIONS):
	if [ -f templates/Makefile ];	\
	then	\
		make -C templates bash;	\
	else	\
		mkdir -p templates/output/bash;	\
	fi

$(BUILD)/shared/bash:
	make -C $(SHARED)/templates/ OUTPUT=$(abspath $(BUILD)/shared)

# Common build targets - a catalogue of XCCDF remediations
product_bash_remediations_deps=$(wildcard templates/static/bash/*.sh)
shared_bash_remediations_deps= $(wildcard $(SHARED_REMEDIATIONS)/*.sh)
bash_remediations_deps= $(product_bash_remediations_deps) $(shared_bash_remediations_deps)
$(OUT)/bash-remediations.xml: $(SHARED)/$(TRANS)/combineremediations.py $(bash_remediations_deps) $(PRODUCT_REMEDIATIONS) $(BUILD)/shared/bash
	$(SHARED)/$(TRANS)/combineremediations.py $(PROD) $(SHARED_REMEDIATIONS) $(PRODUCT_REMEDIATIONS) templates/static/bash $(OUT)/bash-remediations.xml

# Common build targets - an XCCDF with remediations but not linked to OVAL yet
# Prefer "$(OUT)/xccdf-unlinked-ocilrefs.xml" document below since it contains OCIL expanded to official OCIL-2.0 syntax
# Fixes: https://github.com/OpenSCAP/scap-security-guide/issues/1037
# Fixes: https://github.com/OpenSCAP/scap-security-guide/issues/1038
$(OUT)/xccdf-unlinked-withremediations.xml: $(OUT)/xccdf-unlinked-ocilrefs.xml $(OUT)/xccdf-unlinked-resolved.xml $(OUT)/bash-remediations.xml $(SHARED)/$(TRANS)/xccdf-addremediations.xslt
	xsltproc -stringparam remediations "$(realpath $(OUT)/bash-remediations.xml)" -o $@ $(SHARED)/$(TRANS)/xccdf-addremediations.xslt $(OUT)/xccdf-unlinked-ocilrefs.xml
	xmllint --format --output $@ $@

# Common build targets - OVAL files
standard-oval-build:
	# If openscap on the system supports OVAL-5.11 language version, include also OVAL-5.11 checks
	# into final list of OVAL checks
ifeq ($(OVAL_5_11), 0)
	# System supports OVAL-5.11 => propagate 'RUNTIME_OVAL_VERSION' variable into the environment
	$(eval MOD_ENV := env RUNTIME_OVAL_VERSION='5.11')
	$(eval STANDARD_OVAL_DIRS+=$(SHARED_OVAL_5_11) $(IN)/oval/oval_5.11)
endif
	find $(OVAL_DIRS) -name "*.xml" | xargs xmlwf
	$(MOD_ENV) $(SHARED)/$(TRANS)/combineovals.py $(CONF) $(PROD) $(STANDARD_OVAL_DIRS) > $(OUT)/unlinked-$(PROD)-oval.xml
	xmllint --format --output $(OUT)/unlinked-$(PROD)-oval.xml $(OUT)/unlinked-$(PROD)-oval.xml

validate-bash:
ifeq ($(SHELLCHECK_AVAIL), 0)
	shellcheck -s bash $(product_bash_remediations_deps)
else
	@echo "Skipping ShellCheck analysis, ensure shellcheck executable is present in the PATH!"
endif

# Sanity check to verify if intended remediations got truly included into the benchmark being currently build
#
# In the case "$(OUT)/bash-remediations.xml" contains at least one "<fix rule" element and remediations got included
# properly, there needs to exist at least one "<fix system" element in the "xccdf-unlinked-withremediations.xml" file.
# If not "xsltproc" call in the $(OUT)/xccdf-unlinked-withremediations.xml target above didn't include the remediations
# (due to "warning: failed to load external entity" problem or some other error)
#
# Resign to continue building the benchmark in that case (since it would miss the remediations), print out an error
# message and exit with failure
#
$(OUT)/xccdf-unlinked-final.xml: $(OUT)/xccdf-unlinked-withremediations.xml $(OUT)/bash-remediations.xml
	@if grep -q '<fix rule' "$(OUT)/bash-remediations.xml"; \
	then \
	# At least one "<fix rule" element is included in "$(OUT)/bash-remediations.xml" \
	\
		if ! grep -q '<fix system' "$(OUT)/xccdf-unlinked-withremediations.xml"; \
		then \
		# But "xccdf-unlinked-withremediations.xml" doesn't contain "<fix system" element \
		\
			echo -e "\n\tError: Can't locate remediation (\"<fix system\") elements in \"$(OUT)/xccdf-unlinked-withremediations.xml\". Exiting!\n"; \
			exit 1; \
		fi \
	fi \
	# Copy "$(OUT)/xccdf-unlinked-withremediations.xml" to "$(OUT)/xccdf-unlinked-final.xml" \
	# (so subsequent targets can find the "$(OUT)/xccdf-unlinked-final.xml" prerequisite) \
	cp "$(OUT)/xccdf-unlinked-withremediations.xml" "$(OUT)/xccdf-unlinked-final.xml"
