#
# product-make.include
#
# The common Makefile snippets used by other Makefiles in various product subfolders
#
# The snippets assume that the following variables are set by each product:
#  * $(SHARED)
#
#

# Include project level information
include $(SHARED)/../VERSION

# Defaults for the global variables - directories
IN = input
OUT = output
BUILD = build
BUILD_REMEDIATIONS=$(BUILD)/remediations
TRANS = transforms
SHARED_OVAL = $(SHARED)/oval
SHARED_OVAL_5_11 = $(SHARED_OVAL)/oval_5.11
SHARED_REMEDIATIONS = $(SHARED)/remediations/bash
REFS = $(SHARED)/references
CONF = $(SHARED)/../config
UTILS = utils
DIST = dist

# Defaults for the global variables - others
ID = ssg
INCLUDE_TEST_PROFILE = 0

# Query environment - ask openscap if it can do OVAL 5.11
OVAL_5_11 := $(shell oscap --version | grep -q "OVAL Version: 5.11.*"; echo $$?)

# Query environment - ask openscap if it can generate guide from DataStream
OPENSCAP_1_1_OR_LATER := $(shell oscap --version | grep -q -E "OpenSCAP command line tool \(oscap\) 1\.[1-9]+[0-9]*\."; echo $$?)

# Query environment - ask openscap if it has SVG support in guides
OPENSCAP_SVG := $(shell $(SHARED)/$(TRANS)/oscapsupportssvg.py; echo $$?)

# Common build targets - include the SSG logo into the XCCDF header
$(OUT)/guide.xml: $(SHARED)/$(TRANS)/includelogo.xslt $(IN)/guide.xml
ifeq ($(OPENSCAP_SVG), 0)
	xsltproc -o $(OUT)/guide.xml $(SHARED)/$(TRANS)/includelogo.xslt $(IN)/guide.xml
else
	cp $(IN)/guide.xml $(OUT)/
endif

# Common build targets - compose single shorthand XCCDF guide from all the sources
guide_xslt_deps= $(wildcard $(IN)/auxiliary/*.xml) $(wildcard $(IN)/profiles/*.xml) $(wildcard $(IN)/xccdf/**/*.xml)
$(OUT)/shorthand.xml: $(OUT)/guide.xml $(IN)/guide.xslt $(guide_xslt_deps)
	xsltproc --param withtest "$(INCLUDE_TEST_PROFILE)" -o $@ $(IN)/guide.xslt $(OUT)/guide.xml
	xmllint --format --output $@ $@

# Common build targets - convert shorthand format to an XCCDF stub
$(OUT)/xccdf-unlinked-unresolved.xml: $(OUT)/shorthand.xml $(TRANS)/shorthand2xccdf.xslt $(TRANS)/constants.xslt $(SHARED)/$(TRANS)/shared_constants.xslt
	xsltproc --stringparam ssg_version "$(SSG_MAJOR_VERSION).$(SSG_MINOR_VERSION)" -o $@ $(TRANS)/shorthand2xccdf.xslt $<

# Common build targets - improve the XCCDF stub - first resolve
$(OUT)/xccdf-unlinked-empty-groups.xml: $(OUT)/xccdf-unlinked-unresolved.xml
	oscap xccdf resolve -o $@ $<

# Common build targets - improve the XCCDF stub - second resolve
$(OUT)/xccdf-unlinked-empty-groups-unselected.xml: $(OUT)/xccdf-unlinked-empty-groups.xml $(SHARED)/$(UTILS)/unselect-empty-xccdf-groups.py
	$(SHARED)/$(UTILS)/unselect-empty-xccdf-groups.py --input $< --output $@

# Common build targets - improve the XCCDF stub - third resolve
$(OUT)/xccdf-unlinked-resolved.xml: $(OUT)/xccdf-unlinked-empty-groups-unselected.xml
	oscap xccdf resolve -o $@ $<

# Common build targets - create OCIL questionnaire stub for further processing
$(OUT)/ocil-unlinked.xml: $(OUT)/xccdf-unlinked-resolved.xml $(SHARED)/$(TRANS)/xccdf-create-ocil.xslt
	xsltproc -o $@ $(SHARED)/$(TRANS)/xccdf-create-ocil.xslt $<
	xmllint --format --output $@ $@

# Common build targets - an XCCDF that refers to OCIL document
$(OUT)/xccdf-unlinked-ocilrefs.xml: $(OUT)/xccdf-unlinked-resolved.xml $(OUT)/ocil-unlinked.xml $(SHARED)/$(TRANS)/xccdf-ocilcheck2ref.xslt $(SHARED)/$(TRANS)/shared_constants.xslt
	xsltproc -o $@ $(SHARED)/$(TRANS)/xccdf-ocilcheck2ref.xslt $<

# Common build targets - a catalogue of XCCDF remediations
bash_remediations_deps= $(wildcard $(IN)/remediations/bash/*.sh) $(wildcard $(SHARED_REMEDIATIONS)/*.sh)
$(OUT)/bash-remediations.xml: $(SHARED)/$(TRANS)/combineremediations.py $(bash_remediations_deps)
	# Make intermediate $(BUILD_REMEDIATIONS) directory to hold final list of remediation scripts for $(PROD)
	mkdir -p $(BUILD_REMEDIATIONS)
	# Search $(SHARED_REMEDIATIONS) and $(IN)/remediations directories to find all product specific remediation scripts,
	# which are regular files (not symlinks). Merge the final list into $(BUILD_REMEDIATIONS) directory
	find $(SHARED_REMEDIATIONS) $(IN)/remediations/bash -maxdepth 1 -type f -name *.sh -exec cp {} $(BUILD_REMEDIATIONS) ';'
	$(SHARED)/$(TRANS)/combineremediations.py $(PROD) $(BUILD_REMEDIATIONS) $(OUT)/bash-remediations.xml

# Common build targets - an XCCDF with remediations but not linked to OVAL yet
$(OUT)/xccdf-unlinked-withremediations.xml: $(OUT)/xccdf-unlinked-resolved.xml $(OUT)/xccdf-unlinked-ocilrefs.xml $(OUT)/bash-remediations.xml $(SHARED)/$(TRANS)/xccdf-addremediations.xslt
	xsltproc -stringparam remediations "$(realpath $(OUT)/bash-remediations.xml)" -o $@ $(SHARED)/$(TRANS)/xccdf-addremediations.xslt $<
	xmllint --format --output $@ $@

# Sanity check to verify if intended remediations got truly included into the benchmark being currently build
#
# In the case "$(OUT)/bash-remediations.xml" contains at least one "<fix rule" element and remediations got included
# properly, there needs to exist at least one "<fix system" element in the "xccdf-unlinked-withremediations.xml" file.
# If not "xsltproc" call in the $(OUT)/xccdf-unlinked-withremediations.xml target above didn't include the remediations
# (due to "warning: failed to load external entity" problem or some other error)
#
# Resign to continue building the benchmark in that case (since it would miss the remediations), print out an error
# message and exit with failure
#
$(OUT)/xccdf-unlinked-final.xml: $(OUT)/xccdf-unlinked-withremediations.xml $(OUT)/bash-remediations.xml
	@if grep -q '<fix rule' "$(OUT)/bash-remediations.xml"; \
	then \
	# At least one "<fix rule" element is included in "$(OUT)/bash-remediations.xml" \
	\
		if ! grep -q '<fix system' "$(OUT)/xccdf-unlinked-withremediations.xml"; \
		then \
		# But "xccdf-unlinked-withremediations.xml" doesn't contain "<fix system" element \
		\
			echo -e "\n\tError: Can't locate remediation (\"<fix system\") elements in \"$(OUT)/xccdf-unlinked-withremediations.xml\". Exiting!\n"; \
			exit 1; \
		fi \
	fi \
	# Rename "$(OUT)/xccdf-unlinked-withremediations.xml" to "$(OUT)/xccdf-unlinked-final.xml" \
	# (so subsequent targets can find the "$(OUT)/xccdf-unlinked-final.xml" prerequisite) \
	mv "$(OUT)/xccdf-unlinked-withremediations.xml" "$(OUT)/xccdf-unlinked-final.xml"
