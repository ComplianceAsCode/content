{{#
Insert general ocil clause to check if a package is installed, substituting the
correct package management software.

:param package: Name of package
:type package: str

#}}
{{% macro ocil_package(package) -%}}
  {{% if pkg_system is defined %}}
    {{%- if pkg_system == "rpm" -%}}
        {{{ rpm_ocil_package(package) }}}
    {{%- elif pkg_system == "dpkg" -%}}
        {{{ dpkg_ocil_package(package) }}}
    {{%- else -%}}
JINJA MACRO ERROR - Unknown package system '{{{ pkg_system }}}'.
    {{%- endif -%}}
  {{%- endif -%}}
{{%- endmacro %}}


{{#
Insert a complete OCIL block for a case when a package should be removed,
substituting the correct package management software.

:param package: Name of package
:type package: str

#}}
{{% macro complete_ocil_entry_package(package) -%}}
  {{% if pkg_system is defined %}}
    {{%- if pkg_system == "rpm" %}}
        {{{ rpm_complete_ocil_entry_package(package) }}}
    {{%- elif pkg_system == "dpkg" %}}
        {{{ dpkg_complete_ocil_entry_package(package) }}}
    {{%- else -%}}
ocil: |-
    JINJA MACRO ERROR - Unknown package system '{{{ pkg_system }}}'.
    {{%- endif -%}}
  {{%- endif -%}}
{{%- endmacro %}}


{{#
Inserts a rule description for a case when a package should be installed,
substituting the correct package management software.

:param package: Name of package
:type package: str

#}}
{{%- macro describe_package_install(package) -%}}
    The <code>{{{ package }}}</code> package can be installed with the following command:
    <pre>{{{ package_install(package) }}}</pre>
{{%- endmacro %}}


{{#
Outputs a command for installing a package, substituting the correct package
management software.

:param package: Name of package
:type package: str

#}}
{{%- macro package_install(package) -%}}
  {{% if pkg_manager is defined %}}
    {{%- if pkg_manager == "apt_get" -%}}
        {{{ apt_get_package_install(package) }}}
    {{%- elif pkg_manager == "zypper" -%}}
        {{{ zypper_package_install(package) }}}
    {{%- elif pkg_manager == "yum" -%}}
        {{{ yum_package_install(package) }}}
    {{%- elif pkg_manager == "dnf" -%}}
        {{{ dnf_package_install(package) }}}
    {{%- else -%}}
JINJA MACRO ERROR - Unknown package manager '{{{ pkg_manager }}}'.
    {{%- endif -%}}
  {{%- endif -%}}
{{%- endmacro %}}


{{#
Inserts a rule description for a case when a package should be removed,
substituting the correct package management software.

:param package: Name of package
:type package: str

#}}
{{%- macro describe_package_remove(package) -%}}
    The <code>{{{ package }}}</code> package can be removed with the following command:
    <pre>{{{ package_remove(package) }}}</pre>
{{%- endmacro %}}


{{#
Outputs a command for removing a package, substituting the correct package
management software.
#}}
{{%- macro package_remove(package) -%}}
  {{% if pkg_manager is defined %}}
    {{%- if pkg_manager == "apt_get" -%}}
        {{{ apt_get_package_remove(package) }}}
    {{%- elif pkg_manager == "zypper" -%}}
        {{{ zypper_package_remove(package) }}}
    {{%- elif pkg_manager == "yum" -%}}
        {{{ yum_package_remove(package) }}}
    {{%- elif pkg_manager == "dnf" -%}}
        {{{ dnf_package_remove(package) }}}
    {{%- else -%}}
JINJA MACRO ERROR - Unknown package manager '{{{ pkg_manager }}}'.
    {{%- endif -%}}
  {{%- endif -%}}
{{%- endmacro %}}


{{#
Inserts a rule description for a case when a service should be enabled,
substituting the correct init system.

:param service: Name of service
:type service: str

#}}
{{% macro describe_service_enable(service) -%}}
  {{% if init_system is defined %}}
    {{%- if init_system == "systemd" -%}}
        {{{ systemd_describe_service_enable(service) }}}
    {{%- elif init_system == "upstart" -%}}
        {{{ upstart_describe_service_enable(service) }}}
    {{%- else -%}}
JINJA MACRO ERROR - Unknown init system '{{{ init_system }}}'.
    {{%- endif -%}}
  {{%- endif -%}}
{{%- endmacro %}}


{{#
Inserts a rule description for a case when a service should be disabled,
substituting the correct init system.

:param service: Name of service
:type service: str

#}}
{{% macro describe_service_disable(service) -%}}
  {{% if init_system is defined %}}
    {{%- if init_system == "systemd" -%}}
        {{{ systemd_describe_service_disable(service) }}}
    {{%- elif init_system == "upstart" -%}}
        {{{ upstart_describe_service_disable(service) }}}
    {{%- else -%}}
JINJA MACRO ERROR - Unknown init system '{{{ init_system }}}'.
    {{%- endif -%}}
  {{%- endif -%}}
{{%- endmacro %}}


{{#
Inserts an OCIL for a case when a service should be enabled,
substituting the correct init system.

:param service: Name of service
:type service: str

#}}
{{% macro ocil_service_enabled(service) -%}}
  {{% if init_system is defined %}}
    {{%- if init_system == "systemd" -%}}
        {{{ systemd_ocil_service_enabled(service) }}}
    {{%- elif init_system == "upstart" -%}}
        {{{ upstart_ocil_service_enabled(service) }}}
    {{%- else -%}}
JINJA MACRO ERROR - Unknown init system '{{{ init_system }}}'.
    {{%- endif -%}}
  {{%- endif -%}}
{{%- endmacro %}}


{{#
Inserts an OCIL for a case when a service should be disabled,
substituting the correct init system.

:param service: Name of service
:type service: str

#}}
{{% macro ocil_service_disabled(service) -%}}
  {{% if init_system is defined %}}
    {{%- if init_system == "systemd" -%}}
        {{{ systemd_ocil_service_disabled(service) }}}
    {{%- elif init_system == "upstart" -%}}
        {{{ upstart_ocil_service_disabled(service) }}}
    {{%- else -%}}
JINJA MACRO ERROR - Unknown init system '{{{ init_system }}}'.
    {{%- endif -%}}
  {{%- endif -%}}
{{%- endmacro %}}


{{#
Inserts a rule description for a case when a socket should be enabled,
substituting the correct init system.

:param socket: Name of socket
:type socket: str

#}}
{{% macro describe_socket_enable(socket) -%}}
  {{% if init_system is defined %}}
    {{%- if init_system == "systemd" -%}}
        {{{ systemd_describe_socket_enable(socket) }}}
    {{%- elif init_system == "upstart" -%}}
        {{{ upstart_describe_socket_enable(socket) }}}
    {{%- else -%}}
JINJA MACRO ERROR - Unknown init system '{{{ init_system }}}'.
    {{%- endif -%}}
  {{%- endif -%}}
{{%- endmacro %}}


{{#
Inserts a rule description for a case when a socket should be disabled,
substituting the correct init system.

:param socket: Name of socket
:type socket: str

#}}
{{% macro describe_socket_disable(socket) -%}}
  {{% if init_system is defined %}}
    {{%- if init_system == "systemd" -%}}
        {{{ systemd_describe_socket_disable(socket) }}}
    {{%- elif init_system == "upstart" -%}}
        {{{ upstart_describe_socket_disable(socket) }}}
    {{%- else -%}}
JINJA MACRO ERROR - Unknown init system '{{{ init_system }}}'.
    {{%- endif -%}}
  {{%- endif -%}}
{{%- endmacro %}}


{{#
Inserts an OCIL for a case when a service and a corresponding socket should be
disabled, substituting the correct init system.

:param service: Name of service
:type service: str

#}}
{{% macro complete_ocil_entry_socket_and_service_disabled(service) -%}}
  {{% if init_system is defined %}}
    {{%- if init_system == "systemd" -%}}
        {{{ systemd_complete_ocil_entry_socket_and_service_disabled(service) }}}
    {{%- elif init_system == "upstart" -%}}
        {{{ upstart_complete_ocil_entry_socket_and_service_disabled(service) }}}
    {{%- else -%}}
ocil: |-
    JINJA MACRO ERROR - Unknown init system '{{{ init_system }}}'.
    {{%- endif -%}}
  {{%- endif -%}}
{{%- endmacro %}}


{{#
Inserts a rule description for a case when a timer should be enabled,
substituting the correct init system.

:param timer: Name of timer
:type timer: str

#}}
{{% macro describe_timer_enable(timer) -%}}
  {{% if init_system is defined %}}
    {{%- if init_system == "systemd" -%}}
        {{{ systemd_describe_timer_enable(timer) }}}
    {{%- else -%}}
JINJA MACRO ERROR - Unknown init system '{{{ init_system }}}'.
    {{%- endif -%}}
  {{%- endif -%}}
{{%- endmacro %}}


{{#
Inserts an OCIL for a case when a timer should be enabled,
substituting the correct init system.

:param timer: Name of timer
:type timer: str

#}}
{{% macro ocil_timer_enabled(timer) -%}}
  {{% if init_system is defined %}}
    {{%- if init_system == "systemd" -%}}
        {{{ systemd_ocil_timer_enabled(timer) }}}
    {{%- else -%}}
JINJA MACRO ERROR - Unknown init system '{{{ init_system }}}'.
    {{%- endif -%}}
  {{%- endif -%}}
{{%- endmacro %}}


{{#
Generates the :code:`<affected>` tag for OVAL check using correct product platforms.

:param products: Name of products
:type products: str
#}}
{{%- macro oval_affected(products) %}}
<affected family="unix">
{{{ prodtype_to_platform(products)|indent(2) }}}
</affected>
{{%- endmacro %}}
