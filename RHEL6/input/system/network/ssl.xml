<Group id="network_ssl">
<title>Secure Sockets Layer Support</title>
<description>
The Secure Sockets Layer (SSL) protocol provides encrypted and authenticated
network communications, and many network services include support for it. Using
SSL is recommended, especially to avoid any plaintext transmission of sensitive
data, even over a local network. The SSL implementation included with the
system is called OpenSSL. Recent implementations of SSL may also be referred to
as Transport Layer Security (TLS).  SSL uses public key cryptography to provide
authentication and encryption.
<br /><br />
Public key cryptography involves two keys, one called the public key and the
other called the private key. These keys are mathematically related such that
data encrypted with one key can only be decrypted by the other, and vice versa.
As their names suggest, public keys can be distributed to anyone while a
private key must remain known only to its owner.  SSL uses certificates, which
are files that hold cryptographic data: a public key, and a signature of that
public key. In SSL authentication, a server presents a client with its
certificate as a means of demonstrating that it is who it claims it is.

<br /><br />
If everything goes correctly, the client can verify the server's certificate by
determining that the signature inside the certificate could only have been
generated by a third party whom the client trusts.  This third party is called
a Certificate Authority (CA). Each client system should also have certificates
from trusted CAs, and the client uses these CA certificates to verify the
authenticity of the server's certificate. After authenticating a server using
its certificate and a CA certificate, SSL provides encryption by using the
server certificate to securely negotiate a shared secret key.

<br /><br />
If your server must communicate using SSL with systems that might not be able
to securely accept a new CA certificate prior to any SSL communication, then
paying an established CA (whose certificates your clients already have) to sign
your server certificates is recommended. The steps for doing this vary by
vendor. Once the signed certificates have been obtained, configuration of the
services is the same whether they were purchased from a vendor or signed by
your own CA.

<br /><br />
For setting up an internal network and encrypting local traffic, creating your
own CA to sign SSL certificates can be appropriate. The major steps in this
process are:

<ol>
<li>Create a CA to sign certificates</li>
<li>Create SSL certificates for servers using that CA</li>
<li>Enable client support by distributing the CA's certificate</li>
</ol>
</description>


<ref disa="1130,1131,1127,1128,1129,187" />

<Group id="network_ssl_create_ca">
<title>Create a CA to Sign Certificates</title>
<description>The following instructions apply to OpenSSL since it is included
with the system, but creating a CA is possible with any standards-compliant SSL
toolkit. The security of certificates depends on the security of the CA that
signed them, so performing these steps on a secure machine is critical. The
system used as a CA should be physically secure and not connected to any
network. It should receive any certificate signing requests (CSRs) via
removable media and output certificates onto removable media.
<br /><br />
The script <tt>/etc/pki/tls/misc/CA</tt> is included to assist in the process
of setting up a CA. This script uses many settings in
<tt>/etc/pki/tls/openssl.cnf</tt>. The settings in this file can be changed to
suit your needs and allow easier selection of default settings, particularly in
the <tt>[req distinguished name]</tt> section.
<br /><br />
To create the CA:
<pre># cd /etc/pki/tls/misc
# ./CA -newca</pre>
When prompted, press enter to create a new CA key with the default name <tt>cakey.pem</tt>.
When prompted, enter a password that will protect the private key, then enter the same password
again to verify it.
<br /><br />
At the prompts, fill out as much of the CA information as is relevant for your site. You must specify
a common name, or generation of the CA certificate will fail.
<br /><br />
Next, you will be prompted for the password, so that the script can re-open the private key in order
to write the certificate.
<br /><br />
This step performs the following actions:
<ul>
<li>creates the directory <tt>/etc/pki/CA</tt> (by default), which contains files necessary for the operation of a
certificate authority. These are:
<ul>
<li><tt>serial</tt>, which contains the current serial number for certificates signed by the CA</li>
<li><tt>index.txt</tt>, which is a text database file that contains information about certificates signed</li>
<li><tt>crl</tt>, which is a directory for holding revoked certificates</li>
<li><tt>private</tt>, a directory which stores the CA's private key</li>
</ul></li>
<li>creates a public-private key pair for the CA in the file <tt>/etc/pki/CA/private/cakey.pem</tt>. The private key
must be kept private in order to ensure the security of the certificates the CA will later sign.</li>
<li>signs the public key (using the corresponding private key, in a process called self-signing) to create the CA
certificate, which is then stored in <tt>/etc/pki/CA/cacert.pem</tt>.</li>
</ul>
When the CA later signs a server certificate using its private key, it means that it is vouching for the authenticity
of that server. A client can then use the CA's certificate (which contains its public key) to verify the authenticity
of the server certificate.
</description>
<!--<ident cce="TODO" />-->
<!--TODO:MANUAL<oval id="network_ssl_create_ca" />-->
<ref nist="SC-12, SC-13" />  
</Group>

<Group id="network_ssl_create_ssl_certs">
<title>Create SSL Certificates for Servers</title>
<description>Creating an SSL certificate for a server involves the following steps:
<ol>
<li>A public-private key pair for the server must be generated.</li>
<li>A certificate signing request (CSR) must be created from the key pair.</li>
<li>The CSR must be signed by a certificate authority (CA) to create the server certificate. If a CA has been
set up as described earlier, it can sign the CSR.</li>
<li>The server certificate and keys must be installed on the server.</li>
</ol>
Instructions on how to generate and sign SSL certificates are provided for the following common services can be found in the applicable sections of this guide:
<ul>
<li><a href="#item-postfix_configure_ssl_certs">Postfix</a></li>
<li>Dovecot</li>
<li>Apache</li>
</ul>
</description>
<!--<ident cce="TODO" />-->
<!--TODO:MANUAL<oval id="network_ssl_create_ssl_certs" />-->
<ref nist="CM-6, SC-12, SC-13" />
</Group>

<Group id="network_ssl_enable_client_support">
<title>Enable Client Support</title>
<description>The system ships with certificates from well-known commercial CAs. If your server certificates were signed by one of these established CAs, then this step is not necessary since the clients should include the CA certificate already.
If your servers use certificates signed by your own CA, some user applications will warn that the server's certificate
cannot be verified because the CA is not recognized. Other applications may simply fail to accept the certificate
and refuse to operate, or continue operating without ever having properly verified the server certificate.
To avoid this warning, and properly authenticate the servers, your CA certificate must be exported to every
application on every client system that will be connecting to an SSL-enabled server.</description>
<!--<ident cce="TODO" />-->
<!--TODO:MANUAL<oval id="network_ssl_enable_client_support" />-->
<ref nist="AC-3, AC-17, CM-6, SC-12, SC-13" disa="185" />
</Group>

<Group id="network_ssl_add_ca_firefox">
<title>Adding a Trusted CA for Firefox</title>
<description>To import a new CA certificate into Firefox:
<ol>
<li>Launch Firefox and choose Preferences from the menu.</li>
<li>Click the Advanced button.</li>
<li>Select the Encryption tab.</li>
<li>Click the View Certificates button.</li>
<li>Select the Authorities tab.</li>
<li>Click the Import button at the bottom of the screen.</li>
<li>Navigate to the CA certificate and import it. Determine whether the CA should be used to identify
web sites, e-mail users, and software developers and trust it for each accordingly.</li>
</ol>
</description>
<!--<ident cce="TODO" />-->
<!--TODO:MANUAL<oval id="network_ssl_add_ca_firefox" />-->
<ref nist="AC-3, AC-17, CM-6, SC-12, SC-13" />
</Group>

<Group id="network_ssl_add_ca_thunderbird">
<title>Adding a Trusted CA for Thunderbird</title>
<description>To import a new CA certificate into Thunderbird:
<ol>
<li>Launch Thunderbird and choose Preferences from the menu.</li>
<li>Click the Advanced button.</li>
<li>Select the Encryption tab.</li>
<li>Click the View Certificates button.</li>
<li>Select the Authorities tab.</li>
<li>Click the Import button at the bottom of the screen.</li>
<li>Navigate to the CA certificate and import it. Determine whether the CA should be used to identify
web sites, e-mail users, and software developers and trust it for each accordingly.</li>
</ol>
</description>
<!--<ident cce="TODO" />-->
<!--TODO:MANUAL<oval id="network_ssl_add_ca_thunderbird" />-->
<ref nist="AC-3, AC-17, CM-6, SC-12, SC-13" />
</Group>

<Group id="network_ssl_add_ca_evolution">
<title>Adding a Trusted CA for Evolution</title>
<description>To import a new CA certificate into Evolution:
<ol>
<li>Launch Evolution and choose Preferences from the menu.</li>
<li>Click the Advanced button.</li>
<li>Select the Encryption tab.</li>
<li>Click the View Certificates button.</li>
<li>Select the Authorities tab.</li>
<li>Click the Import button at the bottom of the screen.</li>
<li>Navigate to the CA certificate and import it. Determine whether the CA should be used to identify
web sites, e-mail users, and software developers and trust it for each accordingly.</li>
</ol>
</description>
<!--<ident cce="TODO" />-->
<!--TODO:MANUAL<oval id="network_ssl_add_ca_evolution" />-->
<ref nist="AC-3, AC-17, CM-6, SC-12, SC-13" />
</Group>

<Group id="network_ssl_remove_certs">
<title>Remove Certificate Authorities, if Appropriate</title>
<description>Survey the certificate authorities trusted by Firefox, Thunderbird, Evolution, or other network clients. The list of certificate authorities for each program can be found via GUI, as described in the previous sections.
Remove the certificate authorities which are not appropriate for your network connectivity needs.
This may only make sense for some environments, and may create operational problems for a general purpose
Internet-connected system.
</description>
<!--<ident cce="TODO" />-->
<!--TODO:MANUAL<oval id="network_ssl_remove_certs" />-->
<ref nist="AC-3, AC-17, CM-6, SC-12, SC-13" />
</Group>

</Group><!--<Group id="network_ssl">-->
