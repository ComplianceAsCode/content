<Group id="root_logins">
<title>Restrict Root Logins</title>
<description>
Direct root logins should be allowed only for emergency use.
In normal situations, the administrator should access the system via a unique unprivileged account, and then use <tt>su</tt> or <tt>sudo</tt> to execute privileged commands.
Discouraging administrators from accessing the root account directly ensures an audit trail in organizations with multiple administrators.
Locking down the channels through which root can connect directly also reduces opportunities for password-guessing against the root account.
The <tt>login</tt> program uses the file <tt>/etc/securetty</tt> to determine which interfaces should allow root logins.
<br/>
The virtual devices <tt>/dev/console</tt> and <tt>/dev/tty*</tt> represent the system consoles (accessible via the Ctrl-Alt-F1 through Ctrl-Alt-F6 keyboard sequences on a default installation).
The default securetty file also contains <tt>/dev/vc/*</tt>.
These are likely to be deprecated in most environments, but may be retained for compatibility.
Furthermore, <tt>/dev/hvc*</tt> represent virtio-serial consoles, <tt>/dev/hvsi*</tt> IBM pSeries serial consoles, and finally <tt>/dev/xvc0</tt> Xen virtual console.
Root should also be prohibited from connecting via network protocols.
Other sections of this document include guidance describing how to prevent root from logging in via SSH.
</description>

<Rule id="no_direct_root_logins" severity="medium">
<title>Direct root Logins Not Allowed</title>
<description>
To further limit access to the <tt>root</tt> account, administrators can disable root logins at the console by editing the <tt>/etc/securetty</tt> file.
This file lists all devices the root user is allowed to login to.
If the file does not exist at all, the root user can login through any communication device on the system, whether via the console or via a raw network interface.
This is dangerous as user can login to his machine as root via Telnet, which sends the password in plain text over the network.
By default, WRLinux's <tt>/etc/securetty</tt> file only allows the root user to login at the console physically attached to the machine.
To prevent root from logging in, remove the contents of this file.
To prevent direct root logins, remove the contents of this file by typing the following command:
<pre>echo > /etc/securetty</pre>
</description>
<ocil clause="the /etc/securetty file is not empty">
To ensure root may not directly login to the system over physical consoles, run the following command:
<pre>cat /etc/securetty</pre>
If any output is returned, this is a finding.
</ocil>
<rationale>
Disabling direct root logins ensures proper accountability and multifactor authentication to privileged accounts.
Users will first login, then escalate to privileged (root) access via su / sudo.
This scenario is nowadays required by security standards.
</rationale>
<oval id="no_direct_root_logins" />
<ref nist="IA-2(1)" />
</Rule>

<Rule id="accounts_no_uid_except_zero" severity="medium">
<title>Only Root Has UID 0</title>
<description>
If any account other than root has a UID of 0, this misconfiguration should be investigated and the accounts other than root should be removed or have their UID changed.
</description>
<ocil clause="any account other than root has a UID of 0">
To list all password file entries for accounts with UID 0, run the following command:
<pre># awk -F: '($3 == "0") {print}' /etc/passwd</pre>
This should print only one line, for the user root.
</ocil>
<rationale>
An account has root authority if it has a UID of 0.
Multiple accounts with a UID of 0 afford greater opportunity for potential intruders to guess or decrypt the password for a privileged account.
Proper configuration of sudo is recommended to afford multiple system administrators access to root privileges in an accountable manner.
</rationale>
<oval id="accounts_no_uid_except_zero" />
<ref nist="AC-6,IA-2(1)" disa="366" />
</Rule>

</Group>
