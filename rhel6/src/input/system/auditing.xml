<Group id="auditing">
<title>System Accounting with <tt>auditd</tt></title>
<description>The audit service provides substantial capabilities
for recording system activities. By default, the service audits about
SELinux AVC denials and certain types of security-relevant events
such as system logins, account modifications, and authentication
events performed by programs such as sudo.
<br /><br />
Under its default configuration, <tt>auditd</tt> has modest disk space
requirements, and should not noticeably impact system performance.
The audit service, in its default configuration, is strongly
recommended for all sites, regardless of whether they are running
SELinux.
<br /><br />
Government networks often have substantial auditing
requirements and <tt>auditd</tt> can be configured to meet these
requirements.
<br /><br />
Example requirements include:
<br /><br />
<ul>
<li>Ensure Auditing is Configured to Collect Certain System Events
<ul>
<li>Information on the Use of Print Command (unsuccessful and successful)</li>
<li>Startup and Shutdown Events (unsuccessful and successful)</li>
</ul></li>
<li>Ensure the auditing software can record the following for each
audit event:
<ul>
<li>Date and time of the event</li>
<li>Userid that initiated the event</li>
<li>Type of event</li>
<li>Success or failure of the event</li>
<li>For I&amp;A events, the origin of the request (e.g., terminal ID)</li>
<li>For events that introduce an object into a user’s address space, and
for object deletion events, the name of the object, and in MLS systems,
the objects security level.</li>
</ul>
</li>
<li>Ensure files are backed up no less than weekly onto a different
system than the system being audited or backup media.</li>
<li>Ensure old logs are closed out and new audit logs are started
daily</li>
<li>Ensure the configuration is immutable. With the <tt>-e 2</tt> setting a
reboot will be required to change any audit rules.</li>
<li>Ensure that the audit data files have permissions of 640, or
more restrictive.</li>
</ul>

<br /><br />
By default, <tt>auditd</tt> logs only SELinux denials, which are
helpful for debugging SELinux and discovering intrusion attempts,
and certain types of security events, such as modifications to user
accounts (<tt>useradd</tt>, <tt>passwd</tt>, etc), login events, and
calls to <tt>sudo</tt>.
<br /><br />
Data is stored in <tt>/var/log/audit/audit.log</tt>. By default,
<tt>auditd</tt> rotates 4 logs by size (5MB), retaining a maximum of 20MB of
data in total, and refuses to write entries when the disk is too
full. This minimizes the risk of audit data filling its partition
and impacting other services. However, it is possible to lose audit
data if the system is busy.
</description>
<!-- <ident cci="CCI-000120" /> -->
<!-- <ident cci="CCI-000166" /> -->
<!-- <ident cci="CCI-001338" /> -->
<!-- <ident cci="CCI-001339" /> -->

<Rule id="enable_auditd_service">
<title>Enable auditd Service</title>
<description>Ensure that the <tt>auditd</tt> service is enabled (this is the
default):
<pre># chkconfig auditd on</pre>
</description>
<rationale>
</rationale>
<ident cce="4292-9" />
<oval id="service_auditd_enabled" />
<ref nist="CM-6, CM-7" />
<ident cci="CCI-000169" />
<ident cci="CCI-000172" />
<ident cci="CCI-000174" />
<ident cci="CCI-001353" />
<ident cci="CCI-001462" />
<ident cci="CCI-001487" />
<ident cci="CCI-001115" />
<ident cci="CCI-001454" />
<ident cci="CCI-000154" />
</Rule>

<Rule id="enable_auditd_bootloader">
<title>Enable Auditing for Processes Which Start Prior to the Audit Daemon</title>
<description>To ensure that all processes can be audited, even
those which start prior to the audit daemon, add the argument
<tt>audit=1</tt> to the kernel line in <tt>/etc/grub.conf</tt>, in the manner below:
<pre>kernel /vmlinuz-version ro vga=ext root=/dev/VolGroup00/LogVol00 rhgb quiet audit=1</pre>
</description>
<rationale>
Each process on the system carries an "auditable" ﬂag which
indicates whether its activities can be audited. Although <tt>auditd</tt>
takes care of enabling this for all processes which launch after it
does, adding the kernel argument ensures that it is set for every
process during boot.
</rationale>
<ident cce="15026-8" />
<oval id="bootloader_audit_argument" />
<ref nist="AU-2" />
<ident cci="CCI-001464" />
</Rule>

<Group id="auditd_configure_rules">
<title>Configure <tt>auditd</tt> Rules for Comprehensive Auditing</title>
<description>The <tt>auditd</tt> program can perform comprehensive
monitoring of system activity. This section describes rec- ommended
configuration settings for comprehensive auditing, but a full
description of the auditing system’s capabilities is beyond the
scope of this guide. The mailing list linux-audit@redhat.com may be
a good source of further information.
<br /><br />
The audit subsystem supports extensive collection of events, including:
<br />
<ul>
<li>Tracing of arbitrary system calls (identified by name or number)
on entry or exit.</li>
<li>Filtering by PID, UID, call success, system call argument (with
some limitations), etc.</li>
<li>Monitoring of specific files for modifications to the file’s
contents or metadata.</li>
</ul>
<br />
Auditing rules at startup are controlled by the file <tt>/etc/audit/audit.rules</tt>.
Add rules to it to meet the auditing requirements for your organization.
Each line in <tt>/etc/audit/audit.rules</tt> represents a series of arguments
that can be passed to <tt>auditctl</tt> and can be individually tested
during runtime. See documentation in <tt>/usr/share/doc/audit-VERSION</tt> and
in the related man pages for more details.
<br /><br />
If copying any example audit rulesets from <tt>/usr/share/doc/audit-VERSION</tt>,
be sure to comment out the
lines containing <tt>arch=</tt> which are not appropriate for your system’s
architecture. Then review and understand the following rules,
ensuring rules are activated as needed for the appropriate
architecture.
<br /><br />
After reviewing all the rules, reading the following sections, and
editing as needed, activate the new rules:
<pre># service auditd restart</pre>
</description>
<ident cci="CCI-000171" />
<ident cci="CCI-000172" />
<ident cci="CCI-001571" />
<ident cci="CCI-001487" />
<ident cci="CCI-001115" />
<ident cci="CCI-001454" />

<Rule id="audit_time_rules">
<title>Records Events that Modify Date and Time Information</title>
<description>On a 32-bit system, add the following to <tt>/etc/audit/audit.rules</tt>:
<pre># audit_time_rules
-a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -S clock_settime -k audit_time_rules
-w /etc/localtime -p wa -k audit_time_rules</pre>
On a 64-bit system, add the following to <tt>/etc/audit/audit.rules</tt> (note the lack
of <tt>-S stime</tt>, which is not relevant for a 64-bit installation):
<pre># audit_time_rules
-a always,exit -F arch=b64 -S adjtimex -S settimeofday -S clock_settime -k audit_time_rules
-w /etc/localtime -p wa -k audit_time_rules</pre>
</description>
<rationale>Arbitrary changes to the system time can be used to obfuscate nefarious
activites in log files as well as to confuse network services that are highly dependent
upon an accurate system time (such as sshd). All changes to the system time should be audited.</rationale>
<ident cce="14051-7" />
<oval id="audit_rules_record_timechange" />
<ref nist="AU-2(a)" />
</Rule>

<Rule id="audit_account_changes">
<title>Record Events that Modify User/Group Information</title>
<description>Add the following to <tt>/etc/audit/audit.rules</tt>, in order
to capture events that modify account changes:
<pre># audit_account_changes
-w /etc/group -p wa -k audit_account_changes
-w /etc/passwd -p wa -k audit_account_changes
-w /etc/gshadow -p wa -k audit_account_changes
-w /etc/shadow -p wa -k audit_account_changes
-w /etc/security/opasswd -p wa -k audit_account_changes</pre>
</description>
<rationale>In addition to auditing new user and group accounts, these watches will alert the system administrator(s) to any modifications. It is recommended that any unexpected users, groups, or modifications be investigated for legitimacy.</rationale>
<ident cce="14829-6" />
<oval id="audit_rules_usergroup_modification" />
<ref nist="AU-2(a)" />
<ident cci="CCI-001403" />
<ident cci="CCI-001404" />
<ident cci="CCI-001405" />
<ident cci="CCI-000018" />
</Rule>


<Rule id="audit_network_modifications">
<title>Record Events that Modify the System’s Network Environment</title>
<description>Add the following to <tt>/etc/audit/audit.rules</tt>, setting
ARCH to either b32 or b64 as appropriate for your system:
<pre># audit_network_modifications
-a exit,always -F arch=ARCH -S sethostname -S setdomainname -k audit_network_modifications
-w /etc/issue -p wa -k audit_network_modifications
-w /etc/issue.net -p wa -k audit_network_modifications
-w /etc/hosts -p wa -k audit_network_modifications
-w /etc/sysconfig/network -p wa -k audit_network_modifications</pre>
</description>
<rationale>The network environment should not be modified by anything other than
administrator action. Any change to network parameters should be audited.</rationale>
<ident cce="14816-3" />
<oval id="audit_rules_networkconfig_modification" />
<ref nist="AU-2(a)" />
</Rule>


<Rule id="audit_mac_changes">
<title>Record Events that Modify the System’s Mandatory Access
Controls</title>
<description>Add the following to <tt>/etc/audit/audit.rules</tt>:
<pre>-w /etc/selinux/ -p wa -k MAC-policy</pre>
</description>
<!-- TODO add info for selinux system calls which load new policy? -->
<rationale>The system's mandatory access policy (SELinux) should not be arbitrarily changed by
anything other than administrator action. All changes to MAC policy should be audited.</rationale>
<ident cce="14821-3" />
<oval id="audit_rules_mac_modification" />
<ref nist="AU-2" />
</Rule>


<Rule id="audit_dac_actions">
<title>Ensure <tt>auditd</tt> Collects Discretionary Access Control
Permission Modification Events</title>
<description>At a minimum the audit system should collect file
permission changes for all users and root. Add the following to
<tt>/etc/audit/audit.rules</tt>, setting ARCH to either b32 or b64 as
appropriate for your system:
<pre>-a always,exit -F arch=ARCH -S chmod -S fchmod -S fchmodat \
    -F auid&gt;=500 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=ARCH -S chown -S fchown -S fchownat \
    -S lchown -F auid&gt;=500 -F auid!=4294967295 -k perm_mod
-a always,exit -F arch=ARCH -S setxattr -S lsetxattr \
    -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr \
    -F auid&gt;=500 -F auid!=4294967295 -k perm_mod</pre>
</description>
<rationale>The changing of file permissions could indicate that a user is attempting to
gain access to information that would otherwise be disallowed. Auditing DAC modifications
can facilitate the identification of patterns of abuse amoung both authorized and
unauthorized users.</rationale>
<ident cce="14058-2" />
<oval id="audit_rules_dac_modification" />
<ref nist="AU-2" />
</Rule>

<Rule id="audit_file_access">
<title>Ensure <tt>auditd</tt> Collects Unauthorized Access Attempts to Files (unsuccessful)</title>
<description>At a minimum the audit system should collect
unauthorized file accesses for all users and root. Add the following
to <tt>/etc/audit/audit.rules</tt>, setting ARCH to either b32 or b64 as
appropriate for your system:
<pre>-a always,exit -F arch=ARCH -S creat -S open -S openat -S truncate \
    -S ftruncate -F exit=-EACCES -F auid&gt;=500 -F auid!=4294967295 -k access
-a always,exit -F arch=ARCH -S creat -S open -S openat -S truncate \
    -S ftruncate -F exit=-EPERM -F auid&gt;=500 -F auid!=4294967295 -k access</pre>
</description>
<rationale>Unsuccessful attempts to access files could be an indicator of malicious activity on a system. Auditing
these events could serve as evidence of potential system compromise.</rationale>
<ident cce="14917-9" />
<oval id="audit_rules_unsuccessful_file_modification" />
<ref nist="AU-2" />
</Rule>

<Rule id="audit_privileged_commands">
<title>Ensure <tt>auditd</tt> Collects Information on the Use of Privileged Commands</title>
<description>At a minimum the audit system should collect the
execution of privileged commands for all users and root. Add the
following to <tt>/etc/audit/audit.rules</tt>:
<pre>-a always,exit -F path=/bin/ping -F perm=x -F auid&gt;=500 -F auid!=4294967295 -k privileged</pre>
</description>

<ident cce="14296-8" />
<oval id="audit_rules_privileged_commands" />
<ref nist="AU-2" />
</Rule>

<Rule id="audit_media_exports">
<title>Ensure <tt>auditd</tt> Collects Information on Exporting to Media
(successful)</title>
<description>At a minimum the audit system should collect media
exportation events for all users and root. Add the following to
<tt>/etc/audit/audit.rules</tt>, setting ARCH to either b32 or b64 as
appropriate for your system:
<pre>-a always,exit -F arch=ARCH -S mount -F auid&gt;=500 -F auid!=4294967295 -k export</pre>
</description>
<rationale>The unauthorized exportation of data to external media could result in an information leak
where classified information, Privacy Act information, and intellectual property could be lost. An audit
trail should be created each time a filesystem is mounted to help identify and guard against information
loss.</rationale>
<ident cce="14569-8" />
<oval id="audit_rules_media_export" />
<ref nist="AU-2" />
</Rule>

<Rule id="audit_file_deletions">
<title>Ensure <tt>auditd</tt> Collects Files Deletion Events by User</title>
<description>At a minimum the audit system should collect file
deletion events for all users and root. Add the following to
<tt>/etc/audit/audit.rules</tt>, setting ARCH to either b32 or b64 as
appropriate for your system:
<pre>-a always,exit -F arch=ARCH -S unlink -S unlinkat -S rename -S renameat \
    -F auid&gt;=500 -F auid!=4294967295 -k delete</pre>
</description>
<rationale>Auditing file deletions will create an audit trail for files that are removed
from the system. The audit trail could aid in system troubleshooting as well as detecting
malicious processes that attempt to delete log files to conceal their presence.</rationale>
<ident cce="14820-5" />
<oval id="audit_rules_file_deletion_events" />
<ref nist="AU-2" />
</Rule>

<Rule id="audit_sysadmin_actions">
<title>Ensure <tt>auditd</tt> Collects System Administrator Actions</title>
<description>At a minimum the audit system should collect
administrator actions for all users and root. Add the following to
<tt>/etc/audit/audit.rules</tt>:
<pre>-w /etc/sudoers -p wa -k actions</pre>
</description>
<rationale>The actions taken by system administrators should be audited to keep a record
of what was executed on the system as well as for accountability purposes.</rationale>
<ident cce="14824-7" />
<oval id="audit_rules_sysadmin_actions" />
<ref nist="AU-2" />
</Rule>

<Rule id="audit_kernel_module_loading">
<title>Ensure <tt>auditd</tt> Collects Information on Kernel Module Loading
and Unloading</title>
<description>Add the following to <tt>/etc/audit/audit.rules</tt> in order
to capture kernel module loading and unloading events:
<pre>-w /sbin/insmod -p x -k modules
-w /sbin/rmmod -p x -k modules
-w /sbin/modprobe -p x -k modules
-a always,exit -S init_module -S delete_module -k modules</pre>
</description>
<rationale>The addition/removal of kernel modules can be used to alter the behavior of
the kernel and potentially introduce malicious code into kernel space. It is important
to have an audit trail of modules that have been introduced into the kernel.</rationale>
<ident cce="14688-6" />
<oval id="audit_rules_kernel_module_loading" />
<ref nist="AU-2" />
</Rule>

<Rule id="audit_config_immutable">
<title>Make the <tt>auditd</tt> Configuration Immutable</title>
<description>Add the following to <tt>/etc/audit/audit.rules</tt> in order
to make the configuration immutable:
<pre>-e 2</pre>
With this setting, a reboot will be required to change any
audit rules.</description>
<rationale>Making the audit configuration immutable prevents the accidential as
well as malicious modification of the audit rules.</rationale>
<ident cce="14692-8" />
<oval id="audit_rules_immutable" />
<ref nist="AU-2" />
</Rule>
</Group>
</Group>
