<Group id="auditing">
<title>System Accounting with <tt>auditd</tt></title>
<description>The audit service provides substantial capabilities
for recording system activities. By default, the service audits about
SELinux AVC denials and certain types of security-relevant events
such as system logins, account modifications, and authentication
events performed by programs such as sudo.
<br /><br />
Under its default configuration, <tt>auditd</tt> has modest disk space
requirements, and should not noticeably impact system performance.
<br /><br />
Government networks often have substantial auditing
requirements and <tt>auditd</tt> can be configured to meet these
requirements.
<br /><br />
Example requirements include:
<br /><br />

<ul><li>
Ensure Auditing is Configured to Collect Certain System Events
<ul>
<li>Information on the Use of Print Command (unsuccessful and successful)</li>
<li>Startup and Shutdown Events (unsuccessful and successful)</li>
<li>System Administrator Actions</li>
</ul>
</li></ul>

<ul><li>
Ensure the auditing software can record the following for each
audit event:
<ul>
<li>Date and time of the event</li>
<li>Userid that initiated the event</li>
<li>Type of event</li>
<li>Success or failure of the event</li>
<li>For I&amp;A events, the origin of the request (e.g., terminal ID)</li>
<li>For events that introduce an object into a user’s address space, and
for object deletion events, the name of the object, and in MLS systems,
the objects security level.</li>
</ul></li>
</ul>

<br /><br />
By default, <tt>auditd</tt> logs only SELinux denials, which are
helpful for debugging SELinux and discovering intrusion attempts,
and certain types of security events, such as modifications to user
accounts (<tt>useradd</tt>, <tt>passwd</tt>, etc), login events, and
calls to <tt>sudo</tt>.
<br /><br />
The audit system stores data in <tt>/var/log/audit/audit.log</tt>. By default,
<tt>auditd</tt> rotates 5 logs by size (6MB), retaining a maximum of 30MB of
data in total, and refuses to write entries when the disk is too
full. This minimizes the risk of audit data filling its partition
and impacting other services. This also minimizes the risk of the audit
daemon temporarily disabling the system if it cannot write audit log (which
it can be configured to do). 
</description>
<ref disa="120,135,136,166,1338,1339,157" />

<Rule id="enable_auditd_service">
<title>Enable auditd Service</title>
<description>The <tt>auditd</tt> service is an essential userspace component of
the Linux Auditing System, as it is responsible for writing audit records to
disk.
<service-enable-macro service="auditd" />
</description>
<rationale>Ensuring that the <tt>auditd</tt> service is active ensures that
audit records generated by the kernel can be written to disk, or that appropriate
actions will be taken if other obstacles exist.
</rationale>
<ident cce="4292-9" />
<oval id="service_auditd_enabled" />
<ref nist="CM-6, CM-7" disa="169,172,174,1353,1462,1487,1115,1454,154,067,158,831,1123,1190,1312,1263" />
</Rule>

<Rule id="enable_auditd_bootloader">
<title>Enable Auditing for Processes Which Start Prior to the Audit Daemon</title>
<description>To ensure that all processes can be audited, even
those which start prior to the audit daemon, add the argument
<tt>audit=1</tt> to the kernel line in <tt>/etc/grub.conf</tt>, in the manner below:
<pre>kernel /vmlinuz-version ro vga=ext root=/dev/VolGroup00/LogVol00 rhgb quiet audit=1</pre>
</description>
<rationale>
Each process on the system carries an "auditable" ﬂag which
indicates whether its activities can be audited. Although <tt>auditd</tt>
takes care of enabling this for all processes which launch after it
does, adding the kernel argument ensures that it is set for every
process during boot.
</rationale>
<ident cce="15026-8" />
<oval id="bootloader_audit_argument" />
<ref nist="AU-2" disa="1464" />
</Rule>

<Group id="configure_auditd_data_retention">
<title> Configure <tt>auditd</tt> Data Retention</title>
<description>
By default, <tt>auditd</tt> retains 5 log files of size 6MB apiece. For a busy
system or a system which is thoroughly auditing system activity, this may be
 insuffcient. The log file size needed will depend heavily on what types
of events are being audited. First configure auditing to log all the events of
interest. Then monitor the log size manually for awhile to determine what file
size will allow you to keep the required data for the correct time period.

Using a dedicated partition for <tt>/var/log/audit</tt> prevents the
<tt>auditd</tt> logs from disrupting system functionality if they fill, and,
more importantly, prevents other activity in <tt>/var</tt> from filling the
partition and stopping the audit trail. (The audit logs are size-limited and
therefore unlikely to grow without bound unless configured to do so.) Some
machines may have requirements that no actions occur which cannot be audited.
If this is the case, then <tt>auditd</tt> can be configured to halt the machine
if it runs out of space. <b>Note:</b> Since older logs are rotated,
configuring <tt>auditd</tt> this way does not prevent older logs from being
rotated away before they can be viewed.

<i>If your system is configured to halt when logging cannot be performed, make
sure this can never happen under normal circumstances! Ensure that
<tt>/var/log/audit</tt> is on its own partition, and that this partition is
larger than the maximum amount of data <tt>auditd</tt> will retain
normally.</i>
</description>
<ref disa="138" />

<Value id="var_auditd_num_logs" type="number" >
<title>Number of log files for auditd to retain</title>
<description>The setting for num_logs in /etc/audit/auditd.conf</description>
<value selector="">5</value>
<value selector="5">5</value>
<value selector="4">4</value>
<value selector="3">3</value>
<value selector="2">2</value>
<value selector="1">1</value>
<value selector="0">0</value>
</Value>

<Value id="var_auditd_max_log_file" type="number" >
<title>Maximum audit log file size for auditd</title>
<description>The setting for max_log_size in /etc/audit/auditd.conf</description>
<value selector="">6</value>
<value selector="20">20</value>
<value selector="10">10</value>
<value selector="6">6</value>
<value selector="5">5</value>
<value selector="1">1</value>
</Value>

<Value id="var_auditd_max_log_file_action" type="string" >
<title>Action for auditd to take when log files reach their maximum size</title>
<description>The setting for max_log_file_action in /etc/audit/auditd.conf</description>
<value selector="">rotate</value>
<value selector="ignore">ignore</value>
<value selector="syslog">syslog</value>
<value selector="suspend">suspend</value>
<value selector="rotate">rotate</value>
<value selector="keep_logs">keep_logs</value>
</Value>

<Value id="var_auditd_space_left_action" type="string" >
<title>Action for auditd to take when disk space just starts to run low</title>
<description>The setting for space_left_action in /etc/audit/auditd.conf</description>
<value selector="">email</value>
<value selector="ignore">ignore</value>
<value selector="syslog">syslog</value>
<value selector="email">email</value>
<value selector="exec">exec</value>
<value selector="suspend">suspend</value>
<value selector="single">single</value>
<value selector="halt">halt</value>
</Value>

<Value id="var_auditd_admin_space_left_action" type="string" >
<title>Action for auditd to take when disk space just starts to run low</title>
<description>The setting for space_left_action in /etc/audit/auditd.conf</description>
<value selector="">single</value>
<value selector="ignore">ignore</value>
<value selector="syslog">syslog</value>
<value selector="email">email</value>
<value selector="exec">exec</value>
<value selector="suspend">suspend</value>
<value selector="single">single</value>
<value selector="halt">halt</value>
</Value>

<Value id="var_auditd_action_mail_acct" type="string" >
<title>Account for auditd to send email when actions occurs</title>
<description>The setting for action_mail_acct in /etc/audit/auditd.conf</description>
<value selector="">root</value>
<value selector="root">root</value>
<value selector="admin">admin</value>
</Value>

<Rule id="configure_auditd_num_logs">
<title>Configure auditd Number of Logs Retained</title>
<description>Determine how many log files
<tt>auditd</tt> should retain when it rotates logs.
Edit the file <tt>/etc/audit/auditd.conf</tt>. Add or modify the following
line, substituting <i>NUMLOGS</i> with an appropriate value:
<pre>num_logs = <i>NUMLOGS</i></pre>
The default value of 5 is recommended for general-purpose systems. Note that
values less than 2 result in no log rotation.</description>
<rationale>The total storage for audit log files must be large enough to retain
log information over the period required. This is a function of the maxium log
file size and the number of logs retained.</rationale>
<oval id="auditd_data_retention_num_logs" value="var_auditd_num_logs" /> 
</Rule>


<Rule id="configure_auditd_max_log_file">
<title>Configure auditd Max Log File Size</title>
<description>Determine the amount of audit data (in megabytes)
which should be retained in each log file. Edit the file
<tt>/etc/audit/auditd.conf</tt>. Add or modify the following line, substituting
<i>STOREMB</i> with an appropriate value:
<pre>max_log_file = <i>STOREMB</i></pre>
The default value of 6 (MB) or even higher is recommended for general-purpose systems.
Larger values, of course,
support retention of even more audit data.</description>
<rationale>The total storage for audit log files must be large enough to retain
log information over the period required. This is a function of the maxium
log file size and the number of logs retained.</rationale>
<oval id="auditd_data_retention_max_log_file" value="var_auditd_max_log_file" /> 
</Rule>


<Rule id="configure_auditd_max_log_file_action">
<title>Configure auditd max_log_file_action Upon Reaching Maximum Log Size</title>
<description> The default action to take when the logs reach their maximum size
is to rotate the log files, discarding the oldest one. To configure the action taken
by <tt>auditd</tt>, add or correct the line:
<pre>max_log_file_action = <i>ACTION</i></pre>
Valid values for <i>ACTION</i> are described in the <tt>auditd.conf</tt> man page, and include
<tt>ignore</tt>, <tt>syslog</tt>, <tt>suspend</tt>, <tt>rotate</tt>,
and <tt>keep_logs</tt>.
<br/><br/>
The default (case-insensitive) setting,
<tt>rotate</tt>, is recommended for most environments.
</description>
<rationale>Automatically rotating logs (by setting this to <tt>rotate</tt>)
minimizes the chances of the system unexpectedly running out of disk space by
being overwhelmed with log data. However, for systems that must never discard
log data, or which use external processes to transfer it and reclaim space,
<tt>keep_logs</tt> can be employed.</rationale>
<oval id="auditd_data_retention_max_log_file_action" value="var_auditd_max_log_file_action" />
</Rule>

<!--
<Group id="auditd_logical_volume">
<title>Configure auditd to Use a Separate Partition or Logical Volume</title>
<description>Use a dedicated partition (or logical volume) for log files. It is
straightforward to create such a partition or logical volume during system
installation time. The partition should be larger than the maximum space which
<tt>auditd</tt> will ever use, which is the maximum size of each log file
(<tt>max_log_file</tt>) multiplied by the number of log files
(<tt>num_logs</tt>). Ensure the partition is mounted on
<tt>/var/log/audit</tt>.
</description>
</Group>
-->

<Rule id="configure_auditd_space_left_action">
<title>Configure auditd space_left Action on Low Disk Space</title>
<description>The <tt>auditd</tt> service can be configured to take an action
when disk space <i>starts</i> to run low. 
Edit the file <tt>/etc/audit/auditd.conf</tt>. Add or modify the following line,
substituting <i>ACTION</i> appropriately:
<pre>space_left_action = <i>ACTION</i></pre>
Valid values for <i>ACTION</i> are described in the <tt>auditd.conf</tt> man page, and include
<tt>ignore</tt>, <tt>syslog</tt>, <tt>email</tt>, <tt>exec</tt>,
<tt>suspend</tt>, <tt>single</tt> and <tt>halt</tt>.
<br/><br/>
Setting this to <tt>email</tt> is recommended over the default
(<tt>suspend</tt>) as it may be more likely to get prompt attention.
</description>
<rationale>Notifying administrators of an impending disk space problem may
allow them to take corrective action prior to any disruption.</rationale>
<oval id="auditd_data_retention_space_left_action" value="var_auditd_space_left_action"/>
<ref disa="140,144" />
</Rule>


<Rule id="configure_auditd_admin_space_left_action">
<title>Configure auditd admin_space_left Action on Low Disk Space</title>
<description>The <tt>auditd</tt> service can be configured to take an action
when disk space is running low but prior to running out of space completely. 
Edit the file <tt>/etc/audit/auditd.conf</tt>. Add or modify the following line,
substituting <i>ACTION</i> appropriately:
<pre>admin_space_left_action = <i>ACTION</i></pre>
Valid values for <i>ACTION</i> include are described in the <tt>auditd.conf</tt> man page, and include
<tt>ignore</tt>, <tt>syslog</tt>, <tt>email</tt>, <tt>exec</tt>,
<tt>suspend</tt>, <tt>single</tt> and <tt>halt</tt>. The default setting is
<tt>suspend</tt>, which may not be noticed by some administrators.
<br/><br/>
Setting this value to <tt>single</tt> will cause the system to switch to
single user mode for corrective action, and is recommended.
</description>
<rationale>Administrators should be made aware of an inability to record
audit records. If a separate partition or logical volume of adequate size
is used, running low on space for audit records should never occur.
</rationale>
<oval id="auditd_data_retention_admin_space_left_action" value="var_auditd_admin_space_left_action" />
<ref disa="140,144" />
</Rule>


<Rule id="configure_auditd_action_mail_acct">
<title>Configure auditd mail_acct Action on Low Disk Space</title>
<description>The <tt>auditd</tt> service can be configured to send email to
a designated account in certain situations. Add or correct the following line
in <tt>/etc/audit/auditd.conf</tt> to ensure that administrators are notified
via email for those situations:
<pre>action_mail_acct = root</pre>
</description>
<rationale>Email sent to the root account is typically aliased to the
administrators of the system, who can take appropriate action.</rationale>
<oval id="auditd_data_retention_action_mail_acct" value="var_auditd_action_mail_acct" />
<ref disa="139" />
</Rule>

</Group>

<Group id="auditd_configure_rules">
<title>Configure <tt>auditd</tt> Rules for Comprehensive Auditing</title>
<description>The <tt>auditd</tt> program can perform comprehensive
monitoring of system activity. This section describes recommended
configuration settings for comprehensive auditing, but a full
description of the auditing system’s capabilities is beyond the
scope of this guide. The mailing list <i>linux-audit@redhat.com</i> exists
to facilitate community discussion of the auditing system.
<br /><br />
The audit subsystem supports extensive collection of events, including:
<br />
<ul>
<li>Tracing of arbitrary system calls (identified by name or number)
on entry or exit.</li>
<li>Filtering by PID, UID, call success, system call argument (with
some limitations), etc.</li>
<li>Monitoring of specific files for modifications to the file’s
contents or metadata.</li>
</ul>
<br />
Auditing rules at startup are controlled by the file <tt>/etc/audit/audit.rules</tt>.
Add rules to it to meet the auditing requirements for your organization.
Each line in <tt>/etc/audit/audit.rules</tt> represents a series of arguments
that can be passed to <tt>auditctl</tt> and can be individually tested
during runtime. See documentation in <tt>/usr/share/doc/audit-<i>VERSION</i></tt> and
in the related man pages for more details.
<br /><br />
If copying any example audit rulesets from <tt>/usr/share/doc/audit-VERSION</tt>,
be sure to comment out the
lines containing <tt>arch=</tt> which are not appropriate for your system’s
architecture. Then review and understand the following rules,
ensuring rules are activated as needed for the appropriate
architecture.
<br /><br />
After reviewing all the rules, reading the following sections, and
editing as needed, the new rules can be activated as follows:
<pre># service auditd restart</pre>
</description>
<ref disa="171,172,1115,1454,1487,1571,1589,880,347,85,1274,1356,374" />

<Group id="audit_time_rules">
<title>Records Events that Modify Date and Time Information</title>
<description>Arbitrary changes to the system time can be used to obfuscate 
nefarious activites in log files as well as to confuse network services that 
are highly dependent upon an accurate system time. All changes to the system 
time should be audited.</description>

<Rule id="audit_rules_time_adjtimex">
<title>Record attempts to alter time through adjtimex</title>
<description>On a 32-bit system, add the following to <tt>/etc/audit/audit.rules</tt>:
<pre># audit_time_rules
-a always,exit -F arch=b32 -S adjtimex -k audit_time_rules</pre>
On a 64-bit system, add the following to <tt>/etc/audit/audit.rules</tt>:
<pre># audit_time_rules
-a always,exit -F arch=b64 -S adjtimex -k audit_time_rules</pre>
The -k option allows for the specification of a key in string form that can 
be used for better reporting capability through ausearch and aureport.
Multiple system calls can be defined on the same line to save space if 
desired, but is not required. See an example of multiple combined syscalls:
<pre>-a always,exit -F arch=b64 -S adjtimex -S settimeofday -S clock_settime 
-k audit_time_rules</pre>
</description>
<rationale>Arbitrary changes to the system time can be used to obfuscate 
nefarious activites in log files as well as to confuse network services that 
are highly dependent upon an accurate system time (such as sshd). All changes 
to the system time should be audited.</rationale>
<ident cce="14051-7" />
<oval id="audit_rules_time_adjtimex" />
<ref nist="AU-2(a)" />
<ref disa="1487,169" />
</Rule>

<Rule id="audit_rules_time_settimeofday">
<title>Record attempts to alter time through settimeofday</title>
<description>On a 32-bit system, add the following to <tt>/etc/audit/audit.rules</tt>:
<pre># audit_time_rules
-a always,exit -F arch=b32 -S settimeofday -k audit_time_rules</pre>
On a 64-bit system, add the following to <tt>/etc/audit/audit.rules</tt>:
<pre># audit_time_rules
-a always,exit -F arch=b64 -S settimeofday -k audit_time_rules</pre>
The -k option allows for the specification of a key in string form that can 
be used for better reporting capability through ausearch and aureport.
Multiple system calls can be defined on the same line to save space if 
desired, but is not required. See an example of multiple combined syscalls:
<pre>-a always,exit -F arch=b64 -S adjtimex -S settimeofday -S clock_settime 
-k audit_time_rules</pre>
</description>
<rationale>Arbitrary changes to the system time can be used to obfuscate 
nefarious activites in log files as well as to confuse network services that 
are highly dependent upon an accurate system time (such as sshd). All changes 
to the system time should be audited.</rationale>
<ident cce="14051-7" />
<oval id="audit_rules_time_settimeofday" />
<ref nist="AU-2(a)" />
<ref disa="1487,169" />
</Rule>

<Rule id="audit_rules_time_stime">
<title>Record attempts to alter time through stime</title>
<description>On a 32-bit system, add the following to <tt>/etc/audit/audit.rules</tt>:
<pre># audit_time_rules
-a always,exit -F arch=b32 -S stime -k audit_time_rules</pre>
On a 64-bit system, the "-S time" is not necessary. The -k option allows for 
the specification of a key in string form that can be used for better 
reporting capability through ausearch and aureport. Multiple system calls 
can be defined on the same line to save space if desired, but is not required.
See an example of multiple combined syscalls:
<pre>-a always,exit -F arch=b64 -S adjtimex -S settimeofday -S clock_settime 
-k audit_time_rules</pre>
</description>
<rationale>Arbitrary changes to the system time can be used to obfuscate 
nefarious activites in log files as well as to confuse network services that 
are highly dependent upon an accurate system time (such as sshd). All changes 
to the system time should be audited.</rationale>
<ident cce="14051-7" />
<oval id="audit_rules_time_stime" />
<ref nist="AU-2(a)" />
<ref disa="1487,169" />
</Rule>

<Rule id="audit_rules_time_clock_settime">
<title>Record attempts to alter time through clock_settime</title>
<description>On a 32-bit system, add the following to <tt>/etc/audit/audit.rules</tt>:
<pre># audit_time_rules
-a always,exit -F arch=b32 -S clock_settime -k audit_time_rules</pre>
On a 64-bit system, add the following to <tt>/etc/audit/audit.rules</tt>:
<pre># audit_time_rules
-a always,exit -F arch=b64 -S clock_settime -k audit_time_rules</pre>
The -k option allows for the specification of a key in string form that can 
be used for better reporting capability through ausearch and aureport.
Multiple system calls can be defined on the same line to save space if 
desired, but is not required. See an example of multiple combined syscalls:
<pre>-a always,exit -F arch=b64 -S adjtimex -S settimeofday -S clock_settime 
-k audit_time_rules</pre>
</description>
<rationale>Arbitrary changes to the system time can be used to obfuscate 
nefarious activites in log files as well as to confuse network services that 
are highly dependent upon an accurate system time (such as sshd). All changes 
to the system time should be audited.</rationale>
<ident cce="14051-7" />
<oval id="audit_rules_time_clock_settime" />
<ref nist="AU-2(a)" />
<ref disa="1487,169" />
</Rule>

<Rule id="audit_rules_time_watch_localtime">
<title>Record attempts to alter the localtime file</title>
<description>Add the following to <tt>/etc/audit/audit.rules</tt>:
<pre>-w /etc/localtime -p wa -k audit_time_rules</pre>
The -k option allows for the specification of a key in string form that can 
be used for better reporting capability through ausearch and aureport and
should always be used.
</description>
<rationale>Arbitrary changes to the system time can be used to obfuscate 
nefarious activites in log files as well as to confuse network services that 
are highly dependent upon an accurate system time (such as sshd). All changes 
to the system time should be audited.</rationale>
<ident cce="14051-7" />
<oval id="audit_rules_time_watch_localtime" />
<ref nist="AU-2(a)" />
<ref disa="1487,169" />
</Rule>
</Group><!--End <Group id="audit_time_rules"> -->

<Rule id="audit_account_changes">
<title>Record Events that Modify User/Group Information</title>
<description>Add the following to <tt>/etc/audit/audit.rules</tt>, in order
to capture events that modify account changes:
<pre># audit_account_changes
-w /etc/group -p wa -k audit_account_changes
-w /etc/passwd -p wa -k audit_account_changes
-w /etc/gshadow -p wa -k audit_account_changes
-w /etc/shadow -p wa -k audit_account_changes
-w /etc/security/opasswd -p wa -k audit_account_changes</pre>
</description>
<rationale>In addition to auditing new user and group accounts, these watches
will alert the system administrator(s) to any modifications. It is recommended
that any unexpected users, groups, or modifications be investigated for
legitimacy.</rationale>
<ident cce="14829-6" />
<oval id="audit_rules_usergroup_modification" />
<ref nist="AU-2(a)" disa="18,1403,1404,1405,1684,1683,1685,1686"/>
</Rule>

<Rule id="audit_network_modifications">
<title>Record Events that Modify the System’s Network Environment</title>
<description>Add the following to <tt>/etc/audit/audit.rules</tt>, setting
ARCH to either b32 or b64 as appropriate for your system:
<pre># audit_network_modifications
-a exit,always -F arch=ARCH -S sethostname -S setdomainname -k audit_network_modifications
-w /etc/issue -p wa -k audit_network_modifications
-w /etc/issue.net -p wa -k audit_network_modifications
-w /etc/hosts -p wa -k audit_network_modifications
-w /etc/sysconfig/network -p wa -k audit_network_modifications</pre>
</description>
<rationale>The network environment should not be modified by anything other
than administrator action. Any change to network parameters should be
audited.</rationale>
<ident cce="14816-3" />
<oval id="audit_rules_networkconfig_modification" />
<ref nist="AU-2(a)" />
</Rule>


<Rule id="audit_mac_changes">
<title>Record Events that Modify the System’s Mandatory Access
Controls</title>
<description>Add the following to <tt>/etc/audit/audit.rules</tt>:
<pre>-w /etc/selinux/ -p wa -k MAC-policy</pre>
</description>
<!-- TODO add info for selinux system calls which load new policy? -->
<rationale>The system's mandatory access policy (SELinux) should not be
arbitrarily changed by anything other than administrator action. All changes to
MAC policy should be audited.</rationale>
<ident cce="14821-3" />
<oval id="audit_rules_mac_modification" />
<ref nist="AU-2" />
</Rule>

<Rule id="audit_dac_actions">
<title>Record Events that Modify the System's Discretionary
Access Controls</title>
<description>At a minimum the audit system should collect file
permission changes for all users and root. Add the following to
<tt>/etc/audit/audit.rules</tt>, setting ARCH to either b32 or b64 as
appropriate for your system:
<pre>-a always,exit -F arch=ARCH -S chmod -S fchmod -S fchmodat \
    -F auid&gt;=500 -F auid!=4294967295 -k perm_mod
    -a always,exit -F arch=ARCH -S chown -S fchown -S fchownat \
    -S lchown -F auid&gt;=500 -F auid!=4294967295 -k perm_mod
    -a always,exit -F arch=ARCH -S setxattr -S lsetxattr \
    -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr \
    -F auid&gt;=500 -F auid!=4294967295 -k perm_mod</pre>
</description>
<rationale>The changing of file permissions could indicate that a user is attempting to
gain access to information that would otherwise be disallowed. Auditing DAC modifications
can facilitate the identification of patterns of abuse amoung both authorized and
unauthorized users.</rationale>
<ident cce="14058-2" />
<oval id="audit_rules_dac_modification" />
<ref nist="AU-2" disa="126"/>
</Rule>

<Rule id="audit_manual_logon_edits">
<title> Record Attempts to Alter Logon and Logout Events</title>
<description> 
The audit system already collects login info for all users and root. To watch for attempted manual edits of
files involved in storing logon events, add the following to <tt>/etc/audit/audit.rules</tt>:
<pre>-w /var/log/faillog -p wa -k logins 
-w /var/log/lastlog -p wa -k logins</pre>
</description> 
<rationale>Manual editing of these files may indicate nefarious activity, such
as an attacker attempting to remove evidence of an intrusion.</rationale>
<ident cce="14904-7" />
<oval id="audit_rules_login_events" />
<!--<ref nist="TODO" />-->
</Rule>

<Rule id="audit_manual_session_edits">
<title> Record Attempts to Alter Process and Session Initiation Information</title>
<description> The audit system already collects process information for all
users and root. To watch for attempted manual edits of files involved in
storing such process information, add the following to
<tt>/etc/audit/audit.rules</tt>:
<pre>-w /var/run/utmp -p wa -k session
-w /var/log/btmp -p wa -k session
-w /var/log/wtmp -p wa -k session</pre>
</description>
<rationale>Manual editing of these files may indicate nefarious activity, such
as an attacker attempting to remove evidence of an intrusion.</rationale>
<ident cce="14679-5" />
<oval id="audit_rules_session_events" />
<!--<ref nist="TODO" />-->
</Rule>

<Rule id="audit_file_access">
<title>Ensure <tt>auditd</tt> Collects Unauthorized Access Attempts to Files (unsuccessful)</title>
<description>At a minimum the audit system should collect
unauthorized file accesses for all users and root. Add the following
to <tt>/etc/audit/audit.rules</tt>, setting ARCH to either b32 or b64 as
appropriate for your system:
<pre>-a always,exit -F arch=ARCH -S creat -S open -S openat -S truncate \
    -S ftruncate -F exit=-EACCES -F auid&gt;=500 -F auid!=4294967295 -k access
-a always,exit -F arch=ARCH -S creat -S open -S openat -S truncate \
    -S ftruncate -F exit=-EPERM -F auid&gt;=500 -F auid!=4294967295 -k access</pre>
</description>
<rationale>Unsuccessful attempts to access files could be an indicator of malicious activity on a system. Auditing
these events could serve as evidence of potential system compromise.</rationale>
<ident cce="14917-9" />
<oval id="audit_rules_unsuccessful_file_modification" />
<ref nist="AU-2.1 (v),AU-2 d" disa="126" />
</Rule>

<Rule id="audit_privileged_commands">
<title>Ensure <tt>auditd</tt> Collects Information on the Use of Privileged Commands</title>
<description>At a minimum the audit system should collect the
execution of privileged commands for all users and root. 
To find the relevant setuid programs:
<pre># find / -type f -perm -4000 -o -perm -2000 2>/dev/null</pre>
Then, for each setuid program on the system, add a line of the following form to 
<tt>/etc/audit/audit.rules</tt>, where <i>SETUID_PROG_PATH</i> is the full path to each setuid program
in the list:
<pre>-a always,exit -F path=<i>SETUID_PROG_PATH</i> -F perm=x -F auid&gt;=500 -F auid!=4294967295 -k privileged</pre>
</description>
<rationale>Privileged programs are subject to escalation-of-privilege attacks,
which attempt to subvert their normal role of providing some necessary but
limited capability. As such, motivation exists to monitor these programs for
unusual activity.
</rationale>
<ident cce="14296-8" />
<oval id="audit_rules_privileged_commands" />
<ref nist="AU-2" disa="40" />
</Rule>

<Rule id="audit_media_exports">
<title>Ensure <tt>auditd</tt> Collects Information on Exporting to Media
(successful)</title>
<description>At a minimum the audit system should collect media
exportation events for all users and root. Add the following to
<tt>/etc/audit/audit.rules</tt>, setting ARCH to either b32 or b64 as
appropriate for your system:
<pre>-a always,exit -F arch=ARCH -S mount -F auid&gt;=500 -F auid!=4294967295 -k export</pre>
</description>
<rationale>The unauthorized exportation of data to external media could result in an information leak
where classified information, Privacy Act information, and intellectual property could be lost. An audit
trail should be created each time a filesystem is mounted to help identify and guard against information
loss.</rationale>
<ident cce="14569-8" />
<oval id="audit_rules_media_export" />
<ref nist="AU-2" />
</Rule>

<Rule id="audit_file_deletions">
<title>Ensure <tt>auditd</tt> Collects Files Deletion Events by User</title>
<description>At a minimum the audit system should collect file
deletion events for all users and root. Add the following to
<tt>/etc/audit/audit.rules</tt>, setting ARCH to either b32 or b64 as
appropriate for your system:
<pre>-a always,exit -F arch=ARCH -S unlink -S unlinkat -S rename -S renameat \
    -F auid&gt;=500 -F auid!=4294967295 -k delete</pre>
</description>
<rationale>Auditing file deletions will create an audit trail for files that are removed
from the system. The audit trail could aid in system troubleshooting as well as detecting
malicious processes that attempt to delete log files to conceal their presence.</rationale>
<ident cce="14820-5" />
<oval id="audit_rules_file_deletion_events" />
<ref nist="AU-2" disa="126"/>
</Rule>

<Rule id="audit_sysadmin_actions">
<title>Ensure <tt>auditd</tt> Collects System Administrator Actions</title>
<description>At a minimum the audit system should collect
administrator actions for all users and root. Add the following to
<tt>/etc/audit/audit.rules</tt>:
<pre>-w /etc/sudoers -p wa -k actions</pre>
</description>
<rationale>The actions taken by system administrators should be audited to keep a record
of what was executed on the system as well as for accountability purposes.</rationale>
<ident cce="14824-7" />
<oval id="audit_rules_sysadmin_actions" />
<ref nist="AU-2" />
</Rule>

<Rule id="audit_kernel_module_loading">
<title>Ensure <tt>auditd</tt> Collects Information on Kernel Module Loading
and Unloading</title>
<description>Add the following to <tt>/etc/audit/audit.rules</tt> in order
to capture kernel module loading and unloading events:
<pre>-w /sbin/insmod -p x -k modules
-w /sbin/rmmod -p x -k modules
-w /sbin/modprobe -p x -k modules
-a always,exit -S init_module -S delete_module -k modules</pre>
</description>
<rationale>The addition/removal of kernel modules can be used to alter the behavior of
the kernel and potentially introduce malicious code into kernel space. It is important
to have an audit trail of modules that have been introduced into the kernel.</rationale>
<ident cce="14688-6" />
<oval id="audit_rules_kernel_module_loading" />
<ref nist="AU-2" />
</Rule>

<Rule id="audit_config_immutable">
<title>Make the <tt>auditd</tt> Configuration Immutable</title>
<description>Add the following to <tt>/etc/audit/audit.rules</tt> in order
to make the configuration immutable:
<pre>-e 2</pre>
With this setting, a reboot will be required to change any
audit rules.</description>
<rationale>Making the audit configuration immutable prevents accidential as
well as malicious modification of the audit rules, although it may be
problematic if legitimate changes are needed during system
operation</rationale>
<ident cce="14692-8" />
<oval id="audit_rules_immutable" />
<ref nist="AU-2" />
</Rule>
</Group>

</Group>
