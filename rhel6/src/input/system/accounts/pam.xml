<Group id="accounts-pam">
<title>Protect Accounts by Configuring PAM</title>
<description>PAM, or Pluggable Authentication Modules, is a system
which implements modular authentication for Linux programs. PAM provides
a flexible and configurable architecture for authentication, and it should be configured
to minimize exposure to unnecessary risk. This section contains
guidance on how to accomplish that.
<br /><br />
PAM is implemented as a set of shared objects which are
loaded and invoked whenever an application wishes to authenticate a
user. Typically, the application must be running as root in order
to take advantage of PAM, because PAM's modules often need to be able
to access sensitive stores of account information, such as /etc/shadow.
Traditional privileged network listeners
(e.g. sshd) or SUID programs (e.g. sudo) already meet this
requirement. An SUID root application, userhelper, is provided so
that programs which are not SUID or privileged themselves can still
take advantage of PAM.
<br /><br />
PAM looks in the directory <tt>/etc/pam.d</tt> for
application-specific configuration information. For instance, if
the program login attempts to authenticate a user, then PAM's
libraries follow the instructions in the file <tt>/etc/pam.d/login</tt>
to determine what actions should be taken.
<br /><br />
One very important file in <tt>/etc/pam.d</tt> is
<tt>/etc/pam.d/system-auth</tt>. This file, which is included by
many other PAM configuration files, defines 'default' system authentication
measures. Modifying this file is a good way to make far-reaching
authentication changes, for instance when implementing a
centralized authentication service.</description>
<warning category="general">Be careful when making changes to PAM's
configuration files. The syntax for these files is complex, and
modifications can have unexpected consequences. The default
configurations shipped with applications should be sufficient for
most users.</warning>
<warning category="general">Running <tt>authconfig</tt> or
<tt>system-config-authentication</tt> will re-write the PAM configuration
files, destroying any manually made changes and replacing them with
a series of system defaults. One reference to the configuration
file syntax can be found at
http://www.kernel.org/pub/linux/libs/pam/Linux-PAM-html/sag-configuration-file.html.</warning>

<Group id="password_quality">
<title>Set Password Quality Requirements</title>
<description>The default <tt>pam_cracklib</tt> PAM module provides strength
checking for passwords. It performs a number of checks, such as
making sure passwords are not similar to dictionary words, are of
at least a certain length, are not the previous password reversed,
and are not simply a change of case from the previous password. It
can also require passwords to be in certain character classes.
<br /><br />
The <tt>pam_passwdqc</tt> PAM module also provides the ability to enforce
stringent password strength requirements. It is provided
in an RPM of the same name.
<br /><br />
The man pages <tt>pam_cracklib(8)</tt> and <tt>pam_passwdqc(8)</tt>
provide information on the capabilities and configuration of
each.</description>

<Group id="password_quality_pamcracklib">
<title>Set Password Quality Requirements, if using
pam_cracklib</title>
<description>The <tt>pam_cracklib</tt> PAM module can be configured to meet
requirements for a variety of policies.
<br /><br />
For example, to configure <tt>pam_cracklib</tt> to require at least one uppercase
character, lowercase character, digit, and other (special)
character, locate the following line in <tt>/etc/pam.d/system-auth</tt>:
<pre>password requisite pam_cracklib.so try_first_pass retry=3</pre>
and then alter it to read:
<pre>password required pam_cracklib.so try_first_pass retry=3 minlen=14 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=0</pre>
The arguments can be modified to ensure compliance with
your organizationâ€™s security policy. Discussion of each parameter follows.
</description>
<warning category="general">Note that the password quality
requirements are not enforced for the root account for some
reason.</warning>

<Value id="var_password_pam_cracklib_retry" type="number" operator="equals" interactive="0">
<title>retry</title>
<description>Number of retry attempts before erroring out</description>
<value selector="">3</value>
<value selector="1">1</value>
<value selector="2">2</value>
<value selector="3">3</value>
</Value>

<Value id="var_password_pam_cracklib_minlen" type="number"
operator="equals" interactive="0">
<title>minlen</title>
<description>Minimum number of characters in password</description>
<value selector="">12</value>
<value selector="6">6</value>
<!-- NIST 800-53 requires 1 in a million using brute force which translates to six numbers -->
<value selector="8">8</value>
<value selector="10">10</value>
<value selector="12">12</value>
<value selector="14">14</value>
<value selector="15">15</value>
</Value>
<Value id="var_password_pam_cracklib_dcredit" type="number"
operator="equals" interactive="0">
<title>dcredit</title>
<description>Mininum number of digits in password</description>
<value selector="">-1</value>
<value selector="2">-2</value>
<value selector="1">-1</value>
<value selector="0">0</value>
</Value>
<Value id="var_password_pam_cracklib_ocredit" type="number"
operator="equals" interactive="0">
<title>ocredit</title>
<description>Mininum number of other (special characters) in
password</description>
<value selector="">-1</value>
<value selector="2">-2</value>
<value selector="1">-1</value>
<value selector="0">0</value>
</Value>
<Value id="var_password_pam_cracklib_lcredit" type="number"
operator="equals" interactive="0">
<title>lcredit</title>
<description>Mininum number of lower case in password</description>
<value selector="">-1</value>
<value selector="2">-2</value>
<value selector="1">-1</value>
<value selector="0">0</value>
</Value>
<Value id="var_password_pam_cracklib_ucredit" type="number"
operator="equals" interactive="0">
<title>ucredit</title>
<description>Mininum number of upper case in password</description>
<value selector="">-1</value>
<value selector="2">-2</value>
<value selector="1">-1</value>
<value selector="0">0</value>
</Value>
<Value id="var_password_pam_cracklib_difok" type="number"
operator="equals" interactive="0">
<title>difok</title>
<description>Mininum number of characters not present in old
password</description>
<warning category="general">Keep this high for short
passwords</warning>
<value selector="">3</value>
<value selector="2">2</value>
<value selector="3">3</value>
<value selector="4">4</value>
<value selector="5">5</value>
</Value>

<Rule id="password_retry">
<title>Set Password Retry Prompts Permitted Per-session</title>
<description>The pam_cracklib module's <tt>retry=</tt> parameter controls how many times a program
will re-prompt a user after an incorrect password entry, on a per-session basis.
</description>
<rationale>
Setting the password retry prompts that are permitted on a per-session basis to a low value
requires some software, such as SSH, to re-connect. This can slow down and
draw additional attention to some types of password-guessing attacks. Note that this
is different from account lockout, which is provided by the pam_faillock module.
</rationale>
<ident cce="15054-0" />
<oval id="accounts_password_pam_cracklib_retry" value="var_password_pam_cracklib_retry"/>
<ref nist="IA-5" />
</Rule>

<Rule id="password_require_digits">
<title>Set Password Strength Minimum Digit Characters</title>
<description>The pam_cracklib module's <tt>dcredit=</tt> parameter controls requirements for
usage of digits in a password. When set to a negative number, any password will be required to
contain that many digits. When set to a positive number, pam_cracklib will grant +1 additional
length credit for each digit.
</description>
<rationale>
Requiring digits makes password guessing attacks more difficult by ensuring a larger
search space.
</rationale>
<ident cce="14113-5" />
<oval id="accounts_password_pam_cracklib_dcredit" value="var_password_pam_cracklib_dcredit"/>
<ref nist="IA-5,194" disa="194"/>
</Rule>

<Rule id="password_require_uppercases">
<title>Set Password Strength Minimum Uppercase Characters</title>
<description>The pam_cracklib module's <tt>ucredit=</tt> parameter controls requirements for
usage of uppercase letters in a password. When set to a negative number, any password will be required to
contain that many uppercase characters. When set to a positive number, pam_cracklib will grant +1 additional
length credit for each uppercase character.
</description>
<rationale>
Requiring a minimum number of uppercase characters makes password guessing attacks
more difficult by ensuring a larger search space.
</rationale>
<ident cce="14672-0" />
<oval id="accounts_password_pam_cracklib_ucredit" value="var_password_pam_cracklib_ucredit"/>
<ref nist="IA-5" />
</Rule>

<Rule id="password_require_specials">
<title>Set Password Strength Minimum Special Characters</title>
<description>The pam_cracklib module's <tt>ocredit=</tt> parameter controls requirements for
usage of special (or ``other'') characters in a password. When set to a negative number, any password will be required to
contain that many special characters. When set to a positive number, pam_cracklib will grant +1 additional
length credit for each special character.
</description>
<rationale>
Requiring a minimum number of special characters makes password guessing attacks
more difficult by ensuring a larger search space.
</rationale>
<ident cce="14122-6" />
<oval id="accounts_password_pam_cracklib_ocredit" value="var_password_pam_cracklib_ocredit"/>
<ref nist="IA-5" disa="1619" />
</Rule>

<Rule id="password_require_lowercases">
<title>Set Password Strength Minimum Lowercase Characters</title>
<description>The pam_cracklib module's <tt>lcredit=</tt> parameter controls requirements for
usage of lowercase letters in a password. When set to a negative number, any password will be required to
contain that many lowercase characters. When set to a positive number, pam_cracklib will grant +1 additional
length credit for each lowercase character.
</description>
<rationale>
Requiring a minimum number of lowercase characters makes password guessing attacks
more difficult by ensuring a larger search space.
</rationale>
<ident cce="14712-4" />
<oval id="accounts_password_pam_cracklib_lcredit" value="var_password_pam_cracklib_lcredit"/>
<ref nist="IA-5" />
</Rule>

<Rule id="password_require_diffchars">
<title>Set Password Strength Minimum Different Characters</title>
<description>The pam_cracklib module's <tt>difok=</tt> parameter controls requirements for
usage of different characters during a password change.
</description>
<rationale>
Requiring a minimum number of different characters during password changes ensures that
newly changed passwords should not resemble previously compromised ones.
Note that passwords which are changed on compromised systems will still be compromised, however.
</rationale>
<ident cce="14701-7" />
<oval id="accounts_password_pam_cracklib_difok" value="var_password_pam_cracklib_difok"/>
<ref nist="IA-5" disa="195"/>
</Rule>
</Group>
</Group>

<Group id="locking_out_password_attempts">
<title>Set Lockouts for Failed Password Attempts</title>
<description>The <tt>pam_faillock</tt> PAM module provides the capability to
lock out user accounts after a number of failed login attempts. Its
documentation is available in
<tt>/usr/share/doc/pam-VERSION/txts/README.pam_faillock</tt>.
<br /><br />
</description>
<warning category="general">Locking out user accounts presents the
risk of a denial-of-service attack. The lockout policy
must weigh whether the risk of such a
denial-of-service attack outweighs the benefits of thwarting
password guessing attacks.</warning>

<!-- This should probably be two rules:
one to use pam_faillock,
and a second to use unlock_time and set it to a Value
-->

<Rule id="deny_password_attempts">
<title>Set Deny For Failed Password Attempts</title>
<!-- TODO JB: there needs to be a comprehensive discussion of
this, to explain meaning of "PAM-aware", for all PAM module changes.
These include
<tt>login</tt>, <tt>sshd</tt>, and <tt>vsftpd</tt>.

By default, all individual programs' configuration files in <tt>/etc/pam.d</tt>
include <tt>system-auth</tt> or <tt>password-auth</tt>.
-->
<description>
To configure
the system to lock out accounts after a number of incorrect login
attempts using
<tt>pam_faillock.so</tt>,
<br /><br />
Find the following line in <tt>/etc/pam.d/system-auth</tt> and <tt>/etc/pam.d/password-auth</tt>:
<pre>auth sufficient pam_unix.so nullok try_first_pass</pre>
and then change it so that it reads as follows:
<pre>auth required pam_unix.so nullok try_first_pass</pre>
In the same file, comment out or delete the lines:
<pre>auth requisite pam_succeed_if.so uid &gt;= 500 quiet
auth required pam_deny.so</pre>
To enforce password
lockout, add the following to <tt>/etc/pam.d/system-auth</tt> and <tt>/etc/pam.d/password-auth</tt>.
First, add the following just before the pam_unix.so auth line:
<pre>auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900</pre>
<!-- TOOD: this implies we need to create a Value and associated refine-value -->
Second, add the following two lines just after the pam_unix.so auth line:
<pre>auth     [default=die]  pam_faillock.so authfail audit deny=5 unlock_time=900
auth     sufficient     pam_faillock.so authsucc audit deny=5 unlock_time=900</pre>
</description>
<rationale>
Locking out user accounts after a number of incorrect attempts
prevents direct password guessing attacks.
</rationale>
<ident cce="3410-8" />
<oval id="accounts_passwords_pam_faillock_deny" />
<ref nist="AC-7, CM-6" disa="1452,44,47" />
</Rule>

</Group>


<Rule id="set_password_hashing_algorithm">
<title>Set Password Hashing Algorithm</title>
<description>The system's default algorithm for storing password hashes in
<tt>/etc/shadow</tt> is SHA-512.
In order to ensure the system is still configured to use SHA-512 algorithm,
ensure that the following line appears in <tt>/etc/login.defs</tt>:
<pre>ENCRYPT_METHOD SHA512</pre>
Also ensure that the <tt>pam_unix.so</tt> module in the <tt>password</tt> section in
<tt>/etc/pam.d/system-auth</tt> includes the argument <tt>sha512</tt>.
<br/>
If this is not the case, the following command can be run to fix:
<pre># /usr/sbin/authconfig --passalgo=sha512 --update</pre>
This ensures that when users change their passwords, hashes for the new passwords
will be generated using the SHA-512 algorithm.
<!-- All accounts will
need to perform a password change in order to upgrade the stored
hashes to the stronger algorithm. -->
</description>
<rationale>
Using a stronger hashing algorithm makes password cracking attacks more difficult.
</rationale>
<ident cce="14063-2" />
<oval id="accounts_password_hashing_algorithm" />
<ref nist="IA-5" />
</Rule>

<Group id="limiting_password_reuse">
<title>Limit Password Reuse</title>
<description>Do not allow users to reuse recent passwords. This can
be accomplished by using the remember option for the <tt>pam_unix</tt> PAM
module. For example, in order to prevent a user from re-using any of his or her
last 5 passwords, append <tt>remember=5</tt> to the password line which uses
the <tt>pam_unix</tt> module in the file <tt>/etc/pam.d/system-auth</tt>, as shown:
<pre>password sufficient pam_unix.so existing_options remember=5</pre>
Old (and thus no longer valid) passwords are stored in the
file <tt>/etc/security/opasswd</tt>.</description>

<Value id="password_history_retain_number" type="number"
operator="equals" interactive="0">
<title>remember</title>
<description>The last n passwords for each user are saved in
<tt>/etc/security/opasswd</tt> in order to force password change history and
keep the user from alternating between the same password too
frequently.</description>
<value selector="">5</value>
<value selector="0">0</value>
<value selector="5">5</value>
<value selector="10">10</value>
</Value>

<Rule id="limit_password_reuse">
<title>Limit Password Reuse</title>
<description>The passwords to remember should be set to:
<sub idref="password_history_retain_number" /></description>
<rationale>
Allowing users to reuse passwords means that a password which was once
compromised could be used yet again by an attacker.
</rationale>
<ident cce="14939-3" />
<oval id="accounts_password_reuse_limit" value="password_history_retain_number"/>
<ref nist="IA-5" disa="200"/>
</Rule>
</Group>
</Group>
