<Group id="ssh">
<title>SSH Server</title>
<description>The SSH protocol is recommended for remote login and
remote file transfer. SSH provides confidentiality and integrity
for data exchanged between two systems, as well as server
authentication, through the use of public key cryptography. The
implementation included with the system is called OpenSSH, and more
detailed documentation is available from its website,
http://www.openssh.org. Its server program is called <tt>sshd</tt> and
provided by the RPM package <tt>openssh-server</tt>.</description>

<Value id="sshd_idle_timeout_value" type="number"
operator="equals" interactive="0">
<title>SSH session Idle time</title>
<description>Specify duration of allowed idle time.</description>
<value selector="">300</value>
<value selector="5_minutes">300</value>
<value selector="10_minutes">600</value>
</Value>

<Rule id="ssh_server_disabled">
<title>Disable SSH Server If Possible (Unusual)</title>
<description>The SSH server service, sshd, is commonly needed.
However, if it can be disabled, do so with the command:
<br />
<pre>
# chkconfig sshd off
</pre>
This is unusual, as SSH is a common method for encrypted and authenticated
remote access.
</description>
<ident cce="4268-9" />
<oval id="service_sshd_disabled" />
</Rule>

<Group id="ssh_server">
<title>Configure OpenSSH Server if Necessary</title>
<description>If the system needs to act as an SSH server, then
certain changes should be made to the OpenSSH daemon configuration
file <tt>/etc/ssh/sshd_config</tt>. The following recommendations can be
applied to this file. See the <tt>sshd_config(5)</tt> man page for more
detailed information.</description>

<Rule id="sshd_allow_only_protocol2" severity="high">
<title>Allow Only SSH Protocol 2</title>
<description>Only SSH protocol version 2 connections should be
permitted. The default setting in
<tt>/etc/ssh/sshd_config</tt> is correct, and can be
verified by ensuring that the following
line appears:
<pre>Protocol 2</pre>
</description>
<rationale>
SSH protocol version 1 suffers from design flaws that
result in security vulnerabilities and
should not be used.
</rationale>
<ident cce="4325-7" />
<oval id="sshd_protocol_2" />
</Rule>

<!-- FIXME: figure out whether/how to say something discrete here -->
<!--
<Group id="sshd_disable_extraneous_authentication">
<title>Disable Extraneous Authentication Schemes</title>
<description>OpenSSH comes with a wide variety of authentication schemes that may or may not
be applicable. It is best practice to explicitly disable all authentication schemes except for
those which are actually required. This reduces the overall attack surface of the daemon.
<br />
In the configuration file excerpt below only public key authentication (PubKeyAuthentication)
and password authentication (PasswordAuthentication) is permitted. All other schemes are disabled.
<pre>PasswordAuthentication yes
PubkeyAuthentication yes
ChallengeResponseAuthentication no
GSSAPIAuthentication no
HostbasedAuthentication no
KbdInteractiveAuthentication no
KerberosAuthentication no
RhostsRSAAuthentication no
RSAAuthentication no</pre></description>
</Group>
-->

<!--
<Rule id="sshd_disable_tunnel">
<title>Disable Tunneling</title>
<description>OpenSSH includes the ability to provide tunneling, which allows
a user to effectively stablish a VPN connection with a firewall/gateway machine and then access resources
sitting behind it. This feature is disabled by default. To explicitly
disable it:
<pre>PermitTunnel no</pre>
</description>
<rationale>
</rationale>
</Group>
-->


<Rule id="sshd_set_idle_timeout">
<title>Set SSH Idle Timeout Interval</title>
<description>SSH allows administrators to set an idle timeout
interval.
After this interval has passed, the idle user will be
automatically logged out.
<br /><br />
To set an idle timeout interval, edit the following line in <tt>/etc/ssh/sshd_config</tt> as
follows:
<br />
<pre>ClientAliveInterval <b>interval</b>
</pre>
The timeout <b>interval</b> is given in seconds. To have a timeout
of 15 minutes, set <b>interval</b> to 900.
<br /><br />
If a shorter timeout has already been set for the login
shell, that value will preempt any SSH
setting made here. Keep in mind that some processes may stop SSH
from correctly detecting that the user is idle.
</description>
<rationale>
Causing idle users to be automatically logged out
guards against compromises one system leading trivially
to compromises on another.
</rationale>
<ident cce="3845-5" />
<oval id="sshd_idle_timeout" value="sshd_idle_timeout_value"/>
</Rule>


<Rule id="sshd_set_keepalive">
<title>Set SSH Client Alive Count</title>
<description>To ensure that the SSH idle timeout occurs precisely when the <tt>ClientAliveInterval</tt> is set,
edit <tt>/etc/ssh/sshd_config</tt> as
follows:
<br />
<pre>
ClientAliveCountMax 0</pre>
<br /><br />
</description>
<rationale>
This ensures that a user login will be terminated as soon as the <tt>ClientAliveInternal</tt>
is reached.
</rationale>
<ident cce="14061-6" />
<oval id="sshd_clientalivecountmax" />
</Rule>


<Rule id="sshd_disable_rhosts">
<title>Disable SSH Support for .rhosts Files</title>
<description>SSH can emulate the behavior of the obsolete rsh
command in allowing users to enable insecure access to their
accounts via <tt>.rhosts</tt> files.
<br /><br />
To ensure that this behavior is disabled, add or correct the
following line:
<br />
<pre>
IgnoreRhosts yes</pre>
</description>
<rationale>
SSH trust relationships mean that a compromise on one host
can allow an attacker to move trivially to other hosts.
</rationale>
<ident cce="4475-0" />
<oval id="sshd_rsh_emulation_disabled" />
</Rule>


<Rule id="disable_host_auth">
<title>Disable Host-Based Authentication</title>
<description>SSH's cryptographic host-based authentication is
more secure than <tt>.rhosts</tt> authentication,
since hosts are cryptographically authenticated. However, it is
not recommended that hosts unilaterally trust one another, even
within an organization.
<br /><br />
To disable host-based authentication, add or correct the
following line:
<br />
<pre>
HostbasedAuthentication no</pre>
</description>
<rationale>
SSH trust relationships mean that a compromise on one host
can allow an attacker to move trivially to other hosts.
</rationale>
<ident cce="4370-3" />
<oval id="sshd_hostbasedauthentication" />
</Rule>


<Rule id="sshd_disable_root_login">
<title>Disable SSH Root Login</title>
<description>The root user should never be allowed to login to a
system directly over a network.
To disable root login via SSH, add or correct the following line:
<br />
<pre>
PermitRootLogin no</pre>
</description>
<rationale>
Permitting direct root login reduces auditable information about who ran
privileged commands on the system
and also allows direct attack attempts on rootâ€™s password.
</rationale>
<ident cce="4387-7" />
<oval id="sshd_permitrootlogin_no" />
</Rule>


<Rule id="sshd_disable_empty_passwords">
<title>Disable SSH Access via Empty Passwords</title>
<description>To explicitly disallow remote login from accounts with
empty passwords, add or correct the following line:
<br />
<pre>
PermitEmptyPasswords no
</pre>
Any accounts with empty passwords should be disabled immediately, and PAM configuration
should prevent users from being able to assign themselves empty passwords.
</description>
<rationale>
Configuring this setting for the SSH daemon provides additional assurance that
remote login via SSH will require a password,
even in the event of misconfiguration elsewhere.
</rationale>
<ident cce="3660-8" />
<oval id="sshd_permitemptypasswords_no" />
</Rule>

<Rule id="sshd_enable_warning_banner">
<title>Enable SSH Warning Banner</title>
<description>
To enable the warning banner and ensure it is consistent
across the system, add or correct the following line in <tt>/etc/ssh/sshd_config</tt>:

<br />
<pre>
Banner /etc/issue</pre>
<br /><br />
Another section contains information on how to create an
appropriate system-wide warning banner.
</description>
<rationale>
Although unlikely to dissuade a serious attacker, the warning message
reinforces policy awareness during the logon process. Alternatively,
systems whose ownership should not be obvious
should ensure usage of a banner that does not provide easy attribution.
</rationale>
<ident cce="4431-3" />
<oval id="sshd_banner_set" />
</Rule>


<Rule id="sshd_do_not_permit_user_env">
<title>Do Not Allow SSH Environment Options</title>
<description>To ensure users are not able to present
environment options to the SSH daemon, add or correct the following line
in <tt>/etc/ssh/sshd_config</tt>:
<br />
<pre>
PermitUserEnvironment no</pre>
</description>
<rationale>
SSH environment options potentially allow users to bypass
access restriction in some configurations.
</rationale>
<ident cce="4422-2" />
<oval id="sshd_no_user_envset" />
</Rule>

<Rule id="sshd_use_approved_ciphers">
<title>Use Only Approved Ciphers</title>
<description>Limit the ciphers to those algorithms which are FIPS-approved.
Counter (CTR) mode is also preferred over cipher-block chaining (CBC) mode.
The following line in <tt>/etc/ssh/sshd_config</tt>
demonstrates use of FIPS-approved ciphers in CTR mode:
<pre>
Ciphers aes128-ctr,aes192-ctr,aes256-ctr
</pre>
The man page <tt>sshd_config(5)</tt> contains a list of supported ciphers.
Note that older or less capable versions of SSH client or server software
may still be found on systems such as networking equipment, and these
may not support CTR mode. This may become an issue if, for example,
these systems need to retrieve files from your SSH server using SFTP.
TODO: Need to investigate current status of this. Earlier issues with
CBC were supposed to be fixed.</description>
<rationale>
Approved algorithms should impart some level of confidence in their
implementation. These are also required for compliance.
</rationale>
<ident cce="14491-5" />
<oval id="sshd_use_approved_ciphers" />
</Rule>

</Group>
</Group>



