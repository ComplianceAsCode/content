# platform = multi_platform_rhel,multi_platform_fedora,multi_platform_ol,multi_platform_rhv,multi_platform_sle
# reboot = false
# strategy = configure
# complexity = low
# disruption = medium
{{{ ansible_instantiate_variables("var_password_pam_unix_remember") }}}

- name: Check if system relies on authselect
  ansible.builtin.stat:
    path: /usr/bin/authselect
  register: result_authselect_present

- name: First ensure a backup of current authselect profile
  ansible.builtin.command:
    cmd: authselect apply-changes -b --backup=before-hardening.backup
  register: result_authselect_backup
  # The backup happens even if a warning is shown
  ignore_errors: true
  when:
    - result_authselect_present.stat.exists

- name: Get authselect current profile
  ansible.builtin.shell:
    cmd: authselect current -r | awk '{ print $1 }'
  register: result_authselect_profile
  changed_when: false
  when:
    - result_authselect_present.stat.exists

- name: Get authselect current features
  ansible.builtin.shell:
    cmd: authselect current | tail -n+3 | awk '{ print $2 }'
  register: result_authselect_features
  changed_when: false
  when:
    - result_authselect_present.stat.exists

- name: Define the current authselect profile as a local fact
  ansible.builtin.set_fact:
    authselect_profile: "{{ result_authselect_profile.stdout }}"
  when:
    - result_authselect_profile is not skipped
    - result_authselect_profile.stdout is match("custom/")

- name: Define the new authselect custom profile as a local fact
  ansible.builtin.set_fact:
    authselect_profile: "custom/hardening"
  when:
    - result_authselect_profile is not skipped
    - result_authselect_profile.stdout is not match("custom/")

- name: Check if the custom profile was already created
  ansible.builtin.stat:
    path: /etc/authselect/{{ authselect_profile }}
  register: result_authselect_custom_profile_present
  changed_when: false
  when:
    - result_authselect_present.stat.exists

- name: Create a custom profile based on SSSD profile
  ansible.builtin.command:
    cmd: authselect create-profile hardening -b sssd
  register: result_authselect_create_profile
  when:
    - result_authselect_present.stat.exists
    - not result_authselect_custom_profile_present.stat.exists

- name: Ensure the desired configuration is updated in the custom profile
  ansible.builtin.replace:
    dest: "{{ item }}"
    regexp: '(.*pam_pwhistory.so.*remember=)(\S+)(.*)$'
    replace: '\g<1>{{ var_password_pam_unix_remember }}\g<3>'
  loop:
    - /etc/authselect/{{ authselect_profile }}/system-auth
    - /etc/authselect/{{ authselect_profile }}/password-auth
  when:
    - result_authselect_profile is not skipped
    - authselect_profile is match("custom/")

- name: Ensure the desired configuration in present in the custom profile
  ansible.builtin.lineinfile:
    dest: "{{ item }}"
    insertafter: ^password.*requisite.*pam_pwquality.so.*
    line: "password    requisite     pam_pwhistory.so remember={{ var_password_pam_unix_remember }} use_authtok"
  loop:
    - /etc/authselect/{{ authselect_profile }}/system-auth
    - /etc/authselect/{{ authselect_profile }}/password-auth
  when:
    - result_authselect_profile is not skipped
    - authselect_profile is match("custom/")

- name: Ensure the custom profile is selected
  ansible.builtin.command:
    cmd: authselect select {{ authselect_profile }} --force
  register: result_pam_authselect_select_profile
  when:
    - result_authselect_profile is not skipped
    - authselect_profile is match("custom/")
    - result_authselect_profile.stdout is not match("custom/")

- name: Restore the authselect features
  ansible.builtin.command:
    cmd: authselect enable-feature {{ item }}
  register: result_pam_authselect_select_features
  loop: "{{ result_authselect_features.stdout_lines }}"
  when:
    - result_authselect_profile is not skipped
    - result_authselect_features is success
    - result_authselect_profile.stdout is not match("custom/")

# For systems without authselect
- name: "Do not allow users to reuse recent passwords - system-auth (change)"
  replace:
    dest: /etc/pam.d/system-auth
    regexp: '^(password\s+sufficient\s+pam_unix\.so\s.*remember\s*=\s*)(\S+)(.*)$'
    replace: '\g<1>{{ var_password_pam_unix_remember }}\g<3>'
  when:
    - not result_authselect_present.stat.exists

- name: "Do not allow users to reuse recent passwords - system-auth (add)"
  replace:
    dest: /etc/pam.d/system-auth
    regexp: '^password\s+sufficient\s+pam_unix\.so\s(?!.*remember\s*=\s*).*$'
    replace: '\g<0> remember={{ var_password_pam_unix_remember }}'
  when:
    - not result_authselect_present.stat.exists

- name: "Do not allow users to reuse recent passwords - system-auth (change)"
  replace:
    dest: /etc/pam.d/system-auth
    regexp: '^(password\s+(?:(?:requisite)|(?:required))\s+pam_pwhistory\.so\s.*remember\s*=\s*)(\S+)(.*)$'
    replace: '\g<1>{{ var_password_pam_unix_remember }}\g<3>'
  when:
    - not result_authselect_present.stat.exists

- name: "Do not allow users to reuse recent passwords - system-auth (add)"
  replace:
    dest: /etc/pam.d/system-auth
    regexp: '^password\s+(?:(?:requisite)|(?:required))\s+pam_pwhistory\.so\s(?!.*remember\s*=\s*).*$'
    replace: '\g<0> remember={{ var_password_pam_unix_remember }}'
  when:
    - not result_authselect_present.stat.exists
