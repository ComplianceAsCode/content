# platform = multi_platform_all
# reboot = false
# strategy = configure
# complexity = low
# disruption = low

{{{ ansible_pam_faillock_enable(rule_title=rule_title) }}}
{{{ ansible_pam_faillock_parameter_value("dir", "var_accounts_passwords_pam_faillock_dir", rule_title=rule_title) }}}

- name: '{{{ rule_title }}} - Ensure necessary SELinux packages are installed'
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  with_items:
    - python3-libselinux
    - python3-policycoreutils
    - policycoreutils-python-utils

- name: '{{{ rule_title }}} - Create the faillock directory if it does not exist'
  ansible.builtin.file:
    path: "{{ var_accounts_passwords_pam_faillock_dir }}"
    state: directory
    setype: 'faillog_t'

- name: '{{{ rule_title }}} - Get SELinux context for faillock directory'
  ansible.builtin.command:
    cmd: "ls -dZ {{ var_accounts_passwords_pam_faillock_dir }}"
  register: faillock_selinux_context
  changed_when: false
  check_mode: false
  failed_when: false

- name: '{{{ rule_title }}} - Ensure SELinux file context is permanently set'
  ansible.builtin.command:
    cmd: semanage fcontext -a -t faillog_t "{{ var_accounts_passwords_pam_faillock_dir }}(/.*)?"
  register: result_accounts_passwords_pam_faillock_dir_semanage
  failed_when: false
  changed_when:
    - result_accounts_passwords_pam_faillock_dir_semanage.rc == 0
  when: '"faillog_t" not in faillock_selinux_context.stdout'

- name: '{{{ rule_title }}} - Ensure SELinux file context is applied'
  ansible.builtin.command:
    cmd: restorecon -R "{{ var_accounts_passwords_pam_faillock_dir }}"
  register: result_accounts_passwords_pam_faillock_dir_restorecon
  when: '"faillog_t" not in faillock_selinux_context.stdout'
