# platform = multi_platform_rhel,multi_platform_fedora,multi_platform_ol
# reboot = false
# strategy = restrict
# complexity = low
# disruption = low
- (xccdf-var var_accounts_passwords_pam_faillock_deny)
- (xccdf-var var_accounts_passwords_pam_faillock_unlock_time)
- (xccdf-var var_accounts_passwords_pam_faillock_fail_interval)

- name: set auth pam_faillock before pam_unix.so
  pamd:
    name: system-auth
    type: auth
    control: sufficient
    module_path: pam_unix.so
    new_type: auth
    new_control: required
    new_module_path: pam_faillock.so
    module_arguments: 'preauth
        silent
        deny: {{ var_accounts_passwords_pam_faillock_deny }}
        unlock_time={{ var_accounts_passwords_pam_faillock_unlock_time }}
        fail_interval={{ var_accounts_passwords_pam_faillock_fail_interval }}'
    state: before
  tags:
    @ANSIBLE_TAGS@
  @ANSIBLE_ENSURE_PLATFORM@

- name: set auth pam_faillock after pam_unix.so
  pamd:
    name: system-auth
    type: auth
    control: sufficient
    module_path: pam_unix.so
    new_type: auth
    new_control: '[default=die]'
    new_module_path: pam_faillock.so
    module_arguments: 'preauth
        silent
        deny: {{ var_accounts_passwords_pam_faillock_deny }}
        unlock_time={{ var_accounts_passwords_pam_faillock_unlock_time }}
        fail_interval={{ var_accounts_passwords_pam_faillock_fail_interval }}'
    state: after
  tags:
    @ANSIBLE_TAGS@
  @ANSIBLE_ENSURE_PLATFORM@

- name: set account pam_faillock before pam_unix.so
  pamd:
    name: system-auth
    type: account
    control: required
    module_path: pam_unix.so
    new_type: account
    new_control: required
    new_module_path: pam_faillock.so
    state: before
  tags:
    @ANSIBLE_TAGS@
  @ANSIBLE_ENSURE_PLATFORM@
