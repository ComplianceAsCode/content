# platform = multi_platform_rhel,multi_platform_fedora,multi_platform_rhv,multi_platform_ol,multi_platform_almalinux
# reboot = false
# strategy = configure
# complexity = low
# disruption = medium

{{%- set pam_file="/etc/pam.d/password-auth" %}}

{{{ ansible_instantiate_variables("var_password_hashing_algorithm_pam") }}}
{{{ ansible_ensure_pam_module_configuration(pam_file, 'password', 'sufficient', 'pam_unix.so', '{{ var_password_hashing_algorithm_pam }}', '', '', rule_id=rule_id, rule_title=rule_title) }}}

- name: '{{{ rule_title }}} - Check if {{{ pam_file }}} File is Present'
  ansible.builtin.stat:
    path: {{{ pam_file }}}
  register: result_pam_password_auth_file_present

- name: '{{{ rule_title }}} - Check The Proper Remediation For The System'
  block:
    {{{ ansible_ensure_pam_facts_and_authselect_profile(pam_file, rule_title=rule_title) | indent(4) }}}

    - name: '{{{ rule_title }}} - Check if "{{ pam_file_path }}" File is Present'
      ansible.builtin.stat:
        path: "{{ pam_file_path }}"
      register: pam_file_path_present

    - name: '{{{ rule_title }}} - Ensure That Only the Correct Hashing Algorithm Option For pam_unix.so Is Used in {{ pam_file_path }}'
      ansible.builtin.replace:
        dest: "{{ pam_file_path }}"
        regexp: (^\s*password.*pam_unix\.so.*)\b{{ item }}\b\s*(.*)
        replace: '\1\2'
      when:
        - item != var_password_hashing_algorithm_pam
        - pam_file_path_present.stat.exists
      loop:
        - 'sha512'
        - 'yescrypt'
        - 'gost_yescrypt'
        - 'blowfish'
        - 'sha256'
        - 'md5'
        - 'bigcrypt'
      register: result_pam_hashing_options_removal

    {{{ ansible_apply_authselect_changes(rule_title=rule_title) | indent(4) }}}
      when:
        - result_authselect_present.stat.exists
        - result_pam_hashing_options_removal is changed
  when:
    - result_pam_password_auth_file_present.stat.exists
