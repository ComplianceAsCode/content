<def-group>
  <definition class="compliance" id="set_password_hashing_min_rounds_logindefs" version="2">
    <metadata>
      <title>Set Password Hashing Minimum Rounds in /etc/login.defs</title>
      <affected family="unix">
        <platform>multi_platform_sle</platform>
      </affected>
      <description>The password hashing minimum rounds should be set correctly in /etc/login.defs.</description>
    </metadata>
    <criteria operator="OR">
        <criteria operator="AND">
          <criterion test_ref="test_etc_login_defs_sha_crypt_min_rounds" />
          <criterion test_ref="test_etc_login_defs_sha_crypt_max_rounds" />
        </criteria>
        <criterion test_ref="test_etc_login_defs_sha_crypt_min_or_max_rounds" negate="true" />
    </criteria>
  </definition>

  <ind:variable_test id="test_etc_login_defs_sha_crypt_min_rounds" check="all" comment="The value of SHA_CRYPT_MIN_ROUNDS should be set appropriately in /etc/login.defs" version="1">
    <ind:object object_ref="object_last_sha_crypt_min_rounds_instance_value" />
    <ind:state state_ref="state_last_sha_crypt_rounds_instance_value" />
  </ind:variable_test>

  <ind:textfilecontent54_object id="object_last_sha_crypt_min_rounds_from_etc_login_defs" version="1">
    <!-- Read whole /etc/login.defs as single line so we can retrieve last SHA_CRYPT_MIN_ROUNDS directive occurrence -->
    <ind:behaviors singleline="true" />
    <ind:filepath>/etc/login.defs</ind:filepath>
    <!-- Retrieve last (uncommented) occurrence of SHA_CRYPT_MIN_ROUNDS directive -->
    <ind:pattern operation="pattern match">.*\n[^#]*(SHA_CRYPT_MIN_ROUNDS\s+\w+)\s*\n</ind:pattern>
    <ind:instance datatype="int" operation="greater than or equal">1</ind:instance>
  </ind:textfilecontent54_object>

  <!-- Capture the actual SHA_CRYPT_MIN_ROUNDS string value from the previously retrieved last instance -->
  <local_variable id="variable_last_sha_crypt_min_rounds_instance_value" datatype="string" comment="The value of last SHA_CRYPT_MIN_ROUNDS directive in /etc/login.defs" version="1">
    <regex_capture pattern="SHA_CRYPT_MIN_ROUNDS\s+(\w+)">
      <object_component item_field="subexpression" object_ref="object_last_sha_crypt_min_rounds_from_etc_login_defs" />
    </regex_capture>
  </local_variable>

  <!-- Construct OVAL object from this local variable so we can use it in variable test above -->
  <ind:variable_object id="object_last_sha_crypt_min_rounds_instance_value" version="1">
    <ind:var_ref>variable_last_sha_crypt_min_rounds_instance_value</ind:var_ref>
  </ind:variable_object>


  <!-- Same stuff for MAX_ROUNDS -->
  <ind:variable_test id="test_etc_login_defs_sha_crypt_max_rounds" check="all" comment="The value of SHA_CRYPT_MAX_ROUNDS should be set appropriately in /etc/login.defs" version="1">
    <ind:object object_ref="object_last_sha_crypt_max_rounds_instance_value" />
    <ind:state state_ref="state_last_sha_crypt_rounds_instance_value" />
  </ind:variable_test>

  <ind:textfilecontent54_object id="object_last_sha_crypt_max_rounds_from_etc_login_defs" version="1">
    <!-- Read whole /etc/login.defs as single line so we can retrieve last SHA_CRYPT_MAX_ROUNDS directive occurrence -->
    <ind:behaviors singleline="true" />
    <ind:filepath>/etc/login.defs</ind:filepath>
    <!-- Retrieve last (uncommented) occurrence of SHA_CRYPT_MAX_ROUNDS directive -->
    <ind:pattern operation="pattern match">.*\n[^#]*(SHA_CRYPT_MAX_ROUNDS\s+\w+)\s*\n</ind:pattern>
    <ind:instance datatype="int" operation="greater than or equal">1</ind:instance>
  </ind:textfilecontent54_object>

  <!-- Capture the actual SHA_CRYPT_MAX_ROUNDS string value from the previously retrieved last instance -->
  <local_variable id="variable_last_sha_crypt_max_rounds_instance_value" datatype="string" comment="The value of last SHA_CRYPT_MAX_ROUNDS directive in /etc/login.defs" version="1">
    <regex_capture pattern="SHA_CRYPT_MAX_ROUNDS\s+(\w+)">
      <object_component item_field="subexpression" object_ref="object_last_sha_crypt_max_rounds_from_etc_login_defs" />
    </regex_capture>
  </local_variable>

  <!-- Construct OVAL object from this local variable so we can use it in variable test above -->
  <ind:variable_object id="object_last_sha_crypt_max_rounds_instance_value" version="1">
    <ind:var_ref>variable_last_sha_crypt_max_rounds_instance_value</ind:var_ref>
  </ind:variable_object>


  <!-- Define corresponding variable state (the requirement) for the variable object -->
  <!-- The check should PASS if retrieved last SHA_CRYPT_MAX_ROUNDS value is equal to the requirement -->
  <ind:variable_state id="state_last_sha_crypt_rounds_instance_value" version="1">
    <ind:value operation="greater than or equal" datatype="int">5000</ind:value>
  </ind:variable_state>


  <!-- if SHA_CRYPT_MAX_ROUNDS and SHA_CRYPT_MIN_ROUNDS are both unset, that's OK, too -->
  <ind:variable_test id="test_etc_login_defs_sha_crypt_min_or_max_rounds" check="all" comment="The value of SHA_CRYPT_MAX_ROUNDS or SHA_CRYPT_MIN_ROUNDS is set in /etc/login.defs" version="1">
    <ind:object object_ref="object_last_sha_crypt_min_or_max_rounds_instance_value" />
  </ind:variable_test>
  <ind:textfilecontent54_object id="object_last_sha_crypt_min_or_max_rounds_instance_value" version="1">
    <ind:filepath>/etc/login.defs</ind:filepath>
    <ind:pattern operation="pattern match">^[^#]*SHA_CRYPT_M(IN|AX)_ROUNDS\s</ind:pattern>
    <ind:instance datatype="int" operation="greater than or equal">1</ind:instance>
  </ind:textfilecontent54_object>
</def-group>
