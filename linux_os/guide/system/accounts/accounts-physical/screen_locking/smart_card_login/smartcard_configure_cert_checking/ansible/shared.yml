# platform = multi_platform_sle,multi_platform_rhel,multi_platform_ubuntu
# reboot = false
# strategy = restrict
# complexity = low
# disruption = low

{{%- if 'sle' in product %}}
  {{%- set pam_package = "pam_pkcs11" %}}
{{%- else %}}
  {{%- set pam_package = "libpam-pkcs11" %}}
{{% endif %}}

- name: "{{{ rule_title }}} - Gather Package Facts"
  ansible.builtin.package_facts:

- name: "{{{ rule_title }}} - Check if cert_policy in /etc/pam_pkcs11/pam_pkcs11.conf Is Already Set"
  ansible.builtin.lineinfile:
    path: /etc/pam_pkcs11/pam_pkcs11.conf
    regexp: ^(\s*)cert_policy\s+.*
    state: absent
  check_mode: true
  changed_when: false
  register: cert_policy_replace
  when: '"{{{ pam_package }}}" in ansible_facts.packages'

- name: "{{{ rule_title }}} - Ensure 'none' Parameter for cert_policy in /etc/pam_pkcs11/pam_pkcs11.conf Is Removed"
  ansible.builtin.replace:
    path: /etc/pam_pkcs11/pam_pkcs11.conf
    regexp: (^\s*cert_policy\s*=\s*)none\s*;(\s*$)
    replace: \g<1>ocsp_on,ca,signature;\g<2>
  when:
  - cert_policy_replace.found > 0 
  - '"{{{ pam_package }}}" in ansible_facts.packages'
  
- name: "{{{ rule_title }}} - Add 'ocsp_on' Parameter for cert_policy in /etc/pam_pkcs11/pam_pkcs11.conf"
  ansible.builtin.replace:
    path: /etc/pam_pkcs11/pam_pkcs11.conf
    regexp: (^\s*cert_policy\s*=\s*)(?!.*ocsp_on)(.*)
    replace: \g<1>ocsp_on,\g<2>
  when:
  - cert_policy_replace.found > 0 
  - '"{{{ pam_package }}}" in ansible_facts.packages'

- name: "{{{ rule_title }}} - Add cert_policy if It Does Not Exist"
  ansible.builtin.lineinfile:
    path: /etc/pam_pkcs11/pam_pkcs11.conf
    line: cert_policy = ocsp_on,ca,signature;
    state: present
    create: true
  when: 
  - cert_policy_replace.found == 0
  - '"{{{ pam_package }}}" in ansible_facts.packages'
