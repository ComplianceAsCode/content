documentation_complete: true

title: 'Restrict Exposed Kernel Pointer Addresses Access'

description: '{{{ describe_sysctl_option_value(sysctl="kernel.kptr_restrict", value=xccdf_value("sysctl_kernel_kptr_restrict_value")) }}}'

rationale: |-
    Exposing kernel pointers (through procfs or <tt>seq_printf()</tt>) exposes kernel
    writeable structures which may contain functions pointers. If a write vulnerability
    occurs in the kernel, allowing write access to any of this structure, the kernel can
    be compromised. This option disallow any program without the CAP_SYSLOG capability
    to get the addresses of kernel pointers by replacing them with 0.

severity: medium

identifiers:
    cce@rhcos4: CCE-82498-7
    cce@rhel7: CCE-80659-6
    cce@rhel8: CCE-80915-2
    cce@rhel9: CCE-83972-0
    cce@sle12: CCE-83125-5
    cce@sle15: CCE-83299-8

references:
    anssi: BP28(R23)
    disa: CCI-002824,CCI-000366
    nerc-cip: CIP-002-5 R1.1,CIP-002-5 R1.2,CIP-003-8 R5.1.1,CIP-003-8 R5.3,CIP-004-6 4.1,CIP-004-6 4.2,CIP-004-6 R2.2.3,CIP-004-6 R2.2.4,CIP-004-6 R2.3,CIP-004-6 R4,CIP-005-6 R1,CIP-005-6 R1.1,CIP-005-6 R1.2,CIP-007-3 R3,CIP-007-3 R3.1,CIP-007-3 R5.1,CIP-007-3 R5.1.2,CIP-007-3 R5.1.3,CIP-007-3 R5.2.1,CIP-007-3 R5.2.3,CIP-007-3 R8.4,CIP-009-6 R.1.1,CIP-009-6 R4
    nist: SC-30,SC-30(2),SC-30(5),CM-6(a)
    srg: SRG-OS-000132-GPOS-00067,SRG-OS-000433-GPOS-00192,SRG-OS-000480-GPOS-00227
    stigid@ol8: OL08-00-040283
    stigid@rhel8: RHEL-08-040283
    stigid@sle12: SLES-12-030320
    stigid@sle15: SLES-15-010540

{{{ complete_ocil_entry_sysctl_option_value(sysctl="kernel.kptr_restrict", value="1") }}}

ocil: |-
    The runtime status of the <code>kernel.kptr_restrict</code> kernel parameter can be queried
    by running the following command:
    <pre>$ sysctl kernel.kptr_restrict</pre>
    The output of the command should indicate either:
    <code>kernel.kptr_restrict = 1</code>
    or:
    <code>kernel.kptr_restrict = 2</code>
    The output of the command should not indicate:
    <code>kernel.kptr_restrict = 0</code>

    The preferable way how to assure the runtime compliance is to have
    correct persistent configuration, and rebooting the system.

    The persistent kernel parameter configuration is performed by specifying the appropriate
    assignment in any file located in the <pre>/etc/sysctl.d</pre> directory.
    Verify that there is not any existing incorrect configuration by executing the following command:
    <pre>$ grep -r '^\s*kernel.kptr_restrict\s*=' /etc/sysctl.conf /etc/sysctl.d</pre>
    The command should not find any assignments other than:
    kernel.kptr_restrict = 1
    or:
    kernel.kptr_restrict = 2

    Conflicting assignments are not allowed.

ocil_clause: "the kernel.kptr_restrict is not set to 1 or 2 or is configured to be 0"

srg_requirement: '{{{ full_name }}} must restrict exposed kernel pointer addresses access.'

platform: machine

template:
    name: sysctl
    vars:
        sysctlvar: kernel.kptr_restrict
        {{% if 'ol' in product or 'rhel' in product %}}
        sysctlval:
        - '1'
        - '2'
        wrong_sysctlval_for_testing: "0"
        {{% endif %}}
        datatype: int

fixtext: |-
    Configure {{{ full_name }}} to restrict exposed kernel pointer addresses access.
    {{{ fixtext_sysctl("kernel.kptr_restrict", value=xccdf_value("sysctl_kernel_kptr_restrict_value")) | indent(4) }}}
