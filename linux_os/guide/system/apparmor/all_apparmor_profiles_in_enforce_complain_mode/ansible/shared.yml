# platform = multi_platform_sle
# reboot = false
# strategy = restrict
# complexity = low
# disruption = low

{{{ ansible_instantiate_variables("var_apparmor_mode") }}}

- name: {{{ rule_title }}} - Ensure all AppArmor Profiles are reloaded
  ansible.builtin.command: apparmor_parser -q -r /etc/apparmor.d/

- name: {{{ rule_title }}} - Set all AppArmor profiles to enforce mode
  ansible.builtin.command: aa-enforce /etc/apparmor.d/*
  when: var_apparmor_mode == 'enforce'

- name: {{{ rule_title }}} - Set all AppArmor profiles to complain mode
  ansible.builtin.command: aa-complain /etc/apparmor.d/*
  when: var_apparmor_mode == 'complain'

- name: {{{ rule_title }}} - Collect unconfined processes
  ansible.builtin.command: aa-unconfined
  register: unconfined_processes

- name: {{{ rule_title }}} - Provide details about unconfined processes
  ansible.builtin.assert:
    that:
       - unconfined_processes.stdout_lines | length > 0
    success_msg: "The process {{ item }} may need to have a profile created or activated for them and then be restarted."
    fail_msg: ""
  with_items: "{{ unconfined_processes.stdout_lines }}"
  when: unconfined_processes is not skipped
