# platform = multi_platform_all
# reboot = false
# strategy = configure
# complexity = low
# disruption = medium

- name: "{{{ rule_title }}}: Set facts"
  set_fact:
    conf_files: [ '/etc/rsyslog.conf' ]
    remote_methods:
      - selector: 'auth.*'
        regexp: ^.*auth\.\*.*$
      - selector: 'authpriv.*'
        regexp: ^.*authpriv\.\*.*$
      - selector: 'daemon.*'
        regexp: ^.*daemon\.\*.*$

- name: "{{{ rule_title }}}: Ensure rsyslog.conf exists"
  file:
    path: "{{ conf_files.0 }}"
    state: touch

- name: "{{{ rule_title }}}: Gather conf.d files"
  find:
    patterns:
      - '*.conf'
    paths:
      - /etc/rsyslog.d
  register: rsyslogd

- name: "{{{ rule_title }}}: Set conf file(s)"
  set_fact:
    conf_files: "{{ conf_files + [item.path] }}"
  loop: "{{ rsyslogd.files }}"
  when: rsyslogd.matched > 0

- name: "{{{ rule_title }}}: Check for existing values"
  lineinfile:
    path: "{{ item.1 }}"
    regexp: "{{ item.0.regexp }}"
    state: absent
  check_mode: true
  changed_when: false
  register: remote_method_values
  loop: "{{ remote_methods|product(conf_files)|list }}"

- name: "{{{ rule_title }}}: Configure"
  lineinfile:
    path: /etc/rsyslog.conf
    line: "{{ item.item.0.selector }} /var/log/secure"
    insertafter: ^.*\/var\/log\/secure.*$
    create: yes
  loop: '{{ remote_method_values.results }}'
  when: item.found == 0
