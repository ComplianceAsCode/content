# platform = multi_platform_sle
# reboot = false
# strategy = restrict
# complexity = low
# disruption = low

- name: Service facts
  service_facts:

- name: Check if auditctl rules script being used
  ansible.builtin.find:
    paths: '/usr/lib/systemd/system/'
    patterns: 'auditd.service'
    contains: '^\s*(ExecStartPost|Requires)\s*=[\s\-]*[\w\/]*auditctl'
  register: auditd_svc_auditctl_used

- name: Check augenrules rules script being used
  ansible.builtin.find:
    paths: '/usr/lib/systemd/system/'
    patterns: 'auditd.service'
    contains: '^\s*(ExecStartPost|Requires)\s*=[\s\-]*[\w\/]*augenrules'
  register: auditd_svc_augen_used

- name: Find audit rules in /etc/audit/rules.d
  find:
    paths: /etc/audit/rules.d
    file_type: file
    follow: yes
  register: find_audit_rules_result
  when:
    - '"auditd.service" in ansible_facts.services'
    - auditd_svc_augen_used is defined and auditd_svc_augen_used.matched >= 1

- name: Enable syscall auditing (augenrules)
  lineinfile:
    path: "{{ item.path }}"
    regex: ^(?i)(\s*-a\s+task,never)\s*$
    line: '#-a task,never'
  with_items: "{{ find_audit_rules_result.files }}"
  when:
    - '"auditd.service" in ansible_facts.services'
    - auditd_svc_augen_used is defined and auditd_svc_augen_used.matched >= 1
  register: augenrules_syscall_auditing_rule_update_result

- name: Enable syscall auditing (auditctl)
  lineinfile:
    path: /etc/audit/audit.rules
    regex: ^(?i)(\s*-a\s+task,never)\s*$
    line: '#-a task,never'
  when:
    - '"auditd.service" in ansible_facts.services'
    - auditd_svc_auditctl_used is defined and auditd_svc_auditctl_used.matched >= 1
  register: auditctl_syscall_auditing_rule_update_result

- name: Restart auditd.service
  systemd:
    name: auditd.service
    state: restarted
  when:
    - ansible_facts.services["auditd.service"].state == "running"
    - (augenrules_syscall_auditing_rule_update_result.changed or
       auditctl_syscall_auditing_rule_update_result.changed)
