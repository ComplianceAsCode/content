# platform = multi_platform_sle
# reboot = false
# strategy = restrict
# complexity = low
# disruption = low

- name: Service facts
  service_facts:

- name: Check the rules script being used
  command:
    grep -E '^(ExecStartPost|Requires)' /usr/lib/systemd/system/auditd.service
  register: check_rules_scripts_result

- name: Find audit rules in /etc/audit/rules.d
  find:
    paths: /etc/audit/rules.d
    file_type: file
    follow: yes
  register: find_audit_rules_result
  when:
    - '"auditd.service" in ansible_facts.services'
    - '"augenrules" in check_rules_scripts_result.stdout'

- name: Enable syscall auditing (augenrules)
  lineinfile:
    path: "{{ item.path }}"
    regex: ^(?i)(\s*-a\s+task,never)\s*$
    line: '#-a task,never'
  with_items: "{{ find_audit_rules_result.files }}"
  when:
    - '"auditd.service" in ansible_facts.services'
    - '"augenrules" in check_rules_scripts_result.stdout'
  register: augenrules_syscall_auditing_rule_update_result

- name: Enable syscall auditing (auditctl)
  lineinfile:
    path: /etc/audit/audit.rules
    regex: ^(?i)(\s*-a\s+task,never)\s*$
    line: '#-a task,never'
  when:
    - '"auditd.service" in ansible_facts.services'
    - '"auditctl" in check_rules_scripts_result.stdout'
  register: auditctl_syscall_auditing_rule_update_result

- name: Restart auditd.service
  systemd:
    name: auditd.service
    state: restarted
  when:
    - ansible_facts.services["auditd.service"].state == "running"
    - (augenrules_syscall_auditing_rule_update_result.changed or
       auditctl_syscall_auditing_rule_update_result.changed)
