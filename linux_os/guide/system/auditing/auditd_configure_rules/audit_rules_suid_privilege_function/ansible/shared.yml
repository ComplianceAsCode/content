# platform = multi_platform_fedora,multi_platform_ol,multi_platform_rhel,multi_platform_sle
# reboot = false
# strategy = restrict
# complexity = low
# disruption = low

{{% if product != "ol8" %}}
{{% set egid_arg = " -F egid=0" %}}
{{% set euid_arg = " -F euid=0" %}}
{{% endif %}}

{{% set rx_beg = "^[\s]*-a[\s]+always,exit[\s]+" %}}
{{% set rx_b32 = "-F[\s]+arch=b32[\s]+" %}}
{{% set rx_b64 = "-F[\s]+arch=b64[\s]+" %}}

{{% if product == "ol8" %}}
{{% set rx_uid = "-S[\s]+execve[\s]+-C[\s]+uid!=euid[\s]+" %}}
{{% set rx_gid = "-S[\s]+execve[\s]+-C[\s]+gid!=egid[\s]+" %}}
{{% else %}}
{{% set rx_uid = "-S[\s]+execve[\s]+-C[\s]+uid!=euid[\s]+-F[\s]+euid=0[\s]+" %}}
{{% set rx_gid = "-S[\s]+execve[\s]+-C[\s]+gid!=egid[\s]+-F[\s]+egid=0[\s]+" %}}
{{% endif %}}

{{% set rx_end = "(?:-k[\s]+|-F[\s]+key=)[\S]+[\s]*$" %}}

- name: Service facts
  ansible.builtin.service_facts:

- name: Set suid_audit_rules fact
  ansible.builtin.set_fact:
    suid_audit_rules:
      - rule: '-a always,exit -F arch=b32 -S execve -C gid!=egid{{{ egid_arg }}} -k setgid'
        regex: {{{ rx_beg + rx_b32 + rx_gid + rx_end }}}
      - rule: '-a always,exit -F arch=b64 -S execve -C gid!=egid{{{ egid_arg }}} -k setgid'
        regex: {{{ rx_beg + rx_b64 + rx_gid + rx_end }}}
      - rule: '-a always,exit -F arch=b32 -S execve -C uid!=euid{{{ euid_arg }}} -k setuid'
        regex: {{{ rx_beg + rx_b32 + rx_uid + rx_end }}}
      - rule: '-a always,exit -F arch=b64 -S execve -C uid!=euid{{{ euid_arg }}} -k setuid'
        regex: {{{ rx_beg + rx_b64 + rx_uid + rx_end }}}

- name: Update /etc/audit/rules.d/privileged.rules to audit privileged functions
  ansible.builtin.lineinfile:
    path: /etc/audit/rules.d/privileged.rules
    line: "{{  item.rule  }}"
    regexp: "{{ item.regex }}"
    create: yes
  when:
    - ('"auditd.service" in ansible_facts.services' or 
        '"augenrules.service" in ansible_facts.services')
  register: augenrules_audit_rules_privilege_function_update_result
  with_items: "{{ suid_audit_rules }}"

- name: Update Update /etc/audit/audit.rules to audit privileged functions
  ansible.builtin.lineinfile:
    path: /etc/audit/audit.rules
    line: "{{  item.rule  }}"
    regexp: "{{ item.regex }}"
    create: yes
  when:
    - ('"auditd.service" in ansible_facts.services' or 
        '"augenrules.service" in ansible_facts.services')
  register: auditctl_audit_rules_privilege_function_update_result
  with_items: "{{ suid_audit_rules }}"

{{%- if product in ['sle12', 'sle15'] %}}
- name: Restart auditd.service
  ansible.builtin.systemd:
    name: auditd.service
    state: restarted
{{%- else %}} # restarting auditd through systemd doesn't work, see: https://access.redhat.com/solutions/5515011
- name: Restart Auditd
  ansible.builtin.command: /usr/sbin/service auditd restart
{{%- endif %}}
  when:
    - (augenrules_audit_rules_privilege_function_update_result.changed or
       auditctl_audit_rules_privilege_function_update_result.changed)
    - ansible_facts.services["auditd.service"].state == "running"
