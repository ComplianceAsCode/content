# platform = multi_platform_sle
# reboot = false
# strategy = restrict
# complexity = low
# disruption = low

- name: Service facts
  service_facts:

- name: Check if auditctl rules script being used
  ansible.builtin.find:
    paths: '/usr/lib/systemd/system/'
    patterns: 'auditd.service'
    contains: '^\s*ExecStartPost\s*=[\s\-]*[\w\/]*auditctl'
  register: auditd_svc_auditctl_used

- name: Check augenrules rules script being used
  ansible.builtin.find:
    paths: '/usr/lib/systemd/system/'
    patterns: 'auditd.service'
    contains: '^\s*ExecStartPost\s*=[\s\-]*[\w\/]*augenrules'
  register: auditd_svc_augen_used

- name: Update kmod in /etc/audit/rules.d/audit.rules
  lineinfile:
    path: /etc/audit/rules.d/audit.rules
    line: '-w /usr/bin/kmod -p x -k modules'
    create: yes
  when:
    - '"auditd.service" in ansible_facts.services'
    - auditd_svc_augen_used is defined and auditd_svc_augen_used.matched >= 1
  register: augenrules_audit_rules_kmod_update_result

- name: Update kmod in /etc/audit/audit.rules
  lineinfile:
    path: /etc/audit/audit.rules
    line: '-w /usr/bin/kmod -p x -k modules'
    create: yes
  when:
    - '"auditd.service" in ansible_facts.services'
    - auditd_svc_auditctl_used is defined and auditd_svc_auditctl_used.matched >= 1
  register: auditctl_audit_rules_kmod_update_result

- name: Restart auditd.service
  systemd:
    name: auditd.service
    state: restarted
  when:
    - (augenrules_audit_rules_kmod_update_result.changed or
       auditctl_audit_rules_kmod_update_result.changed)
    - ansible_facts.services["auditd.service"].state == "running"
