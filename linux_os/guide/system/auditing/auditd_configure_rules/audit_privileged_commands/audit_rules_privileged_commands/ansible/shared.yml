# platform = multi_platform_rhel,multi_platform_fedora,multi_platform_ol,multi_platform_rhv
# reboot = false
# strategy = restrict
# complexity = low
# disruption = low

- name: "Configure excluded (non local) file systems"
  set_fact:
    excluded_fstypes:
      - afs
      - ceph
      - cifs
      - smb3
      - smbfs
      - sshfs
      - ncpfs
      - ncp
      - nfs
      - nfs4
      - gfs
      - gfs2
      - glusterfs
      - gpfs
      - pvfs2
      - ocfs2
      - lustre
      - davfs
      - fuse.sshfs

- name: "Create empty list of excluded paths"
  set_fact:
    excluded_paths: []

- name: "Create empty list of suid / sgid binaries"
  set_fact:
    suid_sgid_binaries: []

- name: "Detect nonlocal file systems and add them to excluded paths"
  set_fact: 
    excluded_paths: "{{ excluded_paths | union([item.mount]) }}"
  loop: "{{ ansible_mounts }}"
  when: item.fstype in excluded_fstypes

- name: "Find all files excluding non-local partitions"
  find:
    paths: "/"
    excludes: excluded_paths
    file_type: file
    hidden: yes
    recurse: yes
  register: found_files

- name: "construct list of suid or sgid binaries"
  set_fact:
    suid_sgid_binaries: "{{ suid_sgid_binaries | union([item.path]) }}"
  when: item.mode is match("2.*") or item.mode is match("4.*")
  loop: '{{ found_files.files }}'

# Inserts/replaces the rule in /etc/audit/rules.d

- name: Search /etc/audit/rules.d for audit rule entries
  find:
    paths: "/etc/audit/rules.d"
    recurse: no
    contains: "^.*path={{ item }} .*$"
    patterns: "*.rules"
  loop: "{{ suid_sgid_binaries }}"
  register: files_result

- name: Overwrites the rule in rules.d
  lineinfile:
    path: "{{ item.1.path }}"
    line: '-a always,exit -F path={{ item.0.item }} -F auid>={{{ auid }}} -F auid!=unset -F key=privileged'
    create: no
    regexp: "^.*path={{ item.0.item }} .*$"
  with_subelements:
    - "{{ files_result.results }}"
    - files

- name: Adds the rule in rules.d
  lineinfile:
    path: /etc/audit/rules.d/privileged.rules
    line: '-a always,exit -F path={{ item.item }} -F auid>={{{ auid }}} -F auid!=unset -F key=privileged'
    create: yes
  with_items:
    - "{{ files_result.results }}"
  when: files_result.results is defined and item.matched == 0

# Adds/overwrites the rule in /etc/audit/audit.rules

- name: Inserts/replaces the rule in audit.rules
  lineinfile:
    path: /etc/audit/audit.rules
    line: '-a always,exit -F path={{ item.item }} -F auid>={{{ auid }}} -F auid!=unset -F key=privileged'
    create: yes
    regexp: "^.*path={{ item.item }} .*$"
  with_items:
    - "{{ files_result.results }}"
