<Group id="keystone">
<title>Keystone STIG Checklist</title>
<description>High level overview of Keystone STIG settings to go here!</description>

<Rule id="keystone_file_ownership">
<title>Check-Identity-01: Is user/group ownership of config files set to keystone?</title>
<description>
Configuration files contain critical parameters and information required for smooth functioning of the component. If an unprivileged user, either intentionally or accidentally modifies or deletes any of the parameters or the file itself then it would cause severe availability issues causing a denial of service to the other end users. Thus user and group ownership of such critical configuration files must be set to that component owner.
<br />
<br />
Run the following commands:
<br />
<br />
<tt>
$ stat -L -c "%U %G" /etc/keystone/keystone.conf | egrep "keystone keystone" <br />
$ stat -L -c "%U %G" /etc/keystone/keystone-paste.ini | egrep "keystone keystone"<br />
$ stat -L -c "%U %G" /etc/keystone/policy.json | egrep "keystone keystone"<br />
$ stat -L -c "%U %G" /etc/keystone/logging.conf | egrep "keystone keystone"<br />
$ stat -L -c "%U %G" /etc/keystone/ssl/certs/signing_cert.pem | egrep "keystone keystone"<br />
$ stat -L -c "%U %G" /etc/keystone/ssl/private/signing_key.pem | egrep "keystone keystone"<br />
$ stat -L -c "%U %G" /etc/keystone/ssl/certs/ca.pem | egrep "keystone keystone"<br />
</tt>
<br />
<br />
Pass: If user and group ownership of all these config files is set to keystone. The above commands show output of keystone keystone.
<br />
<br />
Fail: If the above commands does not return any output as the user or group ownership might have set to any user other than keystone.
</description>
<!-- <oval id="keystone_file_ownership" /> -->
</Rule>

<Rule id="keystone_file_perms">
<title>Check-Identity-02: Are strict permissions set for Identity configuration files?</title>
<description>
Similar to the previous check, it is recommended to set strict access permissions for such configuration files.
<br />
<br />
Run the following commands:
<br />
<br />
<tt> 
$ stat -L -c "%a" /etc/keystone/keystone.conf<br />
$ stat -L -c "%a" /etc/keystone/keystone-paste.ini<br />
$ stat -L -c "%a" /etc/keystone/policy.json<br />
$ stat -L -c "%a" /etc/keystone/logging.conf<br />
$ stat -L -c "%a" /etc/keystone/ssl/certs/signing_cert.pem<br />
$ stat -L -c "%a" /etc/keystone/ssl/private/signing_key.pem<br />
$ stat -L -c "%a" /etc/keystone/ssl/certs/ca.pem<br />
</tt>
<br />
<br />
Pass: If permissions are set to 640 or stricter.
<br />
<br />
Fail: If permissions are not set to at least 640.
</description>
<!-- <oval id="keystone_file_perms" /> -->
</Rule>

<Rule id="keystone_use_ssl">
<title>Check-Identity-03: is SSL enabled for Identity?</title>
<description>
OpenStack components communicate with each other using various protocols and the communication might involve sensitive or confidential data. An attacker may try to eavesdrop on the channel in order to get access to sensitive information. Thus all the components must communicate with each other using a secured communication protocol like HTTPS.
<br />
<br />
Pass: If value of parameter enable under [ssl] section in /etc/keystone/keystone.conf is set to True.

<br />
<br />
Fail: If value of parameter enable under [ssl] section is not set to True.
</description>
<!-- <oval id="keystone_use_ssl" /> -->
</Rule>

<Rule id="keystone_algorithm_hashing">
<title>Check-Identity-04: Does Identity use strong hashing algorithms for PKI tokens?</title>
<description>
MD5 is a weak and depreciated hashing algorithm. It can be cracked using brute force attack. Identity tokens are sensitive and need to be protected with a stronger hashing algorithm to prevent unauthorized disclosure and subsequent access.

<br />
<br />
Pass: If value of parameter hash_algorithm under [token] section in /etc/keystone/keystone.conf is set to SHA256.
<br />
<br />

Fail: If value of parameter hash_algorithm under [token]section is set to MD5.
</description>
<!-- <oval id="keystone_algorithm_hashing" /> -->
</Rule>

<Rule id="keystone_max_request_body_size">
<title>Check-Identity-05: Is max_request_body_size set to default (114688)?</title>
<description>
The parameter max_request_body_size defines the maximum body size per request in bytes. If the maximum size is not defined, the attacker could craft an arbitrary request of large size causing the service to crash and finally resulting in Denial Of Service attack. Assigning the maximum value ensures that any malicious oversized request gets blocked ensuring continued availability of the component.

<br />
<br />
Pass: If value of parameter max_request_body_size in /etc/keystone/keystone.conf is set to default (114688) or some reasonable value based on your environment.

<br />
<br />
Fail: If value of parameter max_request_body_size is not set.
</description>
<!-- <oval id="keystone_max_request_body_size" /> -->
</Rule>

<Rule id="keystone_disable_admin_token">
<title>Check-Identity-06: Disable admin token in /etc/keystone/keystone.conf</title>
<description>
The admin token is generally used to bootstrap Identity. This token is the most valuable Identity asset, which could be used to gain cloud admin privileges.

<br />
<br />
Pass: If admin_token under [DEFAULT] section in /etc/keystone/keystone.conf is disabled. And, AdminTokenAuthMiddleware under [filter:admin_token_auth] is deleted from /etc/keystone/keystone-paste.ini

<br />
<br />
Fail: If admin_token under [DEFAULT] section is set and AdminTokenAuthMiddleware exists in keystone-paste.ini.
</description>
<!-- <oval id="keystone_disable_admin_token" /> -->
</Rule>

</Group>
