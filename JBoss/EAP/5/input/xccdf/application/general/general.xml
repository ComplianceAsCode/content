<Group id="general_configuration">
<title>General Configuration</title>
<description>
The rules in this group validation general configuration items.
</description>

<Rule id="jboss_eap_vendor_supported" severity="high">
<title>Ensure JBoss Enterprise Application Platform Is Supported</title>
<description>
Evaluated JBoss installation must be a vendor supported version of JBoss
Enterprise Application Platform 5. Red Hat typically offers full and production
support for the first 7 years following a release. Extended support options can
be negotiated with the vendor directly through a separate subscription.
Organizations using JBoss EAP must use a vendor supported version with an
active support contract.
</description>
<ocil clause="it is not supported or a supported version">
</ocil>
<rationale>
Failure to utilize a supported version of JBoss in a production environment can
lead to outages, unresolvable problems, no access to security or functional
updates, etc.
</rationale>


To determine the version of JBoss EAP installed, perform the following actions: <xhtml:ul>

<xhtml:li>
Execute run.bat --version or run.sh --version located within JBOSS_HOME/bin
</xhtml:li>


</xhtml:ul>

The output of the command above will display a variety of information; including the version and build information for JBoss.

Next, review support documentation and interview JBoss administrators. Work with JBoss administrators to access the Red Hat Network customer portal in order to review and validate active subscriptions (<xhtml:a href="https://access.redhat.com/home">
https://access.redhat.com/home
</xhtml:a>
). Additionally, ensure the version of JBoss has not reached end-of-life. Organizations using JBoss EAP must use a vendor supported version with an active support contract.

<fixtext>

Other environments should install a vendor supported version of Red Hat JBoss Enterprise Application Platform and maintain an active subscription. Contact Red Hat directly to subscribe to the JBoss software channel (<xhtml:a href="http://www.redhat.com">
http://www.redhat.com
</xhtml:a>
).

Ensure downloaded software is checked against vendor supplied hashes to ensure the software has not been modified in transit.  Tools such as sha1sum or md5sum (Linux) or File Checksum Integrity Verifier (FCIV) for Windows can be used to generate hash checksums for downloaded files.


</fixtext>
<ident cce="" />
<oval id="jboss_eap_vendor_supported" />
<ref nist="CM-6" disa="DCCS-1,DCCS-2,DCCT-1,ECSC-1,DCSS-1" cis="" />
</Rule>

<Rule id="jboss_eap_jre_supported" severity="high">
<title>Ensure Java Runtime Environment Is Supported Version</title>
<description>
Evaluated JBoss installation must use a vendor supported Java virtual machine -
i.e., one that has not reached end-of-life. Migration strategies should be
developed when end-of-life is impending.
</description>
<ocil clause="it is not supported or a supported version">
</ocil>
<rationale>
Java installations should be a vendor supported version. If the Java virtual
machine in use by JBoss is not supported by the vendor, this may result in
outages, unresolvable problems, no access to security or functional updates,
etc.
</rationale>


To identify the JRE used by JBoss, perform the following actions:<xhtml:ul>

<xhtml:li>
Execute run.bat --version or run.sh --version located within JBOSS_HOME/bin
</xhtml:li>


</xhtml:ul>


The output of the command above will display a variety of information; including the vendor and version information for the JRE in use by JBoss. Search the vendor's website and support documentation to ensure the vendor actively supports the version of Java virtual machine in use. If the software will reach end-of-life within the next year, ensure the organization is developing a migration plan.

Java Runtime Environments commonly used with JBoss include:
<xhtml:ul>

<xhtml:li>
Sun JRE 1.6.x
</xhtml:li>

<xhtml:li>
IBM JRE 1.6.x
</xhtml:li>

<xhtml:li>
OpenJDK JRE 1.6.x
</xhtml:li>

</xhtml:ul>

<fixtext>

Organizations should install a vendor supported Java Runtime Environment.

Ensure downloaded software is checked against vendor supplied hashes to ensure the software has not been modified in transit.  Tools such as sha1sum or md5sum (Linux) or File Checksum Integrity Verifier (FCIV) for Windows can be used to generate hash checksums for downloaded files.

Finally, organizations must develop migration plans for Java Runtime Environments that reach end-of-life within the next year.


</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_jre_supported" /-->
<ref nist="CM-6" disa="DCCS-1,DCCS-2,DCCT-1,ECSC-1,DCSS-1" cis="" />
</Rule>

<Rule id="jboss_eap_config_server_profile" severity="low">
<title>Ensure All Configurations Use Correct Server Profile</title>
<description>
Production environments should utilize the production server profile.
Development and test environments should choose the profile that best fits
their needs.
</description>
<ocil clause="it does not use the correct profile, or the profile is not set">
</ocil>
<rationale>
The JBoss server profiles are preconfigured with various deployed applications.
Using a more restrictive profile ensures that less applications are deployed,
minimizing the attack surface of the JBoss server and decreasing the amount of
trimming that must be performed.
</rationale>

<fixtext>
JBoss administrators should use the profiles as defined in the validation text.

</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_config_server_profile" /-->
<ref nist="CM-6" disa="DCCS-1,DCCS-2,DCCT-1,ECSC-1,DCSS-1" cis="" />
</Rule>

<Rule id="jboss_eap_disable_tech_preview" severity="low">
<title>Ensure Technology Preview Is Disabled</title>
<description>
Remove the PicketLink technology preview folder. By default, this folder is
included at the same level as the JBoss-as folder. If you leave the picketlink
folder as originally shipped in the EAP binary, PicketLink is unable to be
launched, and subsequently interact with the certified configuration.
</description>
<ocil clause="technology preview is not disabled">
</ocil>
<rationale>
Technology Preview components are not production-ready, vendor supported JBoss
components. They may be incomplete, contain bugs, insecure features, or
architecture, etc.
</rationale>


<fixtext>
Delete the JBOSS_HOME/picketlink/ folder.

</fixtext>
<ident cce="" />
<oval id="jboss_eap_disable_tech_preview" />
<ref nist="CM-7" disa="DCPP-1" cis="" />
</Rule>

<Rule id="jboss_eap_disable_hot_deployment" severity="low">
<title>Disable Hot Deployment</title>
<description>
Hot deployment should be disabled on production servers. Hot Deployment allows
for automatic deployment of Java applications by simply placing Java
applications into the deploy directory.
</description>
<ocil clause="hot deployment is not disabled">
</ocil>
<rationale>
Hot deployments are not a recommended best practice for production environments.
By requiring the additional step of restarting the JBoss server, application
deployments become more deliberate and purposeful. Additionally, the JBoss Hot
Deployment feature has been known to become unstable over time - consuming
additional memory and resources.
</rationale>




<fixtext>
Delete the following file:

<xhtml:ul>
<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/hdscanner-jboss-beans.xml
</xhtml:li>

</xhtml:ul>

</fixtext>
<ident cce="" />
<oval id="jboss_eap_disable_hot_deployment" />
<ref nist="CM-7" disa="DCPP-1" cis="" />
</Rule>

<Rule id="jboss_eap_configure_SRPVerifierStore" severity="low">
<title>Ensure The SRPVerifierStore Interface Is Correctly Configured</title>
<description>
The SRP protocol is a public key exchange protocol similar to Diffie-Hellman.
The default implementation of the SRPVerifierStore interface is not recommended
for a production security environment because it requires all password hash
information to be available as a file of serialized objects.
</description>
<ocil clause="it is the default and/or not configured correctly">
</ocil>
<rationale>
Serializing objects is not a recommended practice for Java applications. 
Object serialization shows poor performance and is not typically scalable for
production. Additionally, object serialization creates dependency concerns
within the object hierarchy.
</rationale>
			
<fixtext>
Application developers should not use the default implementation for SRPVerifierStore, and should extend it to avoid the use of serialized password objects.

</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_configure_SRPVerifierStore" /-->
<ref nist="CM-6" disa="DCCS-1,DCCS-2,DCCT-1,ECSC-1,DCSS-1" cis="" />
</Rule>

<Rule id="jboss_eap_configure_ejb_auth_policy" severity="medium">
<title>Configure An EJB Authorization Policy</title>
<description>
When configuring your application specific security policy, you must declare
one (or more) of the following authorization modules in the security domain
&lt;policy-module&gt; element.
<xhtml:ul>
<xhtml:li>
org.JBoss.security.authorization.modules.DelegatingAuthorizationModule
</xhtml:li>

<xhtml:li>
org.JBoss.security.authorization.modules.JACCAuthorizationModule
</xhtml:li>

</xhtml:ul>

A security domain does not explicitly require an authorization policy. If an authorization policy is not specified, the default jboss-web-policy and jboss-ejb-policy authorization configured in jboss-as/server/$PROFILE/deploy/security/security-policies-jboss-beans.xml is used. If you do choose to specify an authorization policy, or create a custom deployment descriptor file with a valid authorization policy, these settings override the default settings in security-policies-jboss-beans.xml.
</description>
<ocil clause="an ejb policy is not configured or not configured correctly">
</ocil>
<rationale>
Explicitly referencing one of the identified authorization modules ensures that
applications extend the security policies defined in
security-policies-jboss-beans.xml. This allows JBoss administrators to set a
secure baseline that can be tuned on a per-application basis.
</rationale>



Review possible locations for definition of &lt;application-policy&gt; elements. Specifically, ensure that 'code' attributes for &lt;authorization&gt;&lt;policy-module&gt; elements are either 'org.JBoss.security.authorization.modules.DelegatingAuthorizationModule' or 'org.JBoss.security.authorization.modules.JACCAuthorizationModule'.

These &lt;application-policy&gt; can be defined in the server profile conf directory, in an application deployment descriptor, or directly deployed as an MBean.

<xhtml:ul>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/conf/login-config.xml
</xhtml:li>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/[APPLICATION]/META-INF/*-jboss-beans.xml
</xhtml:li>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/[APPLICATION]/WEB-INF/*-jboss-beans.xml
</xhtml:li>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/*-jboss-beans.xml
</xhtml:li>

</xhtml:ul>

<fixtext>

Applications deploying their own security policies must specify one of the following &lt;policy-module&gt; within their 'code' attributes:

<xhtml:ul>
<xhtml:li>
org.JBoss.security.authorization.modules.DelegatingAuthorizationModule
</xhtml:li>

<xhtml:li>
org.JBoss.security.authorization.modules.JACCAuthorizationModule
</xhtml:li>

</xhtml:ul>


Example:

<xhtml:pre>
<xhtml:code>
&lt;application-policy name="demo"&gt;
&lt;authorization&gt;
&lt;policy-module code="org.JBoss.security.authorization.modules.JACCAuthorizationModule"&gt;&lt;/policy-module&gt;
&lt;/authorization&gt;
&lt;/application-policy&gt;
</xhtml:code>

</xhtml:pre>


</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_configure_ejb_auth_policy" /-->
<ref nist="AC-3,AC-4" disa="ECAN-1,ECCD-1,ECCD-2,ECCR-2,ECIC-1,ECAN-1,EBBD-1,EBBD-2,EBBD-3" cis="" />
</Rule>

<Rule id="jboss_eap_jdbc_permissions" severity="medium">
<title>Ensure Secure Java Database Connectivity (JDBC) Permissions</title>
<description>
The security manager policy file may require permissions to be set for database
drivers. The JBoss administrator can assign permissions to the database drivers
that are needed by deployed applications. It is recommended that the most
restrictive permissions are added. With some installations, permissions must be
granted to database drivers that are not available to deployed applications;
such as java.net.SocketPermission.
</description>
<ocil clause="jdbc permissions are not secure">
</ocil>
<rationale>
Deployed applications requiring access to data sources should have limited
permissions to interact with the database drivers.
</rationale>


To validate compliance, review all policy files defining permissions for the Java Security Manager. In a default Common Criteria compliant JBoss deployment the following policy files will be utilized by JSM (review run.conf or run.conf.bat for more):

<xhtml:ul>
<xhtml:li>
java.home/lib/security/java.security
</xhtml:li>

<xhtml:li>
JBOSS_HOME/bin/security_cc.policy
</xhtml:li>

</xhtml:ul>

<fixtext>

The JBoss administrator must assign the most restrictive permissions possible (in accordance with the least privilege principle) to applications accessing defined data sources. This should be done in cooperation with application developers or application documentation. Substitute the directory name of the JDBC driver where [JDBC.DRIVER] is specified in the code sample.

<xhtml:pre>
<xhtml:code>
// granting permissions to JDBC driver
grant codeBase "file:${JBoss.server.home.dir}/lib/[JDBC.DRIVER]" {
//JDBC specific permissions to be granted go here
};
</xhtml:code>

</xhtml:pre>


</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_jdbc_permissions" /-->
<ref nist="AC-3,AC-6" disa="ECAN-1,ECCD-1,ECCD-2,ECCR-2,ECIC-1,ECAN-1,ECLP-1" cis="" />
</Rule>

<Rule id="jboss_eap_configure_DefaultDS" severity="low">
<title>Ensure DefaultDS Is Enabled And Configured Correctly</title>
<description>
Create a default data store file for the desired database. Templates are
located in JBOSS_HOME/docs/examples/jca.
<br/><br/>
The DefaultDS must not be a HSQLDB.
</description>
<ocil clause="it is not enabled or configured correctly">
</ocil>
<rationale>
To help ensure robust server operations, a DefaultDS that does not use HSQLDB
should be specified. DefaultDS is used by some JBoss components by default.
</rationale>


Review defined data sources in the JBOSS_HOME/server/[PROFILE]/deploy directory. Data sources will be suffixed as -ds.xml. Search for a data source with a &lt;jndi-name&gt;DefaultDS&lt;/jndi-name&gt; element. OS text searching utilities can help find the DefaultDS. The DefaultDS CANNOT be HSQL. An HSQL data source will contain elements like: &lt;driver-class&gt;org.hsqldb.jdbcDriver&lt;/driver-class&gt; and &lt;type-mapping&gt;Hypersonic SQL&lt;/type-mapping&gt;.

<fixtext>

Create a default DS file for the desired database at JBOSS_HOME/server/[PROFILE]/deploy/DefaultDS.xml. Examples of this file are located in JBOSS_HOME/docs/examples/jca. The DefaultDS must not be a HSQLDB.

</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_configure_DefaultDS" /-->
<ref nist="SC-4" disa="ECRC-1" cis="" />
</Rule>

<Rule id="jboss_eap_disable_writing_DefaultDS" severity="medium">
<title>Disable Writing Data to DefaultDS</title>
<description>
Deployed applications (other than JBoss default applications) must not write
information to the database defined by the DefaultDS data source. These
applications must use a database specific to the application.
</description>
<ocil clause="data writing to DefaultDS is allowed and not disabled">
</ocil>
<rationale>
Sharing databases between applications is a poor security practice that can
create injection and leakage vulnerabilities that cross application boundaries.
</rationale>


Next, review the data source definition files (files suffixed *.xml) used by the deployed user applications to ensure they do not reference the same database used by the DefaultDS.

<fixtext>
Create and deploy a data source in addition to the DefaultDS to store application data. This new data source must not point to the same database as the DefaultDS data source.

Data source templates can be found in the JBOSS_HOME/docs/examples/jca/ directory.

</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_disable_writing_DefaultDS" /-->
<ref nist="SC-4" disa="ECRC-1" cis="" />
</Rule>

<Rule id="jboss_eap_disable_hsqldb" severity="low">
<title>Ensure HSQLDB Is Disabled</title>
<description>
The default development HSQL database included with JBoss should be removed.
</description>
<ocil clause="it is not disabled">
</ocil>
<rationale>
HSQL is not meant for production environments - it is there to speed development
and enable faster application prototyping. Thus, it is not a full-featured data
source intended for production use.
</rationale>



<fixtext>

Delete the following files that refer to the HSQLDB database:

<xhtml:ul>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/hsqldb-ds.xml
</xhtml:li>

<xhtml:li>
JBOSS_HOME/common/lib/hsqldb.jar
</xhtml:li>

<xhtml:li>
JBOSS_HOME/common/lib/hsqldb-plugin.jar
</xhtml:li>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/messaging/hsqldb-persistence-service.xml
</xhtml:li>


</xhtml:ul>

Delete the HSLQDB database files:

<xhtml:ul>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/data/hypersonic/*
</xhtml:li>


</xhtml:ul>


</fixtext>
<ident cce="" />
<oval id="jboss_eap_disable_hsqldb" />
<ref nist="SC-4" disa="ECRC-1" cis="" />
</Rule>

<Rule id="jboss_eap_remove_hsqldb_domain" severity="low">
<title>Remove the HSQLDB Security Domain</title>
<description>
The security domain for HsqlDbRealm should be removed from the JBOSS_HOME/server/[PROFILE]/conf/login-config.xml file.
</description>
<ocil clause="it is not removed">
</ocil>
<rationale>
HSQL is not meant for production environments - it is there to speed development and enable faster application prototyping. Thus, it is not a full-featured data source intended for production use.
</rationale>




<fixtext>

Remove the security domain for HsqlDbRealm in the JBOSS_HOME/server/[PROFILE]/conf/login-config.xml file as shown.

<xhtml:pre>
<xhtml:code>
&lt;!-- Security domains for testing new jca framework
&lt;application-policy name = "HsqlDbRealm"&gt;
&lt;authentication&gt;
&lt;login-module code = "org.JBoss.resource.security.ConfiguredIdentityLoginModule" flag = "required"&gt;
&lt;module-option name = "principal"&gt;sa&lt;/module-option&gt;
&lt;module-option name = "userName"&gt;cctest&lt;/module-option&gt;
&lt;module-option name = "password"&gt;cc1248&lt;/module-option&gt;
&lt;module-option name = "managedConnectionFactoryName"&gt;JBoss.jca:service=LocalTxCM,name=DefaultDS&lt;/module-option&gt;
&lt;/login-module&gt;
&lt;/authentication&gt;
&lt;/application-policy&gt;
--&gt;
</xhtml:code>

</xhtml:pre>


</fixtext>
<ident cce="" />
<oval id="jboss_eap_remove_hsqldb_domain" />
<ref nist="SC-4" disa="ECRC-1" cis="" />
</Rule>

<Rule id="jboss_eap_jms_persistence_file" severity="low">
<title>Ensure Java Messaging Service (JMS) Persistence Configuration File Usage</title>
<description>
The [database]-persistence-service.xml file contains the persistence service
definition for Java Messaging Service, for the database specified by the
[database] in the filename. The database must not be HSQLDB.
</description>
<ocil clause="it is not used or configured properly">
</ocil>
<rationale>
In order to function properly, JMS should be configured to use the appropriate
datastore.  Production environments require a persistence service definition
for JMS that does not use HSQLDB.
</rationale>


Interview the JBoss administrators and application developers to determine if JMS is in use. A quick check can also be performed by checking for the existence of the following files:

<xhtml:ul>
<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/messaging
</xhtml:li>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/jms-ra.rar
</xhtml:li>

</xhtml:ul>

If JMS is installed, a persistence-service.xml file must exist that does not use HSQLDB. This persistence file will be located in the following location:

<fixtext>
Copy the [database]-persistence-service.xml file that corresponds to the database you are using from the JBOSS_HOME/docs/examples/jms directory to JBOSS_HOME/server/[PROFILE]/deploy. Make any required content changes to fit the persistence service to the environment.

</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_jms_persistence_file" /-->
<ref nist="CM-6" disa="DCCS-1,DCCS-2,DCCT-1,ECSC-1,DCSS-1" cis="" />
</Rule>

<Rule id="jboss_eap_oracledb_plugin" severity="low">
<title>Configure Oracle Database Persistence Plugin</title>
<description>
When using the Oracle Database as the DefaultDS, the database persistence
plugin definition must be updated in
JBOSS_HOME/server/[PROFILE]/deploy/ejb2-timer-service.xml.
</description>
<ocil clause="it is not configured or not configured correctly">
</ocil>
<rationale>
This is a performance optimization when using Oracle Database as the DefaultDS.
</rationale>

Review defined data sources in the JBOSS_HOME/server/[PROFILE]/deploy directory. Data sources will be suffixed as -ds.xml. Search for a data source with a <jndi-name>
DefaultDS
</jndi-name>
 element. Review the DefaultDS datasource. If the DefaultDS is Oracle Database, review the persistence plugin located at JBOSS_HOME/server/[PROFILE]/deploy/ejb2-timer-service.xml. The DatabasePersistencePlugin attribute must be configured like below:

<xhtml:pre>
<xhtml:code>
&lt;attribute name="DatabasePersistencePlugin"&gt;
org.JBoss.ejb.txtimer.OracleDatabasePersistencePlugin
&lt;/attribute&gt;
</xhtml:code>

</xhtml:pre>

<fixtext>
When using the Oracle Database as the DefaultDS, the database persistence plugin definition must be updated in
JBOSS_HOME/server/[PROFILE]/deploy/ejb2-timer-service.xml to:

<xhtml:pre>
<xhtml:code>
&lt;attribute name="DatabasePersistencePlugin"&gt;
org.JBoss.ejb.txtimer.OracleDatabasePersistencePlugin
&lt;/attribute&gt;
</xhtml:code>

</xhtml:pre>

</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_oracledb_plugin" /-->
<ref nist="CM-6" disa="DCCS-1,DCCS-2,DCCT-1,ECSC-1,DCSS-1" cis="" />
</Rule>

<Rule id="jboss_eap_ibm_jre_configuration" severity="medium">
<title>Ensure IBM JRE 1.6 Is Configured Correctly</title>
<description>
When IBM JRE 1.6 is configured as the Java Runtime Environment, the following
configuration changes must be made to ensure compatibility between JBoss EAP and
IBM JRE.
<br /><br />
IBM JRE 1.6 uses a default policy provider which does not work correctly with
the JBoss Enterprise Application Platform security policy. The IBM JRE must be
reconfigured to use the standard policy provider.
</description>
<ocil clause="it is not configured or not configured correctly">
</ocil>
<rationale>
The IBM JRE 1.6 default policy provider does not work correctly with the JBoss
EAP security policy. Failure to assign the correct policy can lead to system
instability.
</rationale>



<fixtext>
When IBM JRE 1.6 is configured as the Java Runtime Environment, the following configuration changes must be made for compatibility:

Edit the file JAVA_HOME/jre/lib/security/java.security and set the value of policy.provider to sun.security.provider.PolicyFile

</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_ibm_jre_configuration" /-->
<ref nist="CM-6" disa="DCCS-1,DCCS-2,DCCT-1,ECSC-1,DCSS-1" cis="" />
</Rule>

<Rule id="jboss_eap_configure_security_domains" severity="medium">
<title>Configure JBoss Security Domains</title>
<description>
SecurityDomain is an extension of the AuthenticationManager, RealmMapping, and
SubjectSecurityManager interfaces. A java.security.KeyStore, and the Java
Secure Socket Extension (JSSE) com.sun.net.ssl.KeyManagerFactory and
com.sun.net.ssl.TrustManagerFactory interfaces are included in the class.
</description>
<ocil clause="security domains are not configured correctly">
</ocil>
<rationale>
SecurityDomain is the recommended way to implement security in components,
because of the advantages the JAAS Subject offers, and the increased support
offered to ASP-style application and resource deployments.
</rationale>



<fixtext>
Configure and apply SecurityDomains where appropriate for production applications.

For example, an &lt;application-policy&gt; (SecurityDomain) can be defined in the server profile conf directory, in an application deployment descriptor, or directly deployed as an MBean.

<xhtml:ul>
<xhtml:li>
JBOSS_HOME/server/[PROFILE]/conf/login-config.xml
</xhtml:li>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/[APPLICATION]/META-INF/*-jboss-beans.xml
</xhtml:li>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/[APPLICATION]/WEB-INF/*-jboss-beans.xml
</xhtml:li>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/*-jboss-beans.xml
</xhtml:li>

</xhtml:ul>

To determine which &lt;application-policy&gt; are in use by deployed applications, search for &lt;security-domain&gt; elements within the following deployment descriptors:

<xhtml:ul>
<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/[APPLICATION]/WEB-INF/jboss-web.xml
</xhtml:li>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/[APPLICATION]/WEB-INF/jboss.xml
</xhtml:li>

</xhtml:ul>

</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_configure_security_domains" /-->
<ref nist="AC-3,IA,SC" disa="ECAN-1,ECCD-1,ECCD-2,ECCR-2,ECIC-1,ECAN-1" cis="" />
</Rule>

<Rule id="jboss_eap_set_strict_mode" severity="medium">
<title>Set allRolesMode To Strict Mode</title>
<description>
The allRolesMode within
JBOSS_HOME/server/[PROFILE]/deploy/jbossweb.sar/server.xml must be set to strict
for production environments. This requires the authenticated user to be assigned
to one of the web-app/security-role/role-name roles in order to be authorized.
</description>
<ocil clause="it is not set to strict mode">
</ocil>
<rationale>
This rule enforces strict authorization, requiring authenticated users to be
members of defined roles. This allows JBoss administrators to create a simpler,
tighter security policy.
</rationale>



<fixtext>
Update allRolesAttribute for the &lt;Realm&gt; element with className="org.jboss.web.tomcat.security.JBossWebRealm" in JBOSS_HOME/server/[PROFILE]/deploy/jbossweb.sar/server.xml. Set the attribute value to "strict". By default, the allRolesAttribute is set to "authOnly". For example:

<xhtml:pre>
<xhtml:code>
&lt;Realm className="org.jboss.web.tomcat.security.JBossWebRealm" certificatePrincipal="org.jboss.security.auth.certs.SubjectDNMapping" allRolesMode="strict" /&gt;
</xhtml:code>

</xhtml:pre>

</fixtext>
<ident cce="" />
<oval id="jboss_eap_set_strict_mode" />
<ref nist="AC-3,AC-6" disa="ECAN-1,ECCD-1,ECCD-2,ECCR-2,ECIC-1,ECAN-1,ECLP-1" cis="" />
</Rule>

<Rule id="jboss_eap_define_security_role" severity="medium">
<title>Define &lt;security-role&gt; Elements</title>
<description>
Enable authorization and define &lt;security-role&gt; elements to control access
to deployed applications.
</description>
<ocil clause="the security-role element role is not defined">
</ocil>
<rationale>
The specification of &lt;security-role&gt; elements is a recommended practice
to ensure portability across application servers and for deployment descriptor
maintenance.
</rationale>



<fixtext>
Working with application developers (or available documentation), determine the desired roles for controlling access to the deployed applications.

Next, create the roles within web.xml.

<xhtml:pre>
<xhtml:code>
&lt;web-app&gt;
&lt;security-role&gt;
&lt;description&gt;The role required to access restricted content &lt;/description&gt;
&lt;role-name&gt;AuthorizedUser&lt;/role-name&gt;
&lt;/security-role&gt;
&lt;/web-app&gt;
</xhtml:code>

</xhtml:pre>

Finally, require the roles within the application's deployment descriptor, web.xml:

<xhtml:pre>
<xhtml:code>
&lt;web-app&gt;
&lt;security-constraint&gt;
&lt;auth-constraint&gt;
&lt;role-name&gt;AuthorizedUser&lt;/role-name&gt;
&lt;/auth-constraint&gt;
&lt;/security-constraint&gt;
&lt;/web-app&gt;
</xhtml:code>

</xhtml:pre>

</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_define_security_role" /-->
<ref nist="AC-3,AC-6" disa="ECAN-1,ECCD-1,ECCD-2,ECCR-2,ECIC-1,ECAN-1,ECLP-1" cis="" />
</Rule>

<Rule id="jboss_eap_remove_default_accounts" severity="medium">
<title>Remove Default User Accounts</title>
<description>
Remove the default user accounts defined in .properties files and
login-config.xml.
</description>
<ocil clause="default accounts exist and are not removed">
</ocil>
<rationale>
Default configurations are commonly leveraged by attackers to gain entry into
closed systems. Removing, renaming, or commenting out default user accounts
makes malicious exploitation more complex.
</rationale>

<xhtml:pre>
<xhtml:code>

&lt;module-option name="principal"&gt;sa&lt;/module-option&gt;
&lt;module-option name="userName"&gt;sa&lt;/module-option&gt;
&lt;module-option name="password"&gt;&lt;/module-option&gt;

&lt;module-option name="principal"&gt;guest&lt;/module-option&gt;
&lt;module-option name="userName"&gt;guest&lt;/module-option&gt;
&lt;module-option name="password"&gt;guest&lt;/module-option&gt;

</xhtml:code>

</xhtml:pre>

Examine the .properties files located within the JBOSS_HOME/server/[PROFILE]/conf/props/ directory.
By default, the following files exist:

<xhtml:ul>

<xhtml:li>
jbossws-users.properties
</xhtml:li>

<xhtml:li>
jmx-console-users.properties
</xhtml:li>

<xhtml:li>
messaging-users.properties
</xhtml:li>


</xhtml:ul>

Ensure the default user accounts have been removed, renamed, or commented out. This includes:

<xhtml:ul>

<xhtml:li>
admin
</xhtml:li>

<xhtml:li>
kermit
</xhtml:li>

<xhtml:li>
guest
</xhtml:li>

<fixtext>
Remove, rename, or comment out the default user accounts in the default &lt;application-policy&gt; elements located within the configuration file: JBOSS_HOME/server/[PROFILE]/conf/login-config.xml.
<xhtml:pre>
<xhtml:code>

&lt;module-option name="principal"&gt;sa&lt;/module-option&gt;
&lt;module-option name="userName"&gt;sa&lt;/module-option&gt;
&lt;module-option name="password"&gt;&lt;/module-option&gt;

&lt;module-option name="principal"&gt;guest&lt;/module-option&gt;
&lt;module-option name="userName"&gt;guest&lt;/module-option&gt;
&lt;module-option name="password"&gt;guest&lt;/module-option&gt;

</xhtml:code>

</xhtml:pre>

Remove, rename, or comment out the default user accounts in properties files: JBOSS_HOME/server/[PROFILE]/conf/props/

<xhtml:ul>

<xhtml:li>
jbossws-users.properties
</xhtml:li>

<xhtml:li>
jmx-console-users.properties
</xhtml:li>

<xhtml:li>
messaging-users.properties
</xhtml:li>


</xhtml:ul>

The default user accounts include:

<xhtml:ul>

<xhtml:li>
admin
</xhtml:li>

<xhtml:li>
kermit
</xhtml:li>

<xhtml:li>
guest
</xhtml:li>


</xhtml:ul>


NOTE: If access is required to the services protected by the &lt;application-policy&gt;, be sure that valid accounts and roles exist!

</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_remove_default_accounts" /-->
<ref nist="IA-5" disa="IAIA-1,IAIA-2,IATS-1,IATS-2" cis="" />
</Rule>

<Rule id="jboss_eap_remove_default_roles" severity="medium">
<title>Remove the Default Roles</title>
<description>
Remove the default role definitions in the default &lt;application-policy&gt;
elements.
<br /><br />
Additionally, remove the default role assignments in
various properties files from JBOSS_HOME/server/[PROFILE]/conf/props/
</description>
<ocil clause="default roles exist and are not removed">
</ocil>
<rationale>
Default configurations are commonly leveraged by attackers to gain entry into
closed systems. Renaming, removing, or commenting out default roles can make
exploitation more complex. These steps can also prevent inadvertent assignment
of permissions.
</rationale>

<xhtml:ul>

<xhtml:li>
jbossws-roles.properties
</xhtml:li>

<xhtml:li>
jmx-console-roles.properties
</xhtml:li>

<xhtml:li>
messaging-roles.properties
</xhtml:li>


</xhtml:ul>

The default role assignments are JBossAdmin, HttpInvoker, friend, and guest.


Finally, ensure the default role assignments within application specific deployment descriptors have been removed, renamed, or commented out:

<xhtml:ul>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/jmx-console.war/WEB-INF/web.xml
</xhtml:li>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/admin-console.war/WEB-INF/web.xml
</xhtml:li>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/management/console-mgr.sar/web-console.war/WEB-INF/web.xml
</xhtml:li>


</xhtml:ul>

These role assignments will fall within &lt;auth-constraint&gt; elements and will look similar to the following:

<xhtml:pre>
<xhtml:code>
&lt;security-constraint&gt;
&lt;web-resource-collection&gt;
&lt;web-resource-name&gt;HtmlAdaptor&lt;/web-resource-name&gt;
&lt;description&gt;An example security config that only allows users with the role JBossAdmin to access the HTML JMX console web application&lt;/description&gt;
&lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/web-resource-collection&gt;
&lt;auth-constraint&gt;
&lt;role-name&gt;JBossAdmin&lt;/role-name&gt;
&lt;/auth-constraint&gt;
&lt;/security-constraint&gt;
</xhtml:code>

</xhtml:pre>



<fixtext>
Ensure the default role assignments have been removed, renamed, or commented out from the default properties files located in JBOSS_HOME/server/[PROFILE]/conf/props/
<xhtml:ul>

<xhtml:li>
jbossws-roles.properties
</xhtml:li>

<xhtml:li>
jmx-console-roles.properties
</xhtml:li>

<xhtml:li>
messaging-roles.properties
</xhtml:li>


</xhtml:ul>

The default role assignments are JBossAdmin, HttpInvoker, friend, and guest.


Finally, ensure the default role assignments within application specific deployment descriptors have been removed, renamed, or commented out:

<xhtml:ul>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/jmx-console.war/WEB-INF/web.xml
</xhtml:li>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/admin-console.war/WEB-INF/web.xml
</xhtml:li>

<xhtml:li>
JBOSS_HOME/server/[PROFILE]/deploy/management/console-mgr.sar/web-console.war/WEB-INF/web.xml
</xhtml:li>


</xhtml:ul>

These role assignments will fall within &lt;auth-constraint&gt; elements and will look similar to the following:

<xhtml:pre>
<xhtml:code>
&lt;security-constraint&gt;
&lt;web-resource-collection&gt;
&lt;web-resource-name&gt;HtmlAdaptor&lt;/web-resource-name&gt;
&lt;description&gt;An example security config that only allows users with the role JBossAdmin to access the HTML JMX console web application&lt;/description&gt;
&lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/web-resource-collection&gt;
&lt;auth-constraint&gt;
&lt;role-name&gt;JBossAdmin&lt;/role-name&gt;
&lt;/auth-constraint&gt;
&lt;/security-constraint&gt;
</xhtml:code>

</xhtml:pre>



</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_remove_default_roles" /-->
<ref nist="IA-5" disa="IAIA-1,IAIA-2,IATS-1,IATS-2" cis="" />
</Rule>

<Rule id="jboss_eap_ensure_url_constraints" severity="medium">
<title>Configure Security Constraint Elements For All URLs</title>
<description>
The content to be secured is declared using one or more
&lt;web-resource-collection&gt; elements. Each &lt;web-resource-collection&gt;
element contains an optional series of &lt;url-pattern&gt; elements followed by
an optional series of &lt;http-method&gt; elements. The &lt;url-pattern&gt;
element value specifies a URL pattern against which a request URL must match for
the request to correspond to an attempt to access secured content. The
&lt;http-method&gt; element value specifies a type of HTTP request to allow.
</description>
<ocil clause="they do not exist">
</ocil>
<rationale>
Whitelisting allowed HTTP methods against all URL's is a recommended security
practice to minimize the attack surface of deployed applications. This must be
done carefully to ensure that security loopholes are not created, as JBoss
allows all HTTP methods by default.
</rationale>



<fixtext>
Implement a whitelist for HTTP methods accepted by each deployed application.  This will generally take the form of two separate security constraints.
</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_ensure_url_constraints" /-->
<ref nist="AC-3" disa="ECAN-1,ECCD-1,ECCD-2,ECCR-2,ECIC-1,ECAN-1" cis="" />
</Rule>

<Rule id="jboss_eap_configure_credential_caching" severity="medium">
<title>Configure User Credential Caching</title>
<description>
Security domains in use must use DefaultCacheTimeout less than or equal to 1800
seconds. If you want to disable caching of security credentials, set this to 0
to force authentication to occur every time. This has no affect if the
AuthenticationCacheJndiName has been changed from the default value.
</description>
<ocil clause="user credential caching is not configure or not configure correctly">
</ocil>
<rationale>
Production applications should be carefully evaluated to determine the
appropriate level of cache credential timeouts. Overuse of cached credentials
can leave applications vulnerable to stale authentication stores.
</rationale>



<fixtext>
Open the JaasSecurityManagerService Mbean configuration file located at JBOSS_HOME/server/[PROFILE]/conf/jboss-service.xml

Find the element &lt;mbean code="org.jboss.security.plugins.JaasSecurityManagerService" name="jboss.security:service=JaasSecurityManager"&gt;

Change the &lt;DefaultCacheTimeout&gt; to 1800 or less.

</fixtext>
<ident cce="" />
<oval id="jboss_eap_configure_credential_caching" />
<ref nist="SC-8,SC-9,SC-23" disa="ECTM-1,ECTM-2" cis="" />
</Rule>

<Rule id="jboss_eap_remove_snmp" severity="high">
<title>Remove the JBoss SNMP Package</title>
<description>
The file JBOSS_HOME/server/[PROFILE]/deploy/snmp-adaptor.sar should not exist.
snmp-adaptor.sar is the default deployment package for JBoss SNMP. The manager
implements SNMP using joeSNMP, supporting only SNMP versions 1 and 2.
</description>
<ocil clause="it is not removed">
</ocil>
<rationale>
The default SNMP package (snmp-adaptor.sar) implements joeSNMP, which itself
implements SNMP versions 1 and 2. Both versions of the SNMP protocol have many
flaws and known vulnerabilities that can leveraged by attackers. Often these are
simple remote exploitations that can be easily used by attackers to penetrate a
network.
</rationale>

<fixtext>
Delete the directory JBOSS_HOME/server/[PROFILE]/deploy/snmp-adaptor.sar/

</fixtext>
<ident cce="" />
<oval id="jboss_eap_remove_snmp" />
<ref nist="CM-6,CM-7" disa="DCCS-1,DCCS-2,DCCT-1,ECSC-1,DCSS-1,DCPP-1" cis="" />
</Rule>

<Rule id="jboss_eap_set_maxpostsize_limit" severity="medium">
<title>Set the Tomcat Connectors Limit For maxPostSize</title>
<description>
The Tomcat container is commonly used to broker connections for JBoss. Several
steps to harden the connectors can be taken quickly and easily. maxPostSize is
the maximum size (in bytes) that the FORM URL parser can handle. Environments
that pass large amounts of data through forms (such as file uploads), may need
to increase this setting.
</description>
<ocil clause="maxPostSize limit is not set correctly">
</ocil>
<rationale>
An overly high setting can create a denial of service vulnerability in which an
attacker simultaneously performs several large POSTS - tying up server
resources and network bandwidth.
</rationale>

<fixtext>
Ensure that all &lt;Connector&gt; elements within JBOSS_HOME/server/[PROFILE]/deploy/jbossweb.sar/server.xml have appropriately configured maxPostSize attributes (104857600 or less).

</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_set_maxpostsize_limit" /-->
<ref nist="CM-6,CM-7" disa="DCCS-1,DCCS-2,DCCT-1,ECSC-1,DCSS-1,DCPP-1" cis="" />
</Rule>

<Rule id="jboss_eap_set_maxsavepostsize_limit" severity="medium">
<title>Set the Tomcat Connectors Limit for maxSavePostSize</title>
<description>
The Tomcat container is commonly used to broker connections for JBoss. Several
steps to harden the defined connectors can be taken quickly and easily.
maxSavePostSize is the maximum size (in bytes) that is buffered during
CLIENT-CERT and FORM authentication. The default setting of 4096 (4 KB) is
sufficient for most environments.
</description>
<ocil clause="maxSavePostSize limit is not set correctly">
</ocil>
<rationale>
An overly high setting can inadvertently create a denial of service
vulnerability in which many users are authenticated and tying up server
resources.
</rationale>

<fixtext>
Ensure that all &lt;Connector&gt; elements within JBOSS_HOME/server/[PROFILE]/deploy/jbossweb.sar/server.xml have appropriately configured maxSavePostSize attributes (12288 or less).

</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_set_maxsavepostsize_limit" /-->
<ref nist="CM-6,CM-7" disa="DCCS-1,DCCS-2,DCCT-1,ECSC-1,DCSS-1,DCPP-1" cis="" />
</Rule>

<Rule id="jboss_eap_set_header_tags" severity="low">
<title>Set the Tomcat Connectors Header Tags</title>
<description>
The Tomcat container is commonly used to broker connections for JBoss. Several steps to harden the defined connectors can be taken quickly and easily. The server attribute controls the Server Header tag sent with each HTTP response. The default setting causes the server to return Apache-Coyote/1.1 with each HTTP response.
</description>
<ocil clause="they are not set correctly">
</ocil>
<rationale>
Failure to set the server attribute aids malicious users in fingerprinting a
web server. However, the server attribute is also used legitimately by some
applications for identification.
</rationale>

<fixtext>
Ensure that all HTTP &lt;Connector&gt; elements within JBOSS_HOME/server/[PROFILE]/deploy/jbossweb.sar/server.xml have appropriately configured server attributes (set to something other than Apache-Coyote/1.1).

</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_set_header_tags" /-->
<ref nist="CM-6,CM-7" disa="DCCS-1,DCCS-2,DCCT-1,ECSC-1,DCSS-1,DCPP-1" cis="" />
</Rule>

<Rule id="jboss_eap_set_cipher_attribute" severity="medium">
<title>Set the Tomcat Connectors Ciphers Attribute</title>
<description>
The Tomcat container is commonly used to broker connections for JBoss. Several
steps to harden the defined connectors can be taken quickly and easily. The
ciphers attribute controls the what ciphers are used to negotiate secure
connections. The default setting causes the server to use the ciphers allowed
by the running Java Virtual Machine.
</description>
<ocil clause="">
</ocil>
<rationale>
In an environment where FIPS mode has been enabled for the JVM, overriding those settings can lead to system instability or the use of non-FIPS algorithms.
</rationale>

<fixtext>
Ensure that all secure &lt;Connector&gt; elements within JBOSS_HOME/server/[PROFILE]/deploy/jbossweb.sar/server.xml have not defined cipher attributes.

</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_set_cipher_attribute" /-->
<ref nist="CM-6,CM-7" disa="DCCS-1,DCCS-2,DCCT-1,ECSC-1,DCSS-1,DCPP-1" cis="" />
</Rule>

<Rule id="jboss_eap_set_connectiontimeout_limit" severity="medium">
<title>Set the Tomcat Connectors Limit for connectionTimout</title>
<description>
The Tomcat container is commonly used to broker connections for JBoss. Several
steps to harden the defined connectors can be taken quickly and easily.
connectionTimeout is the time (in milliseconds) that the container will wait
for URI content after receiving a connection. The default setting is 60000.
</description>
<ocil clause="connectionTimeout is not configured correctly">
</ocil>
<rationale>
An overly high setting can be easily exploited to create a denial of service
condition by tying up server resources.
</rationale>

<fixtext>
Ensure that all HTTP &lt;Connector&gt; elements within JBOSS_HOME/server/[PROFILE]/deploy/jbossweb.sar/server.xml have appropriately configured connectionTimeout attributes (20000 or less).
</fixtext>
<ident cce="" />
<!--oval id="jboss_eap_set_cipher_attribute" /-->
<ref nist="CM-6,CM-7" disa="DCCS-1,DCCS-2,DCCT-1,ECSC-1,DCSS-1,DCPP-1" cis="" />
</Rule>

</Group>
